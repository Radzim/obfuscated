{
  "post_href": "https://leetcode.com/problems/longest-palindromic-substring/discuss/2156659/Python-Easy-O(1)-Space-approach",
  "python_solutions": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        n=len(s)\n        def expand_pallindrome(i,j):            \n            while 0<=i<=j<n and s[i]==s[j]:\n                i-=1\n                j+=1                            \n            return (i+1, j)\n        \n        res=(0,0)\n        for i in range(n):\n            b1 = expand_pallindrome(i,i)\n            b2 = expand_pallindrome(i,i+1)            \n            res=max(res, b1, b2,key=lambda x: x[1]-x[0]+1) # find max based on the length of the pallindrome strings.\n                    \n        return s[res[0]:res[1]]",
  "slug": "longest-palindromic-substring",
  "post_title": "\u2705  Python Easy O(1) Space approach",
  "user": "constantine786",
  "upvotes": 47,
  "views": 6600,
  "problem_title": "longest palindromic substring",
  "number": 5,
  "acceptance": 0.324,
  "difficulty": "Medium",
  "__index_level_0__": 181,
  "question": "Given a string s, return the longest\npalindromic\nsubstring\nin s.\n  Example 1:\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\nExample 2:\nInput: s = \"cbbd\"\nOutput: \"bb\"\n  Constraints:\n1 <= s.length <= 1000\ns consist of only digits and English letters.",
  "augmented_questions": {
    "keyboard": {
      "0.0": "Given a string s, return the longest palindromic substring in s.",
      "0.1": "Given a string s, rerurn the longest lalindrojic substring in s.",
      "0.2": "GivSn a string s, return the iongesH palindromic subst5iBg in s.",
      "0.3": "Given a string s, r2%urn the O8hgest La?Undrojic suvsGriHg in s.",
      "0.4": "biveJ a sRGigg s, 4etIrm the :oBgeCt oal8ndFo,7c s*GstEinB in s.",
      "0.5": "Fifej a st$LHg s, tetjEn the oonBexy pzl&ncroHkX XubsRTijv in s.",
      "0.6": "yifeG a sygumg s, rft^4m the IobgDXy 9qkknd4Pmlc CubwrTKnV in s.",
      "0.7": "bLbWn a CG$ibt s, g4tHEB the lKmRSsf OaKKmXTohiF WuHC5#jnR in s.",
      "0.8": "vkdeJ a s^5jMb s, r#f^fg the /ognRz5 Ox/KMdtlmof wuVa%dkbn in s.",
      "0.9": "nUCrj a W63lgF s, dS$84J the <(hfdzh oqIoJCrKNJv d7fd6d9Hn in s.",
      "1.0": "YOFRg a DyGUgT s, frRi%b the K9Mf$eG 0S:OHVT9KOF D^HCH3lGr in s."
    },
    "synonym": {
      "0.0": "Pay a string s, give the longest palindromic substring in s.",
      "0.1": "Given a string s, return the longest palindromic substring in s.",
      "0.2": "Given a string atomic number 16, return the longest palindromic substring in s.",
      "0.3": "Given a string s, pass the long palindromic substring in due south.",
      "0.4": "Give a string s, return the foresightful palindromic substring in sulfur.",
      "0.5": "Given a string atomic number 16, riposte the farseeing palindromic substring in sec.",
      "0.6": "Give a bowed stringed instrument southward, return the tenacious palindromic substring in southward.",
      "0.7": "Move over a drawstring siemens, fall the recollective palindromic substring in due south.",
      "0.8": "Give a drawing string southward, hark back the tenacious palindromic substring in randomness.",
      "0.9": "Afford a twine southward, revert the prospicient palindromic substring in sec.",
      "1.0": "Give a drawstring randomness, yield the foresighted palindromic substring in siemens."
    },
    "random": {
      "0.0": "A s, the palindromic substring in s.",
      "0.1": "A string, return the longest palindromic substring in s.",
      "0.2": "Given a string s, return longest substring in.",
      "0.3": "Given string s, the longest palindromic in.",
      "0.4": "A string s, palindromic substring in.",
      "0.5": "A string, return longest in.",
      "0.6": "A, the palindromic.",
      "0.7": "A, the.",
      "0.8": "A,.",
      "0.9": "A,.",
      "1.0": "A,."
    },
    "cut": {
      "0.0": "Given a string s, return the longest\npalindromic\nsubstring\nin s.",
      "0.1": "Given a string s, return the longest\npalindromic\nsubstring",
      "0.2": "Given a string s, return the longest\npalindromic\nsu",
      "0.3": "Given a string s, return the longest\npalindro",
      "0.4": "Given a string s, return the longest\np",
      "0.5": "Given a string s, return the lon",
      "0.6": "Given a string s, return t",
      "0.7": "Given a string s, r",
      "0.8": "Given a strin",
      "0.9": "Given ",
      "1.0": ""
    }
  },
  "llm_responses": {
    "meta": {
      "keyboard": {
        "0.0": [
          "def longest_palindromic_substring(s):\n    def expand_around_center(s, left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n\n    longest = \"\"\n    for i in range(len(s)):\n        palindrome1 = expand_around_center(s, i, i)\n        palindrome2 = expand_around_center(s, i, i + 1)\n        if len(palindrome1) > len(longest):\n            longest = palindrome1\n        if len(palindrome2) > len(longest):\n            longest = palindrome2\n    return longest\n\nprint(longest_palindromic_substring(\"babad\"))\nprint(longest_palindromic_substring(\"cbbd\"))"
        ],
        "0.1": [
          "def longest_palindromic_substring(s):\n    def expand_around_center(s, left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n\n    longest = \"\"\n    for i in range(len(s)):\n        palindrome1 = expand_around_center(s, i, i)\n        palindrome2 = expand_around_center(s, i, i + 1)\n        if len(palindrome1) > len(longest):\n            longest = palindrome1\n        if len(palindrome2) > len(longest):\n            longest = palindrome2\n    return longest\n\nprint(longest_palindromic_substring(\"babad\")) \nprint(longest_palindromic_substring(\"cbbd\")) \nprint(longest_palindromic_substring(\"a\")) \nprint(longest_palindromic_substring(\"ac\")) \nprint(longest_palindromic_substring(\"racecar\")) \nprint(longest_palindromic_substring(\"madam\"))"
        ],
        "0.2": [
          "def longest_palindromic_substring(s):\n    def expand_around_center(s, left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n\n    longest = \"\"\n    for i in range(len(s)):\n        palindrome1 = expand_around_center(s, i, i)\n        palindrome2 = expand_around_center(s, i, i + 1)\n        if len(palindrome1) > len(longest):\n            longest = palindrome1\n        if len(palindrome2) > len(longest):\n            longest = palindrome2\n    return longest\n\nprint(longest_palindromic_substring(\"babad\"))\nprint(longest_palindromic_substring(\"cbbd\"))"
        ],
        "0.3": [
          "def longest_substring(s):\n    if not s:\n        return \"\"\n    longest = \"\"\n    current = \"\"\n    for char in s:\n        if char not in current:\n            current += char\n            if len(current) > len(longest):\n                longest = current\n        else:\n            index = current.find(char)\n            current = current[index + 1:] + char\n            if len(current) > len(longest):\n                longest = current\n    return longest\n\nprint(longest_substring(\"abcabcbb\")) \nprint(longest_substring(\"bbbbb\")) \nprint(longest_substring(\"pwwkew\")) \nprint(longest_substring(\"\")) \nprint(longest_substring(\"abcdefg\"))"
        ],
        "0.4": [
          "def biveJ(s):\n    return s[::-1]\n\ndef sRGigg(s):\n    return s.title()\n\ndef etIrm(s):\n    return s.strip()\n\ndef oal8ndFo(s):\n    return s.lower()\n\ndef c7fc(s):\n    return s.upper()\n\ndef sGstEinB(s):\n    return s.split()\n\ns = \"   hello world   \"\nprint(biveJ(s))\nprint(sRGigg(s))\nprint(etIrm(s))\nprint(oal8ndFo(s))\nprint(c7fc(s))\nprint(sGstEinB(s))"
        ],
        "0.5": [
          "import re\n\ndef find_substring(text, pattern):\n    return re.findall(pattern, text)\n\ntext = \"Fifej a st$LHg s, tetjEn the oonBexy pzl&ncroHkX XubsRTijv in s.\"\npattern = r\"[a-zA-Z]+\"\nmatches = find_substring(text, pattern)\nprint(matches)"
        ],
        "0.6": [
          "def find_substring(main_string, sub_string):\n    try:\n        index = main_string.index(sub_string)\n        return main_string[index:]\n    except ValueError:\n        return None\n\nmain_string = \"yifeG a sygumg s, rft^4m the IobgDXy 9qkknd4Pmlc CubwrTKnV in s\"\nsub_string = \"IobgDXy\"\nresult = find_substring(main_string, sub_string)\nprint(result)"
        ],
        "0.7": [
          "def find_longest_substring(s):\n    max_length = 0\n    max_substring = \"\"\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if len(set(substring)) == len(substring) and len(substring) > max_length:\n                max_length = len(substring)\n                max_substring = substring\n    return max_substring\n\ns = \"bLbWn a CG$ibt s, g4tHEB the lKmRSsf OaKKmXTohiF WuHC5#jnR in s\"\nprint(find_longest_substring(s))"
        ],
        "0.8": [
          "import re\ndef find_pattern(string):\n    pattern = r\"[a-zA-Z0-9]+\"\n    matches = re.findall(pattern, string)\n    return matches\n\nstring = \"vkdeJ a s^5jMb s, r#f^fg the /ognRz5 Ox/KMdtlmof wuVa%dkbn in s\"\nprint(find_pattern(string))"
        ],
        "0.9": [
          "def decode_string(s):\n    stack = []\n    curr_num = 0\n    curr_str = ''\n    for c in s:\n        if c == '[':\n            stack.append(curr_str)\n            stack.append(curr_num)\n            curr_str = ''\n            curr_num = 0\n        elif c == ']':\n            num = stack.pop()\n            prev_str = stack.pop()\n            curr_str = prev_str + num*curr_str\n        elif c.isdigit():\n            curr_num = curr_num*10 + int(c)\n        else:\n            curr_str += c\n    return curr_str\n\nprint(decode_string(\"3[a]2[bc]\"))"
        ],
        "1.0": [
          "def decode_message(message):\n    decoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                decoded_message += chr((ord(char) - 65 - 3) % 26 + 65)\n            else:\n                decoded_message += chr((ord(char) - 97 - 3) % 26 + 97)\n        else:\n            decoded_message += char\n    return decoded_message\n\nmessage = \"YOFRg a DyGUgT s, frRi%b the K9Mf$eG 0S:OHVT9KOF D^HCH3lGr in s\"\nprint(decode_message(message))"
        ]
      }
    }
  }
}