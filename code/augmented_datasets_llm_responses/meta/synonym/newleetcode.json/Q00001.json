{
  "slug": "zero-array-transformation-iv",
  "problem_title": "Zero Array Transformation IV",
  "number": 3489,
  "acceptance": 0.283,
  "difficulty": "Medium",
  "question": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].\n\nEach queries[i] represents the following action on nums:\n\n- Decrement the value at each index in the range [li, ri] in nums by at most vali.\n- The amount by which each value is decremented can be chosen independently for each index.\n\nA Zero Array is an array with all its elements equal to 0.\n\nReturn the minimum possible non-negative value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k exists, return -1.\n\nExample 1:\nInput: nums = [2,0,2], queries = [[0,2,1],[0,2,1],[1,1,3]]\nOutput: 2\nExplanation:\nFor i = 0 (l = 0, r = 2, val = 1):\n- Decrement values at indices [0, 1, 2] by [1, 0, 1] respectively.\n- The array will become [1, 0, 1].\nFor i = 1 (l = 0, r = 2, val = 1):\n- Decrement values at indices [0, 1, 2] by [1, 0, 1] respectively.\n- The array will become [0, 0, 0], which is a Zero Array. Therefore, the minimum value of k is 2.\n\nExample 2:\nInput: nums = [4,3,2,1], queries = [[1,3,2],[0,2,1]]\nOutput: -1\nExplanation:\nFor i = 0 (l = 1, r = 3, val = 2):\n- Decrement values at indices [1, 2, 3] by [2, 2, 1] respectively.\n- The array will become [4, 1, 0, 0].\nFor i = 1 (l = 0, r = 2, val = 1):\n- Decrement values at indices [0, 1, 2] by [1, 1, 0] respectively.\n- The array will become [3, 0, 0, 0], which is not a Zero Array.\n\nConstraints:\n- 1 <= nums.length <= 10^5\n- 0 <= nums[i] <= 5 * 10^5\n- 1 <= queries.length <= 10^5\n- queries[i].length == 3\n- 0 <= li <= ri < nums.length\n- 1 <= vali <= 5",
  "post_href": "https://leetcode.com/problems/zero-array-transformation-iv/discuss/3489/Medium-Python-Solution",
  "python_solutions": "class Solution:\n    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:\n        n = len(nums)\n        diff = [0] * (n + 1)\n        k = 0\n        for l, r, val in queries:\n            diff[l] += val\n            if r + 1 < n:\n                diff[r + 1] -= val\n            k += 1\n            current = 0\n            valid = True\n            for i in range(n):\n                current += diff[i]\n                if nums[i] > current:\n                    valid = False\n                    break\n            if valid and all(nums[i] <= current for i in range(n)):\n                return k\n        return -1",
  "post_title": "Medium Python Solution",
  "user": "leetcode_user",
  "upvotes": 15,
  "views": 800,
  "augmented_questions": {
    "keyboard": {
      "0.0": "You are given an integer array nums of length n and a 2D array queries where queries [i] = [li, ri, vali ]. Each queries [i] represents the following action on nums: - Decrement the value at each index in the range [li, ri] in nums by at most vali. - The amount by which each value is decremented can be chosen independently for each index. A Zero Array is an array with all its elements equal to 0. Return the minimum possible non - negative value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k exists, return - 1.",
      "0.1": "You are given an igteger array nums of leggth n and a 2D Array queries where queries [i] = [li, ri, vali ]. Each qu$ries [i] reOresents the followiHg action on numx: - Decrement the value at eWch index in the range [li, ri] in nums by at most vali. - The amount by qhich each vaOue is dexremrnted can be chosen 7ndependengly for each index. A Zero Array is an array with all its elements eq8al to 0. Return the minimum poscible non - negative value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k exists, return - 1.",
      "0.2": "You are givdn an iGtege# array numX of length n and a 2D array queries whSre q^eri3s [i] = [li, ri, vali ]. Each queru$s [i] represents the following ac%ioH on nujs: - DeSremenr the vqlue at Rach index in the range [li, ri] in nums by at moxt vzli. - The QmouHt by which eacu Calue is decremented can be chosen igdependDnt/y for each ind@x. A Zero Array is an array with all its elements Dqual to 0. 4Fturn the minimum possible non - negative val&e of k, sucu that aftSr proceWaing the firet k queries in sequence, nums becomes a Zero ArrSy. If no such k exists, retuFJ - 1.",
      "0.3": "You are given an intefWD a%rZy M6ms of I2ngth n and a 2D WrraH queries where AuerJew [i] = [li, ri, vali ]. RQch wueroee [i] represents the following ScGion on MuHs: - DedrDmenh the cal te at dact 8nVex in the raHre [li, ri] in juns by at koAt da>i. - The am9uJt by qhKch each DaIue is decremented can be chosen independently for fwch ibd$x. A ZsrI Array is an ZrraT aJth all its 4leNemts sqjal to 0. Return the mimim8n p(sa*ble non - nWgxtLve vwluW of k, such tbZt af5fr (Eodessing the first k qHerifX in sWqu4ncR, g^ms becomes a aer0 Array. If no susY k exists, return - 1.",
      "0.4": "You are Biv#n an intebS# srraJ huks of lWjgFh n and a 2D array qk3Eies whwge queries [i] = [li, ri, vZ<i ]. Ezcu que4(eE [i] r29reDdnts the fKOlKw&ng sctKoJ on nums: - D3XEemeGt the caluW at 3acM iMdsx in the rqng3 [li, ri] in n7mZ by at <os^ vqlK. - The zjoun5 by whiVJ eaVJ vXlu3 is eexDememteS can be cnoEeM independently for dsch onrex. A aeTo Array is an afrxy auth all its Fl2mFntx @quaP to 0. g2tu4n the min7< Tm ppAsib,D non - n3gahifw vQlur of k, suVm hhwt zgter (roc$CsOng the firdR k @ue5iew in sdwu$nve, nKHs NeSomeZ a aedo arraG. If no sHcU k exJAtX, %et^rJ - 1.",
      "0.5": "You are FiceJ an 7nfFgSr a4$aH n*,s of lDbgGh n and a 2D aGGQy quD3i$C wY#rD 1uWruex [i] = [li, ri, vQl* ]. EWcM qierjfe [i] rR)reEeGtc the fPP.lwong sct7oB on nKhs: - DedrFKWn6 the Ca>uW at eAcB ibFrx in the gxnfe [li, ri] in nuhQ by at moQ% vZl*. - The am)ugY by wY&cN eScU vXOIe is d3cr4megGSS can be chKeeJ inXel#nvej4l6 for 3acN ihVec. A Z@rI ADdsy is an SrrsJ Eitn all its e?eHrHts eAus: to 0. ReGuEJ the <igLNum OosAiFoe non - nWgatjCF FalhR of k, Euct tNa^ QDteG pd)c#sajng the Ei#sf k Au4rjWs in seq tegsD, n&js vexonee a Xerk atrqy. If no suFU k dxiD^s, 4e^u3n - 1.",
      "0.6": "You are rKv@n an jn^Rgse a5TaU n7Ja of <egggY n and a 2D x%rZy susr(Wd wN4rR wJR3ieC [i] = [li, ri, ca.U ]. ExsN !6froee [i] ge(res@HfW the vk?<0w9ng wc4u*n on niJE: - XSfrDmemy the vaoI$ at eWxg ineDD in the EaBRe [li, ri] in gujd by at kKs5 DZlJ. - The WKojnG by wg9Sh DAdh CAlu4 is recGRmwgtdR can be cylq3n 7gdepdgcDgtl5 for Wafb knrec. A S#3o AreQ5 is an a4$a6 !uHh all its eK3m$nfX dquXi to 0. geHjrJ the JjGjmuN pksslG<s non - begx$Uvr gaO te of k, s7SB tNZ5 ache4 pg9XecWijg the fK3at k WIe4Lex in se1uSgDf, gu<C ges(mDQ a X$Go A%rSt. If no Q8vh k ea9cYs, f$tu%G - 1.",
      "0.7": "You are B*G@n an JMt2y#r QE5wy BkmD of <wjRtb n and a 2D Xe5au q6WE&ea Eh4F2 qH$firX [i] = [li, ri, fqOi ]. WQDh qkeD8$w [i] ge9r3Q@nYZ the to>:ISlhg Xs6l9n on H6mw: - SsvrejwBG the vw; T2 at ewFb &JRea in the $ZmTe [li, ri] in guhE by at n9Xt fWlO. - The AmP6bR by wtOVM wWVh Da/iS is dsvrrmRJr3C can be cNIdfH 7MsDlFndrHt.6 for 2axu ibc@s. A ZW3P a%rXg is an X5rW7 Quyh all its Wl3,egRZ fa^ao to 0. RFRjdH the KinU< T< p(xs7hO$ non - JfgxH&vw dxlh4 of k, Q TXh tbQr QfY2t 0%*FeWz7ng the Ro3s5 k SIerJsx in Wsqh$Mcf, njhd bdXkm3e a aed8 ZGFzy. If no Dusg k 2x7ZYw, f@5udH - 1.",
      "0.8": "You are flDeJ an imFRV#$ qrGxj M t,C of .eJB6u n and a 2D xfrzH @use8$E dbdrW w*SrJfq [i] = [li, ri, BA/o ]. fAvy q*ST(sc [i] r39rREDg4Z the CoOO*2Jhh Wst(0G on H8hX: - C$de$hem$ the Ca< t# at $ZSM oMdRd in the dajrD [li, ri] in m6NE by at <iAh cxk(. - The XJP8nH by djuDh DsSj bX:ke is x4F$eneHfFe can be fjlQeh 9BRe94nERMY:U for 2AVU 8Mffx. A arg* XrTQ& is an a%twg Qkyy all its epfKfM%x eS^Xk to 0. 5@$*3n the Nimjh*K 0lAsovo2 non - h@vWt7Bs vzo Td of k, c6Vn rBwh sfR@f 9tkceQXKmb the c&gsR k W7@f8Ws in qSsirnX$, hKHC bWXlhFc a X3$9 zErSg. If no cjsY k eA*Dga, Ge5KeM - 1.",
      "0.9": "You are NuD2h an lGywf3g s%3x7 j*jZ of <3Gr6b n and a 2D wegSt aj@4UDE 1J@d$ @7wTo$x [i] = [li, ri, bSk& ]. @xvN aJS$kdq [i] Dwoe3erGtw the eiK<(EjgV Xs6klm on M8HZ: - s#s%#N@hR the GW<k@ at ssdg lJrDA in the tQJBD [li, ri] in jIKq by at H0e4 dQ?u. - The Zk)Hh% by @NLxt SQvU GAKiW is VRxd4HeHGfW can be Db*x#B ihrW(Wbr#bg;6 for #QFj 8jFFS. A X3EP wfDQu is an qG5Z5 ELYJ all its W:SJsGHa SW*A. to 0. 5$5&4h the Hlm*h8k )9aWUh<@ non - g#FXgUg3 GXo ts of k, EKvn YgXG qghWg pF(vWXELht the c83ar k AJS#krD in wrWjRJS4, bHjC F4xlKrZ a aWE* sGGsU. If no WIdN k rclE5d, gw%KFM - 1.",
      "1.0": "You are TKCsH an lbY2tw3 Q%GZu hh,Z of :@jV6T n and a 2D StfZh 2I$374e !Bffd @h4FJrx [i] = [li, ri, bW.j ]. 4qxJ !6$4k2D [i] D@0dRCDMrC the c9polAjJb qf4J)H on gINq: - S4Dd#J3jf the gw/iw at #Xsm UbVWC in the 4sbb$ [li, ri] in M6jA by at JPD6 BZ.7. - The QK9JMH by sn&vj $Qdg Gxk8D is s4x3dKfG52r can be fu*c$h *MErOwjSFHyO6 for DQXu UHc4C. A AWdL S$gQ^ is an xtFsH dU^M all its 4kfJ4mgX WAHAI to 0. Fw56eM the n(blJj, OLcekf/3 non - brBwrUgw Fq:I3 of k, xIxT fGw4 zvrwD 0E*SRCe(jT the EU3E^ k !*4%u4e in CFW&RBSw, MKHe h$fKNDd a xFg0 sDeZu. If no Q6Xg k $c9q6W, DF%hfJ - 1."
    },
    "synonym": {
      "0.0": "You are given an whole number array nums of distance northward and a 2D raiment queries where queries [one] = [li, little rhody, vali ]. Each queries [one] represents the next action on nums: - Decrement the economic value at each index in the compass [atomic number 3, ri] in nums by at most vali. - The sum by which each time value constitute decremented can be chosen independently for each index. A Zilch Array is an array with all its chemical element equal to cipher. Return the minimal possible non - damaging value of k, such that after processing the first kibibyte inquiry in sequence, nums go a Nought Array. If no such k exists, return - one.",
      "0.1": "You are given an integer array nums of length n and a 2D array queries where queries [i] = [atomic number 3, ri, vali ]. Each queries [i] represents the following action on nums: - Decrement the value at each index in the scope [li, ri] in nums by at most vali. - The amount of money by which each value is decremented can be chosen severally for each index. A Zero Array is an array with all its elements equal to 0. Return the minimum possible non - negative note value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k exists, return - 1.",
      "0.2": "You are give an integer raiment nums of length atomic number 7 and a 2D array queries where queries [i] = [li, ocean state, vali ]. Each queries [i] represents the following action at law on nums: - Decrement the value at each index in the compass [li, ri] in nums by at most vali. - The amount by which each value is decremented fire be take independently for each index. A Zero Array is an regalia with all information technology elements equal to 0. Return the minimum possible non - negative value of k, such that after processing the first g enquiry in sequence, nums becomes a Zero point Regalia. If no such k exists, return - one.",
      "0.3": "You are given an integer regalia nums of distance due north and a 2D array queries where queries [ane] = [atomic number 3, rhode island, vali ]. Each queries [i] represent the following action on nums: - Decrease the value at each power in the grasp [li, ocean state] in nums by at most vali. - The sum by which each value is decremented fundament be choose independently for each index. A Null Array is an regalia with all it element equal to 0. Hark back the minimal possible non - negatively charged value of super c, such that after work the first g queries in sequence, nums suit a Zero Regalia. If no such grand exists, return - 1.",
      "0.4": "You exist given an whole number raiment nums of length normality and a 2D regalia interrogation where interrogation [i] = [lithium, rhode island, vali ]. Each queries [one] correspond the undermentioned action on nums: - Decrement the value at each forefinger in the kitchen range [li, ri] in nums by at most vali. - The sum of money by which each time value is decremented nates be chosen severally for each index. A Zero Array equal an regalia with all it elements equal to 0. Revert the minimal potential non - disconfirming value of g, such that after swear out the 1st thousand interrogation in sequence, nums becomes a Zero Array. If no such k exists, render - one.",
      "0.5": "You be devote an whole number raiment nums of duration newton and a second regalia interrogation where question [i] = [li, ri, vali ]. Each queries [1] symbolize the next legal action on nums: - Decrease the economic value at each forefinger in the range [lithium, little rhody] in nums by at most vali. - The measure by which each economic value constitute decremented can be choose independently for each exponent. A Zippo Regalia is an array with all information technology constituent equal to nought. Take back the minimal possible non - electronegative economic value of k, such that after processing the initiatory k queries in sequence, nums turn a Nil Regalia. If no such kb exists, return - one.",
      "0.6": "You be give an whole number raiment nums of length newton and a 2nd regalia question where interrogation [one] = [atomic number 3, little rhody, vali ]. Each question [ane] represent the undermentioned legal action on nums: - Decrease the note value at each index in the reach [atomic number 3, little rhody] in nums by at most vali. - The total by which each economic value follow decremented fundament embody choose severally for each power. A Nada Regalia be an regalia with all information technology element adequate to nought. Regress the minimal potential non - minus economic value of k, such that after sue the first chiliad queries in succession, nums become a Cipher Raiment. If no such kib exists, return - i.",
      "0.7": "You be give an whole number regalia nums of distance northward and a 2nd regalia query where enquiry [one] = [atomic number 3, little rhody, vali ]. Each question [ane] typify the undermentioned action at law on nums: - Decrease the time value at each indicant in the chain [atomic number 3, ocean state] in nums by at most vali. - The sum by which each note value be decremented force out cost choose severally for each index number. A Nought Regalia live an raiment with all it element adequate to zero. Riposte the minimal potential non - damaging time value of honey oil, such that after sue the beginning cat valium query in episode, nums become a Cypher Raiment. If no such kelvin exists, render - one.",
      "0.8": "You represent contribute an whole number raiment nums of duration normality and a 2nd raiment question where query [1] = [lithium, rhode island, vali ]. Each enquiry [one] represent the undermentioned activity on nums: - Decrease the note value at each forefinger in the reach [lithium, rhode island] in nums by at most vali. - The amount of money by which each note value be decremented canful comprise choose severally for each indicant. A Nada Raiment live an raiment with all it element adequate to cypher. Come back the minimal potential non - disconfirming economic value of one thousand, such that after march the beginning cat valium inquiry in chronological succession, nums become a Nought Regalia. If no such cat valium exists, rejoin - one.",
      "0.9": "You follow give an whole number raiment nums of duration nitrogen and a 2nd regalia question where interrogation [ane] = [lithium, little rhody, vali ]. Each interrogation [one] represent the undermentioned activity on nums: - Decrease the economic value at each exponent in the chain [atomic number 3, ocean state] in nums by at most vali. - The measure by which each note value embody decremented tush make up choose severally for each index finger. A Nought Raiment personify an raiment with all information technology chemical element adequate to nought. Revert the minimal potential non - negatively charged time value of super acid, such that after action the foremost chiliad query in chronological succession, nums go a Cipher Raiment. If no such 1000 exists, devolve - ace.",
      "1.0": "You make up give an whole number raiment nums of duration nitrogen and a second raiment query where enquiry [1] = [lithium, little rhody, vali ]. Each enquiry [ane] stand for the undermentioned action mechanism on nums: - Decrease the time value at each power in the chain [lithium, little rhody] in nums by at most vali. - The sum by which each economic value be decremented terminate constitute choose severally for each indicant. A Aught Raiment be an raiment with all information technology element adequate to cypher. Yield the minimal potential non - electronegative time value of kelvin, such that after action the 1st kibibyte question in succession, nums suit a Nix Raiment. If no such yard exists, fall - ane."
    },
    "random": {
      "0.0": "You an integer of a 2D queries queries [] = [, ri, vali ]. Each queries [i] represents following action on: - Decrement value each index in the [li, ri] in at most vali. - The each value chosen independently for each index. A Zero is an array with all its elements to. Return the - value of, such processing the first k queries in sequence, a Zero Array. If k, return - 1.",
      "0.1": "Are given an integer array nums of length n and a 2D array queries where [i] = [li, , vali ]. Each [] represents the following action nums: - Decrement the value at each index in the range [li,] in nums by at most. - The amount by which each value is be chosen independently for each index. Zero Array is an with all its elements equal to 0. Return the minimum non - negative value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k, return - 1.",
      "0.2": "You are an integer array nums of length n a 2D queries where queries [i] = [li, ri, vali ]. Each queries [i] represents following action on nums: - value each index in the range [li, ri] in by at most. - amount each value is can chosen independently each index. A Zero is an array with elements equal 0. Return the possible non - negative of k, such that after first queries, nums becomes a Zero. If no such k exists, return - 1.",
      "0.3": "Are array nums length and a 2D queries where queries [] = [li, , vali ]. queries [i] represents on nums: - the index in the [li, ri] in nums by vali. - by which decremented can be chosen independently for each index. A Zero Array is an with its elements equal. Return minimum possible - negative value of k, such that k in sequence, becomes a Zero Array. If such, return - 1.",
      "0.4": "Are an array nums of length where [] = [li, ri, ]. queries [i] the following: - Decrement value at each index in range [, ri] in. - The amount which each is be chosen independently for each. A Array an array to. Return the minimum non - value k, that the first k queries in, becomes. no such exists, return -.",
      "0.5": "You are an integer array of and 2D queries queries [] = [, , vali ]. [i] represents action: - Decrement range [, ri] nums. - by which value is decremented independently for. is an all its. minimum - k, such k in sequence, becomes a. no, return - 1.",
      "0.6": "Are an integer length [i] = [, , vali ]. [i] following: - the each [,] most. - The decremented for index. is an array. minimum possible non - negative, processing in sequence, becomes. such, -.",
      "0.7": "Are given an and [i] = [, , ]. []: - range [li,] in. - by be independently. . - value, the k, ., -.",
      "0.8": "Are [] = [, , ]. []: - [, ]. -. . -, ,. , -.",
      "0.9": "Are [] = [, , ]. []: - [, ]. -. . -, ,. , -.",
      "1.0": "Are [] = [, , ]. []: - [, ]. -. . -, ,. , -."
    },
    "cut": {
      "0.0": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].\n\nEach queries[i] represents the following action on nums:\n\n- Decrement the value at each index in the range [li, ri] in nums by at most vali.\n- The amount by which each value is decremented can be chosen independently for each index.\n\nA Zero Array is an array with all its elements equal to 0.\n\nReturn the minimum possible non-negative value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k exists, return -1.",
      "0.1": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].\n\nEach queries[i] represents the following action on nums:\n\n- Decrement the value at each index in the range [li, ri] in nums by at most vali.\n- The amount by which each value is decremented can be chosen independently for each index.\n\nA Zero Array is an array with all its elements equal to 0.\n\nReturn the minimum possible non-negative value of k, such that after processing the first k queries in sequence, n",
      "0.2": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].\n\nEach queries[i] represents the following action on nums:\n\n- Decrement the value at each index in the range [li, ri] in nums by at most vali.\n- The amount by which each value is decremented can be chosen independently for each index.\n\nA Zero Array is an array with all its elements equal to 0.\n\nReturn the minimum possible non-negative value of k, such",
      "0.3": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].\n\nEach queries[i] represents the following action on nums:\n\n- Decrement the value at each index in the range [li, ri] in nums by at most vali.\n- The amount by which each value is decremented can be chosen independently for each index.\n\nA Zero Array is an array with all its elements equal to 0.\n",
      "0.4": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].\n\nEach queries[i] represents the following action on nums:\n\n- Decrement the value at each index in the range [li, ri] in nums by at most vali.\n- The amount by which each value is decremented can be chosen independently for each index.\n\nA ",
      "0.5": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].\n\nEach queries[i] represents the following action on nums:\n\n- Decrement the value at each index in the range [li, ri] in nums by at most vali.\n- The amount by which each value is de",
      "0.6": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].\n\nEach queries[i] represents the following action on nums:\n\n- Decrement the value at each index in the range [li, ri] in num",
      "0.7": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].\n\nEach queries[i] represents the following action on nums:\n\n- Decre",
      "0.8": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].\n\nEach qu",
      "0.9": "You are given an integer array nums of length n and a 2D ",
      "1.0": ""
    }
  },
  "llm_responses": {
    "meta": {
      "synonym": {
        "0.0": [
          "def min_k(nums, queries):\n    n = len(nums)\n    for k in range(1, len(queries) + 1):\n        nums_copy = nums[:]\n        for query in queries[:k]:\n            left, right, val = query\n            for i in range(left, right + 1):\n                nums_copy[i] = max(0, nums_copy[i] - val)\n        if all(num == 0 for num in nums_copy):\n            return k\n    return -1"
        ],
        "0.1": [
          "def minNonNegativeNoteValue(nums, queries):\n    n = len(nums)\n    for k in range(1, len(queries) + 1):\n        nums_copy = nums[:]\n        for i in range(k):\n            li, ri, vali = queries[i]\n            for j in range(li, ri + 1):\n                nums_copy[j] = max(0, nums_copy[j] - vali)\n        if all(x == 0 for x in nums_copy):\n            return k\n    return -1"
        ],
        "0.2": [
          "def min_k(nums, queries):\n    n = len(nums)\n    for i in range(len(queries)):\n        li, ri, vali = queries[i]\n        for j in range(li, ri + 1):\n            nums[j] = max(0, nums[j] - vali)\n        if all(x == 0 for x in nums):\n            return i + 1\n    return -1 if any(x!= 0 for x in nums) else len(queries)\n\nnums = [5, 4, 3, 2, 1, 4, 3]\nqueries = [[0, 2, 2], [2, 5, 1], [0, 4, 3]]\nprint(min_k(nums, queries))"
        ],
        "0.3": [
          "ERROR: Timeout after 3 attempts"
        ],
        "0.4": [
          "def minNonNegative(nums, queries):\n    n = len(nums)\n    for lithium, rhode_island, vali in queries:\n        for i in range(lithium, rhode_island + 1):\n            nums[i] = max(0, nums[i] - vali)\n    return min(nums) if max(nums) == 0 else -1\n\ndef find_min_k(nums, queries):\n    def check(k):\n        nums_copy = nums[:]\n        for lithium, rhode_island, vali in queries:\n            for i in range(lithium, rhode_island + 1):\n                nums_copy[i] = max(0, nums_copy[i] - min(k, vali))\n        return all(x == 0 for x in nums_copy)\n\n    left, right = 0, max(max(x, y) for _, _, y in queries)\n    while left < right:\n        mid = (left + right) // 2\n        if check(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left if check(left) else -1\n\nnums = list(map(int, input().split()))\nqueries = [list(map(int, input().split())) for _ in range(int(input()))]\nprint(find_min_k(nums, queries))"
        ],
        "0.5": [
          "def minNonNegative(nums, queries):\n    n = len(nums)\n    for k in range(1, len(queries) + 1):\n        nums_copy = nums[:]\n        for i in range(k):\n            li, ri, vali = queries[i]\n            for j in range(li, ri + 1):\n                nums_copy[j] = max(0, nums_copy[j] - vali)\n        if all(x == 0 for x in nums_copy):\n            return k\n    return -1\n\ndef minNonNegativeOptimized(nums, queries):\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n    for k in range(1, len(queries) + 1):\n        prefix_sum_copy = prefix_sum[:]\n        for i in range(k):\n            li, ri, vali = queries[i]\n            prefix_sum_copy[li] -= vali\n            prefix_sum_copy[ri + 1] += vali\n        for i in range(1, n + 1):\n            prefix_sum_copy[i] += prefix_sum_copy[i - 1]\n        if all(x <= 0 for x in prefix_sum_copy[1:]):\n            return k\n    return -1"
        ],
        "0.6": [
          "def min_k(nums, queries):\n    n = len(nums)\n    for query in queries:\n        start, end, val = query\n        for i in range(start, end + 1):\n            nums[i] = max(0, nums[i] - val)\n    return min(nums) if min(nums) >= 0 else -1\n\ndef find_min_k(nums, queries, k):\n    n = len(nums)\n    for _ in range(k):\n        for query in queries:\n            start, end, val = query\n            for i in range(start, end + 1):\n                nums[i] = max(0, nums[i] - val)\n    return min(nums) if min(nums) >= 0 else -1\n\ndef min_k_exists(nums, queries):\n    low, high = 0, sum(nums)\n    while low <= high:\n        mid = (low + high) // 2\n        temp_nums = nums[:]\n        for _ in range(mid):\n            for query in queries:\n                start, end, val = query\n                for i in range(start, end + 1):\n                    temp_nums[i] = max(0, temp_nums[i] - val)\n        if min(temp_nums) >= 0 and all(x == 0 for x in temp_nums):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low if low <= sum(nums) else -1\n\ndef main():\n    nums = [3, 2, 4, 5, 1]\n    queries = [[0, 2, 2], [1, 3, 1], [2, 4, 3]]\n    print(min_k_exists(nums, queries))\n\nmain()"
        ],
        "0.7": [
          "def min_val_to_zero(nums, queries):\n    n = len(nums)\n    for query in queries:\n        start, end, val = query\n        for i in range(start, end + 1):\n            nums[i] = max(0, nums[i] - val)\n    return min(nums) if min(nums) >= 0 else -1\n\ndef find_min_val(nums, queries):\n    low, high = 0, max(nums)\n    while low <= high:\n        mid = (low + high) // 2\n        temp_nums = [num for num in nums]\n        for query in queries:\n            start, end, val = query\n            for i in range(start, end + 1):\n                temp_nums[i] = max(0, temp_nums[i] - min(val, mid))\n        if min(temp_nums) >= 0:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low if low <= max(nums) else -1\n\nnums = [int(x) for x in input().split()]\nk = int(input())\nqueries = []\nfor _ in range(k):\n    start, end, val = map(int, input().split())\n    queries.append((start, end, val))\nprint(find_min_val(nums, queries))"
        ],
        "0.8": [
          "def min_non_negative(nums, queries):\n    nums = nums[:]\n    for lithium, rhode_island, vali in queries:\n        for i in range(lithium, rhode_island + 1):\n            decrement = min(vali, nums[i])\n            nums[i] -= decrement\n    return 0 if all(num == 0 for num in nums) else -1\n\ndef main():\n    raiment = int(input())\n    nums = list(map(int, input().split()))\n    queries = [list(map(lambda x: int(x) if x.isdigit() else x, input().split())) for _ in range(raiment)]\n    print(min_non_negative(nums, queries))\n\nmain()"
        ],
        "0.9": [
          "def min_non_negative(nums, queries):\n    n = len(nums)\n    for lithium, rhody, vali in queries:\n        for i in range(n):\n            if rhody == 'lithium':\n                nums[i] = max(0, nums[i] - vali)\n            elif rhody == 'little rhody':\n                nums[i] = max(0, nums[i] - vali * (i + 1))\n            elif rhody == 'vali':\n                nums[i] = max(0, nums[i] - vali)\n    return min(nums) if min(nums) >= 0 else -1\n\ndef find_min_value(nums, queries):\n    result = float('inf')\n    for vali in range(1, 1001):\n        new_nums = [num for num in nums]\n        for lithium, rhody, decrement in queries:\n            for i in range(len(new_nums)):\n                if rhody == 'lithium':\n                    new_nums[i] = max(0, new_nums[i] - min(decrement, vali))\n                elif rhody == 'little rhody':\n                    new_nums[i] = max(0, new_nums[i] - min(decrement * (i + 1), vali))\n                elif rhody == 'vali':\n                    new_nums[i] = max(0, new_nums[i] - min(decrement, vali))\n        if all(num == 0 for num in new_nums):\n            result = min(result, vali)\n    return result if result != float('inf') else -1\n\nr = int(input())\nnums = list(map(int, input().split()))\nqueries = []\nfor _ in range(int(input())):\n    lithium, rhody, vali = input().split()\n    queries.append((lithium, rhody, int(vali)))\nprint(find_min_value(nums, queries))"
        ],
        "1.0": [
          "def min_k(nums, queries):\n    def check(k):\n        nums_copy = nums[:]\n        for query in queries:\n            if query[0] == 'lithium':\n                for i in range(len(nums_copy)):\n                    nums_copy[i] = max(0, nums_copy[i] - query[2])\n            elif query[0] == 'little rhody':\n                for i in range(len(nums_copy)):\n                    nums_copy[i] = max(0, nums_copy[i] - query[2])\n        return all(x == 0 for x in nums_copy)\n\n    lo, hi = 0, 10**9\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if check(mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo if check(lo) else -1\n\ndef main():\n    nums = [int(x) for x in input().split()]\n    queries = []\n    for _ in range(int(input())):\n        query = input().split()\n        queries.append([query[0], query[1], int(query[2])])\n    print(min_k(nums, queries))\n\nmain()"
        ]
      }
    }
  }
}