{
  "slug": "sum-of-k-subarrays-with-length-at-least-m",
  "problem_title": "Sum of K Subarrays With Length at Least M",
  "number": 3473,
  "acceptance": 0.239,
  "difficulty": "Medium",
  "question": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.\n\n**Example 1:**\n\n```\nInput: nums = [1,2,-1,3,3,4], k = 2, m = 2\nOutput: 13\nExplanation:\nThe optimal choice is:\n- Subarray nums[3..5] with sum 3 + 3 + 4 = 10 (length is 3 >= m).\n- Subarray nums[0..1] with sum 1 + 2 = 3 (length is 2 >= m).\nThe total sum is 10 + 3 = 13.\n```\n\n**Example 2:**\n\n```\nInput: nums = [-10,3,-1,-2], k = 4, m = 1\nOutput: -10\nExplanation:\nThe optimal choice is choosing each element as a subarray. The output is (-10) + 3 + (-1) + (-2) = -10.\n```\n\n**Constraints:**\n\n- 1 <= nums.length <= 2000\n- -10^4 <= nums[i] <= 10^4\n- 1 <= k <= floor(nums.length / m)\n- 1 <= m <= 3",
  "post_href": "https://leetcode.com/problems/sum-of-k-subarrays-with-length-at-least-m/discuss/3473/Medium-Python-Solution",
  "python_solutions": "class Solution:\n    def maxSum(self, nums: List[int], k: int, m: int) -> int:\n        from itertools import accumulate\n        from functools import lru_cache\n        n = len(nums)\n        prefix = [0] + list(accumulate(nums))\n        @lru_cache(None)\n        def dp(i, k):\n            if k == 0:\n                return 0\n            if i + m > n:\n                return float('-inf')\n            return max(dp(j, k - 1) + prefix[j] - prefix[i] for j in range(i + m, n + 1))\n        return dp(0, k)",
  "post_title": "Medium Python Solution",
  "user": "leetcode_user",
  "upvotes": 50,
  "views": 2000,
  "augmented_questions": {
    "keyboard": {
      "0.0": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.1": "You are given an integer array n8ms and two integers, k and m. Return the mAximum sum of k non - overlapping subarrays of nu<s, where each subarray has a length of at leasG m.",
      "0.2": "You are givDn an inR#ger array nuJs and two integers, k and m. 54turn the maximum sum of k non - overlapping subarrays of nums, ahere eAch suba4rzy has a length of at leaEt m.",
      "0.3": "You are giDej an iB5ege4 array nuHQ and two iJtevdrs, k and m. ReRufn the mssinum sum of k non - ove5iaLp9ng Zubagrzys of nums, wNRre eadM sugardAy has a length of at :easY m.",
      "0.4": "You are glveb an UntFg2r arrW5 n&<s and two lnGeNefs, k and m. R2HurM the mWxLmuN sum of k non - iB$rlWppinh s6bQrrwyZ of n6Ks, wTerr eAfh WufwrrAy has a lebg5T of at leaWH m.",
      "0.5": "You are gic#h an Lg$eher adrqg n&mW and two iJyeNe#s, k and m. RehuTJ the mWxJKuN sum of k non - LvWr:ALp*ng suFa4rSGc of nuHd, dge3e exvh sufsrrQ& has a leHyrh of at l#qCt m.",
      "0.6": "You are guBWn an imtSv#e xrrWU muJX and two oHteNeTD, k and m. Eet TeJ the HQZikuk sum of k non - oBrGlqop9nr AjhartZUs of h^js, sNerF esXU s tVSr4aJ has a k@nggg of at oeaAR m.",
      "0.7": "You are fuC2n an jb6Syer aD5S^ n7ND and two UmtrFegX, k and m. R$$6Fb the kad*k&m sum of k non - obfDlXpL8gB x&baGts^C of MKks, wys5S 4Ash XIhQd5ay has a <eGY^J of at <3aWG m.",
      "0.8": "You are noc$n an iB$3n@% SE4Sy H TnC and two jj^3Vf5s, k and m. gd5*rM the nZcJKuN sum of k non - *DeDizlLibb divwg5Z5s of HJKC, wJd32 rWfJ X TbWteQ& has a .RnN^y of at .eSEF m.",
      "0.9": "You are h(D4H an KgrWy4d AeTQ6 bkJX and two JMg2V3eQ, k and m. d4g T$h the KQZ7KjH sum of k non - 0dS4iSpOJmH CIfw#$w5c of J T,e, EJFEW sWVy e6GXg5zh has a >@jt%J of at iFwzr m.",
      "1.0": "You are YJCsj an oJYSrsE w3GwH B T,x and two khhsRw$A, k and m. g3gjDB the HXzKn6H sum of k non - (Gr#KxO9OMF CkgqE%QtW of BIkZ, 1MseS #Zsm X*Hz4$X% has a <FHbHG of at KRQDF m."
    },
    "synonym": {
      "0.0": "You make up given an integer array nums and two integers, k and k. Repay the maximal sum of thou not - overlapping subarrays of nums, where each subarray has a length of at least meter.",
      "0.1": "You be given an whole number array nums and two integers, k and m. Return the maximum sum of k non - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.2": "You are given an whole number array nums and two integer, kb and molarity. Return the maximum substance of k not - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.3": "You constitute given an integer array nums and deuce integer, k and m. Return the maximal kernel of k non - overlap subarrays of nums, where each subarray own a length of at least m.",
      "0.4": "You are leave an integer regalia nums and two integer, k and metre. Return the maximal aggregate of kibibyte non - overlap subarrays of nums, where each subarray own a length of at least metre.",
      "0.5": "You represent given an whole number array nums and ii integers, kibibyte and molarity. Regress the maximal sum of thousand not - overlap subarrays of nums, where each subarray experience a duration of at least m.",
      "0.6": "You be impart an whole number array nums and two whole number, thou and g. Revert the maximal inwardness of g not - overlap subarrays of nums, where each subarray have a duration of at least mb.",
      "0.7": "You equal give an whole number raiment nums and two whole number, thousand and molar concentration. Hark back the maximal amount of kilobyte not - overlapping subarrays of nums, where each subarray get a distance of at least grand.",
      "0.8": "You equal impart an whole number raiment nums and ii integer, kelvin and mb. Bring back the maximal heart of special k not - overlap subarrays of nums, where each subarray take a distance of at least molar concentration.",
      "0.9": "You exist pay an whole number raiment nums and ii whole number, g and yard. Reelect the maximal sum of money of jet not - overlap subarrays of nums, where each subarray accept a distance of at least megabyte.",
      "1.0": "You make up consecrate an whole number regalia nums and deuce whole number, special k and mib. Render the maximal core of kb not - overlap subarrays of nums, where each subarray take a duration of at least meter."
    },
    "random": {
      "0.0": "You are given an array nums two, k. the maximum sum of k non - overlapping subarrays nums, where has length of m.",
      "0.1": "You are given an integer array nums and integers, k and m. Return the maximum sum of non - overlapping subarrays of nums, where each subarray has a of least m.",
      "0.2": "Are given an integer nums and two integers, k m. Return maximum sum k - overlapping subarrays of, where each subarray has a length of at least.",
      "0.3": "You given an array nums and two integers, m. Return maximum sum of k non - overlapping subarrays of, where each length at.",
      "0.4": "You are nums two integers, k m. the maximum sum - overlapping subarrays of nums, each has least m.",
      "0.5": "Are and two integers, k and. Return the k - nums, a length least m.",
      "0.6": "Are integer array and two, k. k - subarrays, has of at.",
      "0.7": "Are an, . the maximum - subarrays, a.",
      "0.8": "Are, . -, subarray.",
      "0.9": "Are, . -,.",
      "1.0": "Are, . -,."
    },
    "cut": {
      "0.0": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.1": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a leng",
      "0.2": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each s",
      "0.3": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of n",
      "0.4": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlappi",
      "0.5": "You are given an integer array nums and two integers, k and m. Return the maximum sum ",
      "0.6": "You are given an integer array nums and two integers, k and m. Return",
      "0.7": "You are given an integer array nums and two integers",
      "0.8": "You are given an integer array nums",
      "0.9": "You are given an ",
      "1.0": ""
    }
  },
  "llm_responses": {
    "meta": {
      "synonym": {
        "0.0": [
          "def maxSumOfThreeSubarrays(nums, k):\n    n = len(nums)\n    prefix = [0]\n    for num in nums:\n        prefix.append(prefix[-1] + num)\n\n    def sum_subarray(i, j):\n        return prefix[j+1] - prefix[i]\n\n    first = [0] * n\n    for i in range(k-1, n):\n        first[i] = sum_subarray(i-k+1, i)\n\n    second = [0] * n\n    max_first = float('-inf')\n    max_first_idx = -1\n    for i in range(k-1, n):\n        if first[i] > max_first:\n            max_first = first[i]\n            max_first_idx = i\n        second[i] = max_first\n\n    third = [0] * n\n    max_second = float('-inf')\n    max_second_idx = -1\n    for i in range(2*k-1, n):\n        if second[i-k] > max_second:\n            max_second = second[i-k]\n            max_second_idx = i-k\n        third[i] = max_second\n\n    max_sum = float('-inf')\n    for i in range(2*k-1, n):\n        max_sum = max(max_sum, sum_subarray(i-k+1, i) + second[i-k] + third[i-k])\n\n    return max_sum"
        ],
        "0.1": [
          "def max_sum_of_subarrays(nums, k, m):\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n\n    def get_subarray_sum(i, j):\n        return prefix_sum[j + 1] - prefix_sum[i]\n\n    dp = [[float('-inf')] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                for l in range(m - 1, i):\n                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + get_subarray_sum(l, i - 1))\n\n    return dp[n][k]"
        ],
        "0.2": [
          "def max_substance(nums, kb, molarity):\n    n = len(nums)\n    max_substance = 0\n    for i in range(n):\n        for j in range(i + molarity, n + 1):\n            subarray = nums[i:j]\n            substance = sum(subarray)\n            if len(subarray) >= molarity:\n                max_substance = max(max_substance, substance)\n    non_overlapping_subarrays = []\n    i = 0\n    while i < n and len(non_overlapping_subarrays) < kb:\n        max_substance_at_i = 0\n        max_subarray_at_i = None\n        for j in range(i + molarity, n + 1):\n            subarray = nums[i:j]\n            substance = sum(subarray)\n            if substance > max_substance_at_i:\n                max_substance_at_i = substance\n                max_subarray_at_i = subarray\n        if max_subarray_at_i is not None:\n            non_overlapping_subarrays.append(max_subarray_at_i)\n            i += len(max_subarray_at_i)\n        else:\n            break\n    return sum(sum(subarray) for subarray in non_overlapping_subarrays)"
        ],
        "0.3": [
          "def max_kernel(nums, k, m):\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n\n    def get_sum(l, r):\n        return prefix_sum[r + 1] - prefix_sum[l]\n\n    def check(kernel):\n        count = 0\n        i = 0\n        while i < n:\n            found = False\n            for j in range(m - 1, n - i):\n                if get_sum(i, i + j) >= kernel * (j + 1):\n                    i += j + 1\n                    count += 1\n                    found = True\n                    break\n            if not found:\n                break\n        return count >= k\n\n    left, right = min(nums), sum(nums)\n    while left < right:\n        mid = (left + right + 1) // 2\n        if check(mid):\n            left = mid\n        else:\n            right = mid - 1\n    return left"
        ],
        "0.4": [
          "def maximal_aggregate(nums, k, metre):\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n\n    def get_subarray_sum(left, right):\n        return prefix_sum[right + 1] - prefix_sum[left]\n\n    max_aggregate = float('-inf')\n    for i in range(n):\n        aggregate = 0\n        count = 0\n        for j in range(i, n):\n            if j - i + 1 >= metre:\n                aggregate += get_subarray_sum(i, j)\n                count += 1\n                if count == k:\n                    max_aggregate = max(max_aggregate, aggregate)\n                    break\n    return max_aggregate\n\ndef maximal_aggregate_optimized(nums, k, metre):\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n\n    def get_subarray_sum(left, right):\n        return prefix_sum[right + 1] - prefix_sum[left]\n\n    max_aggregate = float('-inf')\n    for window_size in range(metre, n + 1):\n        window_sum = get_subarray_sum(0, window_size - 1)\n        for i in range(n - window_size + 1):\n            aggregate = 0\n            count = 0\n            j = i\n            while j <= n - window_size:\n                aggregate += get_subarray_sum(j, j + window_size - 1)\n                count += 1\n                j += window_size\n                if count == k:\n                    max_aggregate = max(max_aggregate, aggregate)\n                    break\n    return max_aggregate\n\nprint(maximal_aggregate([1, 2, 3, 4, 5], 2, 2))\nprint(maximal_aggregate_optimized([1, 2, 3, 4, 5], 2, 2))"
        ],
        "0.5": [
          "def max_sum_subarrays(nums, k, m):\n    n = len(nums)\n    max_sum = float('-inf')\n    for i in range(n - m + 1):\n        window_sum = sum(nums[i:i+m])\n        for j in range(i + m, n, m):\n            window_sum += sum(nums[j:j+m])\n            if (j - i) // m + 1 > k:\n                window_sum -= sum(nums[i:i+m])\n                i += m\n            if (j - i) // m + 1 <= k:\n                max_sum = max(max_sum, window_sum)\n    return max_sum\n\ndef max_sum_subarrays_optimized(nums, k, m):\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n    max_sum = float('-inf')\n    for window_size in range(m, n + 1):\n        for i in range(n - window_size + 1):\n            window_sum = prefix_sum[i + window_size] - prefix_sum[i]\n            if (window_size // m) <= k:\n                max_sum = max(max_sum, window_sum)\n    return max_sum\n\ndef max_sum_subarrays_dp(nums, k, m):\n    n = len(nums)\n    dp = [[float('-inf')] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j > 0:\n                for window_size in range(m, i + 1):\n                    if i - window_size >= 0:\n                        dp[i][j] = max(dp[i][j], dp[i - window_size][j - 1] + sum(nums[i - window_size:i]))\n    return max(dp[n])"
        ],
        "0.6": [
          "def max_non_overlapping_subarrays(nums, mb, g):\n    n = len(nums)\n    count = 0\n    i = 0\n    while i < n:\n        found = False\n        for j in range(i + mb, n + 1):\n            if sum(nums[i:j]) >= g:\n                count += 1\n                i = j\n                found = True\n                break\n        if not found:\n            i += 1\n    return count"
        ],
        "0.7": [
          "def max_subarrays(nums, thousand, molar_concentration):\n    if not nums or thousand < 0 or molar_concentration < 0:\n        return 0\n    max_length = 0\n    for i in range(len(nums)):\n        for j in range(i + thousand, len(nums) + 1):\n            max_length += 1\n    return max_length\n\ndef max_subarrays_optimized(nums, thousand, molar_concentration):\n    if not nums or thousand < 0 or molar_concentration < 0:\n        return 0\n    n = len(nums)\n    max_length = 0\n    for length in range(thousand, n + 1):\n        for i in range(n - length + 1):\n            max_length += 1\n    return max_length\n\nprint(max_subarrays([1, 2, 3, 4, 5], 2, 3))\nprint(max_subarrays_optimized([1, 2, 3, 4, 5], 2, 3))"
        ],
        "0.8": [
          "def max_heart(nums, kelvin, mb):\n    n = len(nums)\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i + mb, n + 1):\n            subarray = nums[i:j]\n            subarray_sum = sum(subarray)\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n                max_subarray = subarray\n    return max_sum\n\ndef find_max_heart(nums, kelvin, mb):\n    max_heart_value = float('-inf')\n    for i in range(len(nums) - mb + 1):\n        subarray = nums[i:i + mb]\n        subarray_sum = sum(subarray)\n        if subarray_sum > max_heart_value:\n            max_heart_value = subarray_sum\n    return max_heart_value\n\ndef maxNonOverlapping(nums, kelvin, mb):\n    n = len(nums)\n    max_sum = float('-inf')\n    max_subarrays = []\n    for i in range(n):\n        for j in range(i + mb, n + 1):\n            subarray = nums[i:j]\n            subarray_sum = sum(subarray)\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n                max_subarrays = [subarray]\n            elif subarray_sum == max_sum:\n                max_subarrays.append(subarray)\n    non_overlapping_subarrays = []\n    for subarray in max_subarrays:\n        is_non_overlapping = True\n        for non_overlapping_subarray in non_overlapping_subarrays:\n            if set(subarray) & set(non_overlapping_subarray):\n                is_non_overlapping = False\n                break\n        if is_non_overlapping:\n            non_overlapping_subarrays.append(subarray)\n    return len(non_overlapping_subarrays)\n\ndef maxNonOverlappingSubarrays(nums, kelvin, mb):\n    n = len(nums)\n    max_sum = float('-inf')\n    max_subarrays = []\n    for length in range(mb, n + 1):\n        for i in range(n - length + 1):\n            subarray = nums[i:i + length]\n            subarray_sum = sum(subarray)\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n                max_subarrays = [subarray]\n            elif subarray_sum == max_sum:\n                max_subarrays.append(subarray)\n    non_overlapping_subarrays = []\n    for subarray in max_subarrays:\n        is_non_overlapping = True\n        for non_overlapping_subarray in non_overlapping_subarrays:\n            if set(range(subarray[0], subarray[-1] + 1)) & set(range(non_overlapping_subarray[0], non_overlapping_subarray[-1] + 1)):\n                is_non_overlapping = False\n                break\n        if is_non_overlapping:\n            non_overlapping_subarrays.append(subarray)\n    return len(non_overlapping_subarrays)\n\nprint(maxNonOverlappingSubarrays([1, 2, 3, 4, 5], 2, 2))"
        ],
        "0.9": [
          "def maxSumOfNonOverlappingSubarrays(nums, g, yard):\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n\n    def get_sum(l, r):\n        return prefix_sum[r + 1] - prefix_sum[l]\n\n    max_sum = float('-inf')\n    for i in range(n - yard + 1):\n        for j in range(i + yard, n - yard + 1):\n            max_sum = max(max_sum, get_sum(i, i + yard - 1) + get_sum(j, j + yard - 1))\n\n    return max_sum\n\ndef main():\n    nums = [1, 3, -1, -3, 5, 3, 6, 7]\n    g = 3\n    yard = 2\n    print(maxSumOfNonOverlappingSubarrays(nums, g, yard))\n\nmain()"
        ],
        "1.0": [
          "def max_subarrays(nums, k, m):\n    n = len(nums)\n    max_count = 0\n    for i in range(n):\n        count = 0\n        j = i\n        while j < n:\n            if sum(nums[j:j+m]) % k == 0:\n                count += 1\n                j += m\n            else:\n                break\n        max_count = max(max_count, count)\n    return max_count\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    k = 3\n    m = 2\n    print(max_subarrays(nums, k, m))\n\nmain()"
        ]
      }
    }
  }
}