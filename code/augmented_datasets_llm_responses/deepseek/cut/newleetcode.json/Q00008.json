{
  "slug": "analyze-organization-hierarchy",
  "problem_title": "Analyze Organization Hierarchy",
  "number": 3482,
  "acceptance": 0.759,
  "difficulty": "Hard",
  "question": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For each employee, count the total number of subordinates under them, including indirect subordinates.\n\n3. **Manager Chain**: For each employee, list their chain of managers up to the CEO.\n\n**Example:**\n\nGiven the following employee table:\n\n| employee_id | employee_name | manager_id |\n|-------------|---------------|------------|\n| 1           | Alice         | NULL       |\n| 2           | Bob           | 1          |\n| 3           | Charlie       | 1          |\n| 4           | David         | 2          |\n| 5           | Eve           | 2          |\n| 6           | Frank         | 3          |\n\nYour solution should output:\n\n1. **Hierarchy Levels**:\n\n| employee_id | employee_name | level |\n|-------------|---------------|-------|\n| 1           | Alice         | 1     |\n| 2           | Bob           | 2     |\n| 3           | Charlie       | 2     |\n| 4           | David         | 3     |\n| 5           | Eve           | 3     |\n| 6           | Frank         | 3     |\n\n2. **Subordinate Count**:\n\n| employee_id | employee_name | subordinate_count |\n|-------------|---------------|-------------------|\n| 1           | Alice         | 5                 |\n| 2           | Bob           | 2                 |\n| 3           | Charlie       | 1                 |\n| 4           | David         | 0                 |\n| 5           | Eve           | 0                 |\n| 6           | Frank         | 0                 |\n\n3. **Manager Chain**:\n\n| employee_id | employee_name | manager_chain     |\n|-------------|---------------|-------------------|\n| 1           | Alice         | NULL              |\n| 2           | Bob           | Alice             |\n| 3           | Charlie       | Alice             |\n| 4           | David         | Bob > Alice       |\n| 5           | Eve           | Bob > Alice       |\n| 6           | Frank         | Charlie > Alice   |\n\n**Constraints:**\n\n- The number of employees will not exceed 10^4.\n- Each employee will have a unique `employee_id`.\n- The `manager_id` for the CEO is `NULL`.",
  "post_href": "https://leetcode.com/problems/analyze-organization-hierarchy/discuss/3482/Hard-Python-Solution",
  "python_solutions": "class Solution:\n    def analyzeHierarchy(self, employees: List[List[int]]) -> Tuple[List[List[int]], List[List[int]], List[List[int]]]:\n        from collections import defaultdict, deque\n        # Build the tree and initialize data structures\n        tree = defaultdict(list)\n        employee_info = {}\n        for emp_id, emp_name, mgr_id in employees:\n            employee_info[emp_id] = {'name': emp_name, 'manager': mgr_id, 'level': 0, 'subordinates': 0, 'manager_chain': []}\n            if mgr_id is not None:\n                tree[mgr_id].append(emp_id)\n        # Find the CEO (root of the tree)\n        ceo = next(emp_id for emp_id, info in employee_info.items() if info['manager'] is None)\n        # BFS to determine levels and manager chains\n        queue = deque([(ceo, 1, [])])\n        while queue:\n            emp_id, level, chain = queue.popleft()\n            employee_info[emp_id]['level'] = level\n            employee_info[emp_id]['manager_chain'] = chain\n            for sub_id in tree[emp_id]:\n                queue.append((sub_id, level + 1, chain + [employee_info[emp_id]['name']]))\n        # DFS to count subordinates\n        def count_subordinates(emp_id):\n            count = 0\n            for sub_id in tree[emp_id]:\n                count += 1 + count_subordinates(sub_id)\n            employee_info[emp_id]['subordinates'] = count\n            return count\n        count_subordinates(ceo)\n        # Prepare results\n        hierarchy_levels = []\n        subordinate_counts = []\n        manager_chains = []\n        for emp_id, info in employee_info.items():\n            hierarchy_levels.append([emp_id, info['name'], info['level']])\n            subordinate_counts.append([emp_id, info['name'], info['subordinates']])\n            manager_chains.append([emp_id, info['name'], ' > '.join(reversed(info['manager_chain'])) or 'NULL'])\n        return hierarchy_levels, subordinate_counts, manager_chains",
  "post_title": "Hard Python Solution",
  "user": "leetcode_user",
  "upvotes": 40,
  "views": 1800,
  "augmented_questions": {
    "keyboard": {
      "0.0": "Write a solution to analyze the organizational hierarchy and answer the following: 1. * * Hierarchy Levels * *: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on. 2. * * Subordinate Count * *: For each employee, count the total number of subordinates under them, including indirect subordinates. 3. * * Manager Chain * *: For each employee, list their chain of managers up to the CEO.",
      "0.1": "Wrihe a solution to Snalyze the organizational hierarchy and answer the following: 1. * * Hierarchy Levels * *: For each emp.oyee, determine their lwvel in the otgsnization. The CEO is at level 1, direct feports to the CEO are at level 2, and so on. 2. * * Subordinate Count * *: For each employee, count the total number of subordinates under them, includinN indirect subordinates. 3. * * Manager dhain * *: For exch employee, lost their chain of manavers up to the CEO.",
      "0.2": "WritR a soluYi8n to anaOTze the organizational hierarchy and xnZwer the follp1ing: 1. * * H7erarcyy Levels * *: For each 3mplpyee, determjnw fheir level in the o4ganjXation. The CEO is at legel 1, direct reports to the CEO are at level 2, and so on. 2. * * Subordinate Count * *: For eQch smploySe, count the total nImNer of subordinates unfer tnem, iHcluSing indirect subordinates. 3. * * Manager Chain * *: For eSch employee, lis% their chWin of mwnQgers up to the CEO.",
      "0.3": "qr8te a coourion to abalUzf the oTgamixQtionxl hisEarchh and abswe# the f*l:owinv: 1. * * HierQ%vhy Lebela * *: For escy emolkye#, determine Hh4ir lsvwl in the oegaMisati(n. The CEO is at <svel 1, direct reports to the CEO are at lebeI 2, and so on. 2. * * S6borEOnWte CoumF * *: For eZSh employee, ckun% the total number of suV*rdina$eQ under thRN, including iBdirev^ subiFd8nstes. 3. * * MAnzRer fTain * *: For each eNploydD, ,kst tBsir chziJ of mQnqgets up to the CEO.",
      "0.4": "Wt&te a qplut9oH to aHSlySe the krgZgizztipHal hie5arvut and qhswe# the folIo!OHg: 1. * * H7era3Vgy LFv#lC * *: For 3Wch 3mpo(yeF, detDE,inD thWig Pevwl in the 8egajiAatioB. The CEO is at lrvFl 1, d9r4St T2poGts to the CEO are at lefe/ 2, and so on. 2. * * Aun8rdLnatW vounr * *: For eaxu emO;pyeD, dohnt the to^a? numNwG of suNordihWyss 6nded $Jem, lnSl&diny inXirrd% xKbprwina^es. 3. * * Manxgfg Cta(n * *: For eZDh ejpliyss, kUst thS7r XhaOn of mWHaVerE up to the CEO.",
      "0.5": "Ddkte a s*:7t&on to aMakhzf the PrbanisatOLjXl NKerW#dhy and xJswef the f8Olp#jng: 1. * * nie5stcny LevSPE * *: For 4acb DHplIhee, deRerJ8Jr ^hri3 o2gel in the odrAnuzstUon. The CEO is at Ief3l 1, di5@Vt rwooGtZ to the CEO are at Oevsi 2, and so on. 2. * * SibI4diMWre CLuh6 * *: For dacy @mpl9y$S, fo6Mt the go4ak nHHbe# of subK%Xihxt@s HnSe$ tUFm, (nFluduHN iJR8r2ct ZubLTdunW$es. 3. * * nsjaFer StaUn * *: For @acj eNplo52r, l(zt tNw(r dmaih of mahxn3rs up to the CEO.",
      "0.6": "W3KRe a so.u^*Ig to abaOuX$ the *#NanizQh*(BSl jieDQrXMh and Xjsw$F the fllposLHv: 1. * * MJe#aedh5 irve.Z * *: For 3WcG Dm9/oGe2, fDre$<iGe thR8e >eGe; in the oeraGOSa^i9b. The CEO is at lrDeK 1, dlDrSt DwO0rGs to the CEO are at :eCe; 2, and so on. 2. * * e TboFdKHAt# xoKbt * *: For FaxT 4<pIKyeR, X*un$ the FoFxl gumf4g of wHGIrfiHARes Knd$F 6yDm, inFO TdlhT OndiE3V4 s8Horwkba%wZ. 3. * * hShaHrr CUsih * *: For eWXu 3<Lkpyee, pls4 rJe8r cTXiJ of msnSBeFq up to the CEO.",
      "0.7": "Dr7G# a ZklH5o)n to QJXlHz3 the odgZjiXShiPhx? uLf#aEcY6 and aHDEf$ the ckkKlslng: 1. * * gKwra4vjH ;Wv$>a * *: For RqcJ @jpl*uR@, sw4d$h8ne 4jr*r ?rv$< in the iEvwnKzS%iLB. The CEO is at I4vwI 1, RlgeDf #do9tts to the CEO are at >@bep 2, and so on. 2. * * ZuV84WUgahe di8mt * *: For fWsh sh(lohDR, SLinR the YP5a: g TmND4 of sjf85vjna%rd 7Bre3 tb3j, iBSP^E7Jg uhdJ$$st CjnPrdjnW6RD. 3. * * <xnZheD vYAjn * *: For exft WJpll6ww, kks5 FTF7r FjXiB of mzhah@Tc up to the CEO.",
      "0.8": "qdiYr a X9Pu%&PM to xbqlGA# the *enxG8aSY(onsO ui3TXddMJ and qGs223 the BI>PL!*hg: 1. * * mOFtaEFj^ OWvfPQ * *: For Rwvt DJl?ogf#, R45e#HlM4 tjfJF ,4vS, in the 9TRXmLzafk0j. The CEO is at KdGep 1, Wi4sX^ %e0KE5z to the CEO are at P4be> 2, and so on. 2. * * SufKEw(gX%d CKjmH * *: For $Qvj Fh(.k%ew, SIuMH the %9fzl nkJVf4 of Q tG0exibaHFX ibSWr 6jsh, KGDlivuhh unVUgwD% d&b8gekbZFeq. 3. * * JWhaTRE sJs(n * *: For SwDJ 3<op8hRe, /jX4 4hS&4 fTWiB of hSnqh@4q up to the CEO.",
      "0.9": "2e8$F a Qlo8f((m to QMQi7as the *rhZhJAXyoLgsi mU@DSfxjH and Abx!Wf the D*??kd&GH: 1. * * m8RfZedu^ /dGW<E * *: For #WDM $Kl;p&D#, w4FF4,8m$ hbdJF ,4C4, in the iensjUXQyoog. The CEO is at OFGwP 1, x8e4x$ T@(0T5E to the CEO are at oscd. 2, and so on. 2. * * Q7NPdv9jaHD F(JH5 * *: For DwVY wN0KITrd, sliBg the 69RA: m Tjvd% of CHNkevjba6Fw IHsDt %g4j, &Jv<7x&By LHR7%#sF d tnoDE9BwfFX. 3. * * Jwbzt3E fBS(m * *: For rsXY F,9;pT@2, ?KDY $gdj4 XGZ7j of KWGSYFgE up to the CEO.",
      "1.0": "e#Uy2 a d0?8$JpB to sHzk^xD the *eRQBlAZ5OIGq. uu3DWdDYj and XBxA25 the c8?KpdKJf: 1. * * UKf%X5Vn6 oFG4;z * *: For wAVj DnopIH2@, e3rftkOhD yB4&3 kRD4O in the IGRAj8Ax4O)G. The CEO is at /wFS, 1, sLerVr Ds(PE4D to the CEO are at ;#DFi 2, and so on. 2. * * Z8hKDS7JQ^f vl7j$ * *: For wzsJ 2K(k95d@, SL*mg the H9GAP B*JfSe of e6H*3CkgZ4$Z JmrFg ^t@N, ojf/8r8mN lbwudWDh A^HLfsuMx^#A. 3. * * JWHWn4E Xuw&H * *: For 4wxY wj0o*72r, :9XY $J484 Xbsug of <qmxfwFa up to the CEO."
    },
    "synonym": {
      "0.0": "Compose a solvent to analyze the organizational pecking order and answer the pursual: 1. * * Hierarchy Degree * *: For each employee, specify their level in the constitution. The chief executive officer is at grade 1, verbatim reports to the CEO live at stratum ii, and thence on. ii. * * Subordinate Count * *: For each employee, count the full number of subordinate nether them, including indirect underling. trio. * * Manager Chain * *: For each employee, number their chain of managers upwardly to the chief operating officer.",
      "0.1": "Write a solution to analyze the organizational hierarchy and answer the following: 1. * * Hierarchy Grade * *: For each employee, check their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on. ii. * * Subordinate Count * *: For each employee, depend the full number of underling nether them, including indirect subordinates. 3. * * Manager Strand * *: For each employee, list their range of managers up to the chief operating officer.",
      "0.2": "Write a solution to analyze the organizational hierarchy and answer the following: 1. * * Hierarchy Levels * *: For each employee, settle their level in the system. The CEO be at level 1, unmediated write up to the CEO are at spirit level 2, and so on. two. * * Subordinate Count * *: For each employee, count the total number of subordinate word nether them, include collateral subordinates. 3. * * Manager Ernst boris chain * *: For each employee, list their chain of coach up to the CEO.",
      "0.3": "Drop a line a solution to analyze the organisational hierarchy and resolve the following: 1. * * Hierarchy Levels * *: For each employee, determine their spirit level in the organization. The CEO is at spirit level i, direct reports to the chief executive officer make up at grade ii, and thusly on. ii. * * Hyponym Enumeration * *: For each employee, count the total number of subordinates nether them, include indirect underling. tierce. * * Director Chain * *: For each employee, list their chemical chain of managers upward to the chief operating officer.",
      "0.4": "Compose a resolution to examine the organisational hierarchy and reply the following: single. * * Power structure Point * *: For each employee, regulate their storey in the organization. The CEO is at storey ane, unmediated reports to the CEO cost at point ii, and thus on. 2. * * Subordinate word Count * *: For each employee, bet the full numeral of subordinate nether them, including indirect subordinate word. three. * * Handler Range of mountains * *: For each employee, list their chemical chain of managers upward to the chief executive officer.",
      "0.5": "Drop a line a result to psychoanalyse the organisational pecking order and resolve the pursual: single. * * Power structure Degree * *: For each employee, square off their floor in the organisation. The chief executive officer be at story unity, direct report to the chief executive officer be at degree 2, and indeed on. deuce. * * Subordinate Numeration * *: For each employee, count the full act of subordinate nether them, including collateral subordinates. iii. * * Managing director Mountain range * *: For each employee, lean their strand of managing director upward to the chief operating officer.",
      "0.6": "Compose a answer to analyse the organisational power structure and serve the pursuit: one. * * Pecking order Level * *: For each employee, fix their tier in the brass. The chief operating officer represent at stratum ane, verbatim story to the chief operating officer be at floor deuce, and then on. two. * * Underling Reckoning * *: For each employee, calculate the full figure of subordinate nether them, admit collateral foot soldier. tierce. * * Director Range * *: For each employee, lean their ernst boris chain of handler upward to the chief operating officer.",
      "0.7": "Publish a resolution to canvas the organisational pecking order and suffice the followers: ace. * * Pecking order Spirit level * *: For each employee, find out their stratum in the organisation. The chief executive officer embody at grade ane, lineal report to the chief operating officer personify at grade deuce, and thus on. deuce. * * Subordinate word Enumeration * *: For each employee, calculate the entire telephone number of subordinate nether them, let in collateral subordinate word. terzetto. * * Director String * *: For each employee, lean their concatenation of handler upward to the chief executive officer.",
      "0.8": "Drop a line a answer to analyse the organisational pecking order and resolve the chase: i. * * Pecking order Spirit level * *: For each employee, mold their point in the organisation. The chief operating officer be at storey one, lineal account to the chief executive officer be at layer two, and thus on. two. * * Subordinate word Tally * *: For each employee, numerate the entire routine of subordinate nether them, include collateral subordinate. iii. * * Coach Concatenation * *: For each employee, heel their string of director upwards to the chief executive officer.",
      "0.9": "Indite a result to study the organisational power structure and resolve the pursual: i. * * Pecking order Degree * *: For each employee, make up one's mind their floor in the formation. The chief operating officer be at stage one, verbatim news report to the chief operating officer constitute at stratum ii, and therefore on. ii. * * Foot soldier Reckoning * *: For each employee, calculate the full turn of subsidiary nether them, let in collateral foot soldier. three. * * Managing director Concatenation * *: For each employee, number their chain of mountains of coach upwardly to the chief executive officer.",
      "1.0": "Publish a answer to analyse the organisational power structure and reply the pursual: one. * * Power structure Layer * *: For each employee, set their floor in the brass. The chief executive officer be at grade ace, verbatim account to the chief executive officer be at degree deuce, and thus on. deuce. * * Subsidiary Numeration * *: For each employee, consider the full routine of subordinate nether them, admit collateral subordinate word. ternion. * * Director Concatenation * *: For each employee, number their mountain chain of manager upward to the chief operating officer."
    },
    "random": {
      "0.0": "Write to organizational hierarchy and following: . * * Hierarchy Levels * *: For employee, determine in the. is at level, direct reports the CEO are at, on. 2. * * Subordinate Count * *: For each employee, count the total under, including indirect subordinates. 3. * * * *: For each employee, their of managers.",
      "0.1": "A solution to analyze the organizational hierarchy and answer the following: . * * Hierarchy Levels * *: For each employee, determine their level the organization. The CEO is at level 1, direct reports to the at 2, and so on. 2. * * Subordinate Count * *: For each, count the total of under them, including indirect subordinates. . * * Manager Chain * *: For each employee, list their chain of managers to the CEO.",
      "0.2": "A solution to analyze the organizational the following: 1. * * Hierarchy * *: For employee, determine their in organization. The is at level 1, reports to the at 2, so. 2. * * Subordinate * *: For each employee, the total number of under, including indirect. 3. * * Manager Chain * *: For each employee, list their chain of managers up the CEO.",
      "0.3": "A solution to organizational and answer the: 1. * * Hierarchy * *: For each employee, level in the organization. at, direct the 2, and on. 2. * * Subordinate Count * *: For employee, count the total number of subordinates, including. 3. * * Manager Chain * *: For, their chain of to the.",
      "0.4": "Write a analyze hierarchy answer: . * * Levels * *: , determine their level in. at, reports to the CEO are at level 2, so. . * * * *: employee, total of under, including indirect. . * * Chain * *: , managers up to the CEO.",
      "0.5": "Write solution analyze hierarchy: . * * Levels * *: , determine organization. The at 1, the CEO, on. . * * Subordinate * *: employee, count under them, . 3. * * Manager * *: employee, CEO.",
      "0.6": "A the organizational following: . * * * *: each employee, ., reports to at, .. * * * *: , number, .. * * * *: For, their managers.",
      "0.7": "A: . * * * *: ,. ,, .. * * * *: ,, .. * * * *: For,.",
      "0.8": "A: . * * * *: ,. ,, .. * * * *: ,, .. * * * *: ,.",
      "0.9": "A: . * * * *: ,. ,, .. * * * *: ,, .. * * * *: ,.",
      "1.0": "A: . * * * *: ,. ,, .. * * * *: ,, .. * * * *: ,."
    },
    "cut": {
      "0.0": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For each employee, count the total number of subordinates under them, including indirect subordinates.\n\n3. **Manager Chain**: For each employee, list their chain of managers up to the CEO.",
      "0.1": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For each employee, count the total number of subordinates under them, including indirect subordinates.\n\n3. **Manager Chain**: For each employe",
      "0.2": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For each employee, count the total number of subordinates under them, including indirect subordi",
      "0.3": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For each employee, count the total number of subo",
      "0.4": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For",
      "0.5": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at leve",
      "0.6": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at ",
      "0.7": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine t",
      "0.8": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hie",
      "0.9": "Write a solution to analyze the organizational",
      "1.0": ""
    }
  },
  "llm_responses": {
    "deepseek": {
      "cut": {
        "0.0": [
          "from collections import defaultdict\n\ndef analyze_hierarchy(employees):\n    # Build a tree structure and a parent dictionary\n    tree = defaultdict(list)\n    parent = {}\n    ceo = None\n    \n    for emp in employees:\n        emp_id, name, manager_id = emp\n        if manager_id is None:\n            ceo = emp_id\n        else:\n            tree[manager_id].append(emp_id)\n            parent[emp_id] = manager_id\n    \n    # Calculate hierarchy levels\n    levels = {}\n    queue = [(ceo, 1)]\n    while queue:\n        emp_id, level = queue.pop(0)\n        levels[emp_id] = level\n        for subordinate in tree.get(emp_id, []):\n            queue.append((subordinate, level + 1))\n    \n    # Calculate subordinate counts (including indirect)\n    subordinate_counts = defaultdict(int)\n    \n    def count_subordinates(emp_id):\n        count = 0\n        for subordinate in tree.get(emp_id, []):\n            count += 1 + count_subordinates(subordinate)\n        return count\n    \n    for emp in employees:\n        emp_id = emp[0]\n        subordinate_counts[emp_id] = count_subordinates(emp_id)\n    \n    # Build manager chains\n    manager_chains = {}\n    for emp in employees:\n        emp_id = emp[0]\n        chain = []\n        current = emp_id\n        while current in parent:\n            current = parent[current]\n            chain.append(current)\n        manager_chains[emp_id] = chain\n    \n    # Prepare results\n    results = []\n    for emp in employees:\n        emp_id, name, _ = emp\n        results.append({\n            'employee_id': emp_id,\n            'name': name,\n            'level': levels[emp_id],\n            'subordinate_count': subordinate_counts[emp_id],\n            'manager_chain': manager_chains[emp_id]\n        })\n    \n    return results\n\n# Example usage:\nemployees = [\n    (1, \"Alice\", None),  # CEO\n    (2, \"Bob\", 1),       # Reports to Alice\n    (3, \"Charlie\", 1),   # Reports to Alice\n    (4, \"David\", 2),     # Reports to Bob\n    (5, \"Eve\", 2),       # Reports to Bob\n    (6, \"Frank\", 3),     # Reports to Charlie\n    (7, \"Grace\", 6)      # Reports to Frank\n]\n\nresults = analyze_hierarchy(employees)\nfor result in results:\n    print(result)"
        ],
        "0.1": [
          "from collections import defaultdict\n\ndef analyze_hierarchy(employees):\n    # Build a tree structure and a manager lookup\n    tree = defaultdict(list)\n    manager_map = {}\n    ceo = None\n    \n    for emp in employees:\n        if emp['manager_id'] is None:\n            ceo = emp['id']\n        else:\n            tree[emp['manager_id']].append(emp['id'])\n        manager_map[emp['id']] = emp['manager_id']\n    \n    # Calculate hierarchy levels\n    levels = {}\n    queue = [(ceo, 1)]\n    while queue:\n        emp_id, level = queue.pop(0)\n        levels[emp_id] = level\n        for subordinate in tree.get(emp_id, []):\n            queue.append((subordinate, level + 1))\n    \n    # Calculate subordinate counts (including indirect)\n    subordinate_counts = defaultdict(int)\n    \n    def count_subordinates(emp_id):\n        count = 0\n        for subordinate in tree.get(emp_id, []):\n            count += 1 + count_subordinates(subordinate)\n        return count\n    \n    for emp in employees:\n        subordinate_counts[emp['id']] = count_subordinates(emp['id'])\n    \n    # Calculate manager chain\n    manager_chains = {}\n    for emp in employees:\n        chain = []\n        current_id = emp['id']\n        while current_id in manager_map and manager_map[current_id] is not None:\n            current_id = manager_map[current_id]\n            chain.append(current_id)\n        manager_chains[emp['id']] = chain\n    \n    # Prepare results\n    results = []\n    for emp in employees:\n        results.append({\n            'id': emp['id'],\n            'name': emp['name'],\n            'level': levels[emp['id']],\n            'subordinate_count': subordinate_counts[emp['id']],\n            'manager_chain': manager_chains[emp['id']]\n        })\n    \n    return results\n\n# Example usage:\n# employees = [\n#     {'id': 1, 'name': 'CEO', 'manager_id': None},\n#     {'id': 2, 'name': 'Manager A', 'manager_id': 1},\n#     {'id': 3, 'name': 'Manager B', 'manager_id': 1},\n#     {'id': 4, 'name': 'Employee 1', 'manager_id': 2},\n#     {'id': 5, 'name': 'Employee 2', 'manager_id': 2},\n#     {'id': 6, 'name': 'Employee 3', 'manager_id': 3},\n# ]\n# print(analyze_hierarchy(employees))"
        ],
        "0.2": [
          "ERROR: Timeout after 3 attempts"
        ],
        "0.3": [
          "class Employee:\n    def __init__(self, id, name, manager_id):\n        self.id = id\n        self.name = name\n        self.manager_id = manager_id\n        self.level = None\n        self.subordinate_count = 0\n\ndef analyze_organization(employees):\n    employee_dict = {emp.id: emp for emp in employees}\n    \n    # Assign hierarchy levels\n    for emp in employees:\n        current_level = 1\n        current_emp = emp\n        # Trace back to the CEO\n        while current_emp.manager_id is not None and current_emp.manager_id in employee_dict:\n            current_level += 1\n            current_emp = employee_dict[current_emp.manager_id]\n        emp.level = current_level\n    \n    # Build manager-subordinate relationships\n    manager_subordinates = {}\n    for emp in employees:\n        if emp.manager_id is not None:\n            if emp.manager_id not in manager_subordinates:\n                manager_subordinates[emp.manager_id] = []\n            manager_subordinates[emp.manager_id].append(emp.id)\n    \n    # Calculate subordinate counts (post-order traversal)\n    def count_subordinates(emp_id):\n        emp = employee_dict[emp_id]\n        count = 0\n        if emp_id in manager_subordinates:\n            for sub_id in manager_subordinates[emp_id]:\n                count += 1 + count_subordinates(sub_id)\n        emp.subordinate_count = count\n        return count\n    \n    # Start counting from the CEO(s)\n    ceos = [emp.id for emp in employees if emp.manager_id is None]\n    for ceo_id in ceos:\n        count_subordinates(ceo_id)\n    \n    # Prepare output\n    result = []\n    for emp in employees:\n        result.append({\n            'id': emp.id,\n            'name': emp.name,\n            'level': emp.level,\n            'subordinate_count': emp.subordinate_count\n        })\n    \n    return result\n\n# Example usage:\n# employees = [\n#     Employee(1, \"Alice\", None),  # CEO\n#     Employee(2, \"Bob\", 1),\n#     Employee(3, \"Charlie\", 1),\n#     Employee(4, \"David\", 2),\n#     Employee(5, \"Eve\", 2),\n# ]\n# print(analyze_organization(employees))"
        ],
        "0.4": [
          "class Employee:\n    def __init__(self, id, name, manager_id):\n        self.id = id\n        self.name = name\n        self.manager_id = manager_id\n        self.level = None\n        self.subordinate_count = 0\n\ndef analyze_hierarchy(employees):\n    # Create a dictionary to map employee IDs to Employee objects\n    employee_dict = {emp.id: emp for emp in employees}\n    \n    # Assign levels to each employee\n    for emp in employees:\n        if emp.manager_id is None:\n            emp.level = 1  # CEO\n        else:\n            manager = employee_dict.get(emp.manager_id)\n            if manager:\n                emp.level = manager.level + 1\n    \n    # Calculate subordinate counts\n    for emp in employees:\n        if emp.manager_id is not None:\n            manager = employee_dict.get(emp.manager_id)\n            if manager:\n                manager.subordinate_count += 1\n    \n    # Prepare the output\n    result = []\n    for emp in employees:\n        result.append({\n            'id': emp.id,\n            'name': emp.name,\n            'level': emp.level,\n            'subordinate_count': emp.subordinate_count\n        })\n    \n    return result\n\n# Example usage:\nemployees = [\n    Employee(1, \"CEO\", None),\n    Employee(2, \"Manager A\", 1),\n    Employee(3, \"Manager B\", 1),\n    Employee(4, \"Employee A1\", 2),\n    Employee(5, \"Employee A2\", 2),\n    Employee(6, \"Employee B1\", 3),\n]\n\nhierarchy_data = analyze_hierarchy(employees)\nfor data in hierarchy_data:\n    print(data)"
        ],
        "0.5": [
          "import pandas as pd\n\ndef analyze_hierarchy(employees_df):\n    # Create a dictionary to map employee_id to their level\n    levels = {}\n    \n    # Find the CEO (the one with no manager)\n    ceo = employees_df[employees_df['manager_id'].isna()].iloc[0]\n    levels[ceo['employee_id']] = 1\n    \n    # We'll process employees level by level\n    current_level = 1\n    processed = set([ceo['employee_id']])\n    \n    while True:\n        # Find employees whose manager is in the current level and not processed yet\n        next_level_employees = employees_df[\n            employees_df['manager_id'].isin([eid for eid, lvl in levels.items() if lvl == current_level]) &\n            ~employees_df['employee_id'].isin(processed)\n        ]\n        \n        if next_level_employees.empty:\n            break\n        \n        # Assign level to these employees\n        for _, emp in next_level_employees.iterrows():\n            levels[emp['employee_id']] = current_level + 1\n            processed.add(emp['employee_id'])\n        \n        current_level += 1\n    \n    # Create the result DataFrame\n    result_df = employees_df.copy()\n    result_df['level'] = result_df['employee_id'].map(levels)\n    \n    return result_df\n\n# Example usage:\n# employees_df = pd.DataFrame({\n#     'employee_id': [1, 2, 3, 4, 5],\n#     'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n#     'manager_id': [None, 1, 1, 2, 2]\n# })\n# print(analyze_hierarchy(employees_df))"
        ],
        "0.6": [
          "class Employee:\n    def __init__(self, id, name, manager_id):\n        self.id = id\n        self.name = name\n        self.manager_id = manager_id\n        self.level = None\n        self.subordinates = []\n\ndef build_hierarchy(employees):\n    employee_dict = {emp.id: emp for emp in employees}\n    ceo = None\n    \n    for emp in employees:\n        if emp.manager_id is None:\n            ceo = emp\n        else:\n            manager = employee_dict.get(emp.manager_id)\n            if manager:\n                manager.subordinates.append(emp)\n    \n    return ceo\n\ndef calculate_levels(employee, level=0):\n    employee.level = level\n    for subordinate in employee.subordinates:\n        calculate_levels(subordinate, level + 1)\n\ndef analyze_hierarchy(employees):\n    ceo = build_hierarchy(employees)\n    if ceo:\n        calculate_levels(ceo)\n    \n    results = []\n    for emp in employees:\n        results.append({\n            'id': emp.id,\n            'name': emp.name,\n            'level': emp.level\n        })\n    \n    return results\n\n# Example usage:\n# employees = [\n#     Employee(1, \"CEO\", None),\n#     Employee(2, \"Manager\", 1),\n#     Employee(3, \"Employee\", 2)\n# ]\n# print(analyze_hierarchy(employees))"
        ],
        "0.7": [
          "class Employee:\n    def __init__(self, id, name, manager_id):\n        self.id = id\n        self.name = name\n        self.manager_id = manager_id\n        self.subordinates = []\n        self.level = 0\n\ndef build_hierarchy(employees):\n    employee_dict = {emp.id: emp for emp in employees}\n    root = None\n    \n    for emp in employees:\n        if emp.manager_id is None:\n            root = emp\n        else:\n            manager = employee_dict.get(emp.manager_id)\n            if manager:\n                manager.subordinates.append(emp)\n    \n    return root\n\ndef set_levels(root, level=0):\n    if root is None:\n        return\n    root.level = level\n    for subordinate in root.subordinates:\n        set_levels(subordinate, level + 1)\n\ndef print_hierarchy(root):\n    if root is None:\n        return\n    print(f\"{'  ' * root.level}{root.name} (Level {root.level})\")\n    for subordinate in root.subordinates:\n        print_hierarchy(subordinate)\n\n# Example usage:\nemployees = [\n    Employee(1, \"CEO\", None),\n    Employee(2, \"VP\", 1),\n    Employee(3, \"Director\", 2),\n    Employee(4, \"Manager\", 3),\n    Employee(5, \"Employee1\", 4),\n    Employee(6, \"Employee2\", 4),\n]\n\nroot = build_hierarchy(employees)\nset_levels(root)\nprint_hierarchy(root)"
        ],
        "0.8": [
          "class Employee:\n    def __init__(self, name, title, manager=None):\n        self.name = name\n        self.title = title\n        self.manager = manager\n        self.subordinates = []\n\n    def add_subordinate(self, subordinate):\n        self.subordinates.append(subordinate)\n\n    def get_hierarchy(self, level=0):\n        hierarchy = []\n        hierarchy.append(\"  \" * level + f\"{self.name} ({self.title})\")\n        for subordinate in sorted(self.subordinates, key=lambda x: x.name):\n            hierarchy.extend(subordinate.get_hierarchy(level + 1))\n        return hierarchy\n\n    def find_employee(self, name):\n        if self.name == name:\n            return self\n        for subordinate in self.subordinates:\n            found = subordinate.find_employee(name)\n            if found:\n                return found\n        return None\n\n    def get_management_chain(self):\n        chain = []\n        current = self.manager\n        while current:\n            chain.append(current)\n            current = current.manager\n        return chain[::-1]  # Return from top to bottom\n\n    def get_team_members(self):\n        team = []\n        for subordinate in self.subordinates:\n            team.append(subordinate)\n            team.extend(subordinate.get_team_members())\n        return team\n\n    def get_employees_at_level(self, target_level, current_level=0):\n        employees = []\n        if current_level == target_level:\n            employees.append(self)\n        else:\n            for subordinate in self.subordinates:\n                employees.extend(subordinate.get_employees_at_level(target_level, current_level + 1))\n        return employees\n\n\nclass Organization:\n    def __init__(self, ceo):\n        self.ceo = ceo\n\n    def print_hierarchy(self):\n        for line in self.ceo.get_hierarchy():\n            print(line)\n\n    def find_employee(self, name):\n        return self.ceo.find_employee(name)\n\n    def get_management_chain(self, name):\n        employee = self.find_employee(name)\n        if not employee:\n            return None\n        return employee.get_management_chain()\n\n    def get_team_members(self, name):\n        employee = self.find_employee(name)\n        if not employee:\n            return None\n        return employee.get_team_members()\n\n    def get_employees_at_level(self, level):\n        return self.ceo.get_employees_at_level(level)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    ceo = Employee(\"Alice\", \"CEO\")\n    cto = Employee(\"Bob\", \"CTO\", ceo)\n    cfo = Employee(\"Charlie\", \"CFO\", ceo)\n    ceo.add_subordinate(cto)\n    ceo.add_subordinate(cfo)\n\n    dev_manager = Employee(\"Dave\", \"Development Manager\", cto)\n    cto.add_subordinate(dev_manager)\n\n    dev1 = Employee(\"Eve\", \"Developer\", dev_manager)\n    dev2 = Employee(\"Frank\", \"Developer\", dev_manager)\n    dev_manager.add_subordinate(dev1)\n    dev_manager.add_subordinate(dev2)\n\n    org = Organization(ceo)\n\n    print(\"Organization Hierarchy:\")\n    org.print_hierarchy()\n\n    print(\"\\nManagement Chain for Frank:\")\n    for emp in org.get_management_chain(\"Frank\"):\n        print(f\"{emp.name} ({emp.title})\")\n\n    print(\"\\nTeam Members for Bob (CTO):\")\n    for emp in org.get_team_members(\"Bob\"):\n        print(f\"{emp.name} ({emp.title})\")\n\n    print(\"\\nEmployees at level 2:\")\n    for emp in org.get_employees_at_level(2):\n        print(f\"{emp.name} ({emp.title})\")"
        ],
        "0.9": [
          "class OrganizationAnalyzer:\n    def __init__(self, employees):\n        self.employees = employees\n\n    def get_departments(self):\n        departments = set()\n        for emp in self.employees:\n            departments.add(emp['department'])\n        return list(departments)\n\n    def count_employees_per_department(self):\n        dept_counts = {}\n        for emp in self.employees:\n            dept = emp['department']\n            dept_counts[dept] = dept_counts.get(dept, 0) + 1\n        return dept_counts\n\n    def get_average_salary(self, department=None):\n        total = 0\n        count = 0\n        for emp in self.employees:\n            if department is None or emp['department'] == department:\n                total += emp['salary']\n                count += 1\n        return total / count if count > 0 else 0\n\n    def get_highest_paid_employee(self, department=None):\n        highest_paid = None\n        for emp in self.employees:\n            if department is None or emp['department'] == department:\n                if highest_paid is None or emp['salary'] > highest_paid['salary']:\n                    highest_paid = emp\n        return highest_paid\n\n    def get_lowest_paid_employee(self, department=None):\n        lowest_paid = None\n        for emp in self.employees:\n            if department is None or emp['department'] == department:\n                if lowest_paid is None or emp['salary'] < lowest_paid['salary']:\n                    lowest_paid = emp\n        return lowest_paid"
        ],
        "1.0": [
          "# Example Python code\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\ndef add_numbers(a, b):\n    return a + b\n\nif __name__ == \"__main__\":\n    greet(\"World\")\n    result = add_numbers(5, 3)\n    print(f\"5 + 3 = {result}\")"
        ]
      }
    }
  }
}