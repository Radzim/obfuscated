{
  "slug": "sum-of-k-subarrays-with-length-at-least-m",
  "problem_title": "Sum of K Subarrays With Length at Least M",
  "number": 3473,
  "acceptance": 0.239,
  "difficulty": "Medium",
  "question": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.\n\n**Example 1:**\n\n```\nInput: nums = [1,2,-1,3,3,4], k = 2, m = 2\nOutput: 13\nExplanation:\nThe optimal choice is:\n- Subarray nums[3..5] with sum 3 + 3 + 4 = 10 (length is 3 >= m).\n- Subarray nums[0..1] with sum 1 + 2 = 3 (length is 2 >= m).\nThe total sum is 10 + 3 = 13.\n```\n\n**Example 2:**\n\n```\nInput: nums = [-10,3,-1,-2], k = 4, m = 1\nOutput: -10\nExplanation:\nThe optimal choice is choosing each element as a subarray. The output is (-10) + 3 + (-1) + (-2) = -10.\n```\n\n**Constraints:**\n\n- 1 <= nums.length <= 2000\n- -10^4 <= nums[i] <= 10^4\n- 1 <= k <= floor(nums.length / m)\n- 1 <= m <= 3",
  "post_href": "https://leetcode.com/problems/sum-of-k-subarrays-with-length-at-least-m/discuss/3473/Medium-Python-Solution",
  "python_solutions": "class Solution:\n    def maxSum(self, nums: List[int], k: int, m: int) -> int:\n        from itertools import accumulate\n        from functools import lru_cache\n        n = len(nums)\n        prefix = [0] + list(accumulate(nums))\n        @lru_cache(None)\n        def dp(i, k):\n            if k == 0:\n                return 0\n            if i + m > n:\n                return float('-inf')\n            return max(dp(j, k - 1) + prefix[j] - prefix[i] for j in range(i + m, n + 1))\n        return dp(0, k)",
  "post_title": "Medium Python Solution",
  "user": "leetcode_user",
  "upvotes": 50,
  "views": 2000,
  "augmented_questions": {
    "keyboard": {
      "0.0": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.1": "You are given an integer array n8ms and two integers, k and m. Return the mAximum sum of k non - overlapping subarrays of nu<s, where each subarray has a length of at leasG m.",
      "0.2": "You are givDn an inR#ger array nuJs and two integers, k and m. 54turn the maximum sum of k non - overlapping subarrays of nums, ahere eAch suba4rzy has a length of at leaEt m.",
      "0.3": "You are giDej an iB5ege4 array nuHQ and two iJtevdrs, k and m. ReRufn the mssinum sum of k non - ove5iaLp9ng Zubagrzys of nums, wNRre eadM sugardAy has a length of at :easY m.",
      "0.4": "You are glveb an UntFg2r arrW5 n&<s and two lnGeNefs, k and m. R2HurM the mWxLmuN sum of k non - iB$rlWppinh s6bQrrwyZ of n6Ks, wTerr eAfh WufwrrAy has a lebg5T of at leaWH m.",
      "0.5": "You are gic#h an Lg$eher adrqg n&mW and two iJyeNe#s, k and m. RehuTJ the mWxJKuN sum of k non - LvWr:ALp*ng suFa4rSGc of nuHd, dge3e exvh sufsrrQ& has a leHyrh of at l#qCt m.",
      "0.6": "You are guBWn an imtSv#e xrrWU muJX and two oHteNeTD, k and m. Eet TeJ the HQZikuk sum of k non - oBrGlqop9nr AjhartZUs of h^js, sNerF esXU s tVSr4aJ has a k@nggg of at oeaAR m.",
      "0.7": "You are fuC2n an jb6Syer aD5S^ n7ND and two UmtrFegX, k and m. R$$6Fb the kad*k&m sum of k non - obfDlXpL8gB x&baGts^C of MKks, wys5S 4Ash XIhQd5ay has a <eGY^J of at <3aWG m.",
      "0.8": "You are noc$n an iB$3n@% SE4Sy H TnC and two jj^3Vf5s, k and m. gd5*rM the nZcJKuN sum of k non - *DeDizlLibb divwg5Z5s of HJKC, wJd32 rWfJ X TbWteQ& has a .RnN^y of at .eSEF m.",
      "0.9": "You are h(D4H an KgrWy4d AeTQ6 bkJX and two JMg2V3eQ, k and m. d4g T$h the KQZ7KjH sum of k non - 0dS4iSpOJmH CIfw#$w5c of J T,e, EJFEW sWVy e6GXg5zh has a >@jt%J of at iFwzr m.",
      "1.0": "You are YJCsj an oJYSrsE w3GwH B T,x and two khhsRw$A, k and m. g3gjDB the HXzKn6H sum of k non - (Gr#KxO9OMF CkgqE%QtW of BIkZ, 1MseS #Zsm X*Hz4$X% has a <FHbHG of at KRQDF m."
    },
    "synonym": {
      "0.0": "You make up given an integer array nums and two integers, k and k. Repay the maximal sum of thou not - overlapping subarrays of nums, where each subarray has a length of at least meter.",
      "0.1": "You be given an whole number array nums and two integers, k and m. Return the maximum sum of k non - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.2": "You are given an whole number array nums and two integer, kb and molarity. Return the maximum substance of k not - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.3": "You constitute given an integer array nums and deuce integer, k and m. Return the maximal kernel of k non - overlap subarrays of nums, where each subarray own a length of at least m.",
      "0.4": "You are leave an integer regalia nums and two integer, k and metre. Return the maximal aggregate of kibibyte non - overlap subarrays of nums, where each subarray own a length of at least metre.",
      "0.5": "You represent given an whole number array nums and ii integers, kibibyte and molarity. Regress the maximal sum of thousand not - overlap subarrays of nums, where each subarray experience a duration of at least m.",
      "0.6": "You be impart an whole number array nums and two whole number, thou and g. Revert the maximal inwardness of g not - overlap subarrays of nums, where each subarray have a duration of at least mb.",
      "0.7": "You equal give an whole number raiment nums and two whole number, thousand and molar concentration. Hark back the maximal amount of kilobyte not - overlapping subarrays of nums, where each subarray get a distance of at least grand.",
      "0.8": "You equal impart an whole number raiment nums and ii integer, kelvin and mb. Bring back the maximal heart of special k not - overlap subarrays of nums, where each subarray take a distance of at least molar concentration.",
      "0.9": "You exist pay an whole number raiment nums and ii whole number, g and yard. Reelect the maximal sum of money of jet not - overlap subarrays of nums, where each subarray accept a distance of at least megabyte.",
      "1.0": "You make up consecrate an whole number regalia nums and deuce whole number, special k and mib. Render the maximal core of kb not - overlap subarrays of nums, where each subarray take a duration of at least meter."
    },
    "random": {
      "0.0": "You are given an array nums two, k. the maximum sum of k non - overlapping subarrays nums, where has length of m.",
      "0.1": "You are given an integer array nums and integers, k and m. Return the maximum sum of non - overlapping subarrays of nums, where each subarray has a of least m.",
      "0.2": "Are given an integer nums and two integers, k m. Return maximum sum k - overlapping subarrays of, where each subarray has a length of at least.",
      "0.3": "You given an array nums and two integers, m. Return maximum sum of k non - overlapping subarrays of, where each length at.",
      "0.4": "You are nums two integers, k m. the maximum sum - overlapping subarrays of nums, each has least m.",
      "0.5": "Are and two integers, k and. Return the k - nums, a length least m.",
      "0.6": "Are integer array and two, k. k - subarrays, has of at.",
      "0.7": "Are an, . the maximum - subarrays, a.",
      "0.8": "Are, . -, subarray.",
      "0.9": "Are, . -,.",
      "1.0": "Are, . -,."
    },
    "cut": {
      "0.0": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.1": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a leng",
      "0.2": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each s",
      "0.3": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of n",
      "0.4": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlappi",
      "0.5": "You are given an integer array nums and two integers, k and m. Return the maximum sum ",
      "0.6": "You are given an integer array nums and two integers, k and m. Return",
      "0.7": "You are given an integer array nums and two integers",
      "0.8": "You are given an integer array nums",
      "0.9": "You are given an ",
      "1.0": ""
    }
  },
  "llm_responses": {
    "deepseek": {
      "random": {
        "0.0": [
          "def maxSumTwoNoOverlap(nums, k, m):\n    n = len(nums)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + nums[i]\n\n    def max_sum(k_len, m_len):\n        max_k = [0] * n\n        max_total = 0\n\n        # Compute max subarray of length k_len ending at i\n        for i in range(k_len - 1, n):\n            current = prefix[i + 1] - prefix[i + 1 - k_len]\n            if i >= k_len:\n                current = max(current, max_k[i - 1])\n            max_k[i] = current\n\n        # Compute max subarray of length m_len ending at j and find best combination\n        max_combined = 0\n        for j in range(m_len - 1, n):\n            current_m = prefix[j + 1] - prefix[j + 1 - m_len]\n            if j - m_len >= k_len - 1:\n                current_combined = current_m + max_k[j - m_len]\n                max_combined = max(max_combined, current_combined)\n\n        return max_combined\n\n    return max(max_sum(k, m), max_sum(m, k))"
        ],
        "0.1": [
          "def max_sum_two_subarrays(nums, k, m):\n    n = len(nums)\n    \n    # Compute prefix sum\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + nums[i]\n    \n    # Compute max_k array: max sum of subarray of size k ending at or before index i\n    max_k = [0] * n\n    current_sum = 0\n    for i in range(n):\n        current_sum += nums[i]\n        if i >= k:\n            current_sum -= nums[i - k]\n        if i >= k - 1:\n            max_k[i] = max(max_k[i - 1], current_sum) if i > 0 else current_sum\n    \n    # Compute max_m array: max sum of subarray of size m ending at or before index i\n    max_m = [0] * n\n    current_sum = 0\n    for i in range(n):\n        current_sum += nums[i]\n        if i >= m:\n            current_sum -= nums[i - m]\n        if i >= m - 1:\n            max_m[i] = max(max_m[i - 1], current_sum) if i > 0 else current_sum\n    \n    # Compute the result by considering all possible splits\n    result = 0\n    for i in range(k - 1, n - m):\n        result = max(result, max_k[i] + max_m[i + m])\n    for i in range(m - 1, n - k):\n        result = max(result, max_m[i] + max_k[i + k])\n    \n    return result"
        ],
        "0.2": [
          "def max_sum_k_overlapping_subarrays(nums, k, m):\n    n = len(nums)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + nums[i]\n    \n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for j in range(1, k + 1):\n        for i in range(m * j, n + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - m][j - 1] + prefix[i] - prefix[i - m])\n    \n    return dp[n][k]"
        ],
        "0.3": [
          "def maxSumSubarrays(nums, m, k):\n    n = len(nums)\n    if n < m * k:\n        return 0\n    \n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n    \n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= m:\n                dp[i][j] = max(dp[i - 1][j], dp[i - m][j - 1] + prefix_sum[i] - prefix_sum[i - m])\n    \n    return dp[n][k]"
        ],
        "0.4": [
          "def max_sum_two_overlapping_subarrays(nums, k, m):\n    def max_sum(nums, k):\n        max_sum = current_sum = sum(nums[:k])\n        max_indices = [0]\n        for i in range(1, len(nums) - k + 1):\n            current_sum += nums[i + k - 1] - nums[i - 1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_indices = [i]\n            elif current_sum == max_sum:\n                max_indices.append(i)\n        return max_sum, max_indices\n    \n    max_k_sum, k_indices = max_sum(nums, k)\n    max_m_sum, m_indices = max_sum(nums, m)\n    \n    def non_overlapping_sum(is_k_first):\n        max_total = 0\n        if is_k_first:\n            first_len, second_len = k, m\n            first_indices, second_indices = k_indices, m_indices\n        else:\n            first_len, second_len = m, k\n            first_indices, second_indices = m_indices, k_indices\n        \n        for i in first_indices:\n            first_start, first_end = i, i + first_len - 1\n            for j in second_indices:\n                second_start, second_end = j, j + second_len - 1\n                if (second_start > first_end) or (second_end < first_start):\n                    current_sum = sum(nums[first_start:first_start + first_len]) + sum(nums[second_start:second_start + second_len])\n                    if current_sum > max_total:\n                        max_total = current_sum\n        return max_total\n    \n    scenario1 = non_overlapping_sum(True)\n    scenario2 = non_overlapping_sum(False)\n    return max(scenario1, scenario2)"
        ],
        "0.5": [
          "def find_k_nums(nums, k, m):\n    if len(nums) < m:\n        return []\n    return nums[:k]"
        ],
        "0.6": [
          "def sum_k_subarrays(arr, k):\n    n = len(arr)\n    if n < k or k <= 0:\n        return []\n    result = []\n    for i in range(n - k + 1):\n        subarray = arr[i:i + k]\n        result.append(subarray)\n    return result\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nk = 3\nprint(sum_k_subarrays(arr, k))"
        ],
        "0.7": [
          "def max_subarray(nums):\n    max_current = max_global = nums[0]\n    for num in nums[1:]:\n        max_current = max(num, max_current + num)\n        if max_current > max_global:\n            max_global = max_current\n    return max_global"
        ],
        "0.8": [
          "def find_subarrays(arr):\n    subarrays = []\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            subarrays.append(arr[i:j+1])\n    return subarrays\n\n# Example usage:\narr = [1, 2, 3, 4]\nresult = find_subarrays(arr)\nprint(result)"
        ],
        "0.9": [
          "import re\n\ndef process_text(text):\n    # Remove all characters except letters, numbers, spaces, and basic punctuation\n    cleaned_text = re.sub(r'[^\\w\\s.,!?-]', '', text)\n    return cleaned_text\n\n# Example usage\ninput_text = \"Are, . -,.\"\noutput_text = process_text(input_text)\nprint(output_text)"
        ],
        "1.0": [
          "import re\n\ndef clean_text(text):\n    # Remove unwanted characters: commas, periods, hyphens\n    cleaned_text = re.sub(r'[,\\-\\.]', '', text)\n    return cleaned_text\n\n# Example usage\ninput_text = \"Are, . -,.\"\noutput_text = clean_text(input_text)\nprint(output_text)"
        ]
      }
    }
  }
}