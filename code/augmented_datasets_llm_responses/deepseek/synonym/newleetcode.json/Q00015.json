{
  "slug": "sum-of-k-subarrays-with-length-at-least-m",
  "problem_title": "Sum of K Subarrays With Length at Least M",
  "number": 3473,
  "acceptance": 0.239,
  "difficulty": "Medium",
  "question": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.\n\n**Example 1:**\n\n```\nInput: nums = [1,2,-1,3,3,4], k = 2, m = 2\nOutput: 13\nExplanation:\nThe optimal choice is:\n- Subarray nums[3..5] with sum 3 + 3 + 4 = 10 (length is 3 >= m).\n- Subarray nums[0..1] with sum 1 + 2 = 3 (length is 2 >= m).\nThe total sum is 10 + 3 = 13.\n```\n\n**Example 2:**\n\n```\nInput: nums = [-10,3,-1,-2], k = 4, m = 1\nOutput: -10\nExplanation:\nThe optimal choice is choosing each element as a subarray. The output is (-10) + 3 + (-1) + (-2) = -10.\n```\n\n**Constraints:**\n\n- 1 <= nums.length <= 2000\n- -10^4 <= nums[i] <= 10^4\n- 1 <= k <= floor(nums.length / m)\n- 1 <= m <= 3",
  "post_href": "https://leetcode.com/problems/sum-of-k-subarrays-with-length-at-least-m/discuss/3473/Medium-Python-Solution",
  "python_solutions": "class Solution:\n    def maxSum(self, nums: List[int], k: int, m: int) -> int:\n        from itertools import accumulate\n        from functools import lru_cache\n        n = len(nums)\n        prefix = [0] + list(accumulate(nums))\n        @lru_cache(None)\n        def dp(i, k):\n            if k == 0:\n                return 0\n            if i + m > n:\n                return float('-inf')\n            return max(dp(j, k - 1) + prefix[j] - prefix[i] for j in range(i + m, n + 1))\n        return dp(0, k)",
  "post_title": "Medium Python Solution",
  "user": "leetcode_user",
  "upvotes": 50,
  "views": 2000,
  "augmented_questions": {
    "keyboard": {
      "0.0": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.1": "You are given an integer array n8ms and two integers, k and m. Return the mAximum sum of k non - overlapping subarrays of nu<s, where each subarray has a length of at leasG m.",
      "0.2": "You are givDn an inR#ger array nuJs and two integers, k and m. 54turn the maximum sum of k non - overlapping subarrays of nums, ahere eAch suba4rzy has a length of at leaEt m.",
      "0.3": "You are giDej an iB5ege4 array nuHQ and two iJtevdrs, k and m. ReRufn the mssinum sum of k non - ove5iaLp9ng Zubagrzys of nums, wNRre eadM sugardAy has a length of at :easY m.",
      "0.4": "You are glveb an UntFg2r arrW5 n&<s and two lnGeNefs, k and m. R2HurM the mWxLmuN sum of k non - iB$rlWppinh s6bQrrwyZ of n6Ks, wTerr eAfh WufwrrAy has a lebg5T of at leaWH m.",
      "0.5": "You are gic#h an Lg$eher adrqg n&mW and two iJyeNe#s, k and m. RehuTJ the mWxJKuN sum of k non - LvWr:ALp*ng suFa4rSGc of nuHd, dge3e exvh sufsrrQ& has a leHyrh of at l#qCt m.",
      "0.6": "You are guBWn an imtSv#e xrrWU muJX and two oHteNeTD, k and m. Eet TeJ the HQZikuk sum of k non - oBrGlqop9nr AjhartZUs of h^js, sNerF esXU s tVSr4aJ has a k@nggg of at oeaAR m.",
      "0.7": "You are fuC2n an jb6Syer aD5S^ n7ND and two UmtrFegX, k and m. R$$6Fb the kad*k&m sum of k non - obfDlXpL8gB x&baGts^C of MKks, wys5S 4Ash XIhQd5ay has a <eGY^J of at <3aWG m.",
      "0.8": "You are noc$n an iB$3n@% SE4Sy H TnC and two jj^3Vf5s, k and m. gd5*rM the nZcJKuN sum of k non - *DeDizlLibb divwg5Z5s of HJKC, wJd32 rWfJ X TbWteQ& has a .RnN^y of at .eSEF m.",
      "0.9": "You are h(D4H an KgrWy4d AeTQ6 bkJX and two JMg2V3eQ, k and m. d4g T$h the KQZ7KjH sum of k non - 0dS4iSpOJmH CIfw#$w5c of J T,e, EJFEW sWVy e6GXg5zh has a >@jt%J of at iFwzr m.",
      "1.0": "You are YJCsj an oJYSrsE w3GwH B T,x and two khhsRw$A, k and m. g3gjDB the HXzKn6H sum of k non - (Gr#KxO9OMF CkgqE%QtW of BIkZ, 1MseS #Zsm X*Hz4$X% has a <FHbHG of at KRQDF m."
    },
    "synonym": {
      "0.0": "You make up given an integer array nums and two integers, k and k. Repay the maximal sum of thou not - overlapping subarrays of nums, where each subarray has a length of at least meter.",
      "0.1": "You be given an whole number array nums and two integers, k and m. Return the maximum sum of k non - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.2": "You are given an whole number array nums and two integer, kb and molarity. Return the maximum substance of k not - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.3": "You constitute given an integer array nums and deuce integer, k and m. Return the maximal kernel of k non - overlap subarrays of nums, where each subarray own a length of at least m.",
      "0.4": "You are leave an integer regalia nums and two integer, k and metre. Return the maximal aggregate of kibibyte non - overlap subarrays of nums, where each subarray own a length of at least metre.",
      "0.5": "You represent given an whole number array nums and ii integers, kibibyte and molarity. Regress the maximal sum of thousand not - overlap subarrays of nums, where each subarray experience a duration of at least m.",
      "0.6": "You be impart an whole number array nums and two whole number, thou and g. Revert the maximal inwardness of g not - overlap subarrays of nums, where each subarray have a duration of at least mb.",
      "0.7": "You equal give an whole number raiment nums and two whole number, thousand and molar concentration. Hark back the maximal amount of kilobyte not - overlapping subarrays of nums, where each subarray get a distance of at least grand.",
      "0.8": "You equal impart an whole number raiment nums and ii integer, kelvin and mb. Bring back the maximal heart of special k not - overlap subarrays of nums, where each subarray take a distance of at least molar concentration.",
      "0.9": "You exist pay an whole number raiment nums and ii whole number, g and yard. Reelect the maximal sum of money of jet not - overlap subarrays of nums, where each subarray accept a distance of at least megabyte.",
      "1.0": "You make up consecrate an whole number regalia nums and deuce whole number, special k and mib. Render the maximal core of kb not - overlap subarrays of nums, where each subarray take a duration of at least meter."
    },
    "random": {
      "0.0": "You are given an array nums two, k. the maximum sum of k non - overlapping subarrays nums, where has length of m.",
      "0.1": "You are given an integer array nums and integers, k and m. Return the maximum sum of non - overlapping subarrays of nums, where each subarray has a of least m.",
      "0.2": "Are given an integer nums and two integers, k m. Return maximum sum k - overlapping subarrays of, where each subarray has a length of at least.",
      "0.3": "You given an array nums and two integers, m. Return maximum sum of k non - overlapping subarrays of, where each length at.",
      "0.4": "You are nums two integers, k m. the maximum sum - overlapping subarrays of nums, each has least m.",
      "0.5": "Are and two integers, k and. Return the k - nums, a length least m.",
      "0.6": "Are integer array and two, k. k - subarrays, has of at.",
      "0.7": "Are an, . the maximum - subarrays, a.",
      "0.8": "Are, . -, subarray.",
      "0.9": "Are, . -,.",
      "1.0": "Are, . -,."
    },
    "cut": {
      "0.0": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.1": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a leng",
      "0.2": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each s",
      "0.3": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of n",
      "0.4": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlappi",
      "0.5": "You are given an integer array nums and two integers, k and m. Return the maximum sum ",
      "0.6": "You are given an integer array nums and two integers, k and m. Return",
      "0.7": "You are given an integer array nums and two integers",
      "0.8": "You are given an integer array nums",
      "0.9": "You are given an ",
      "1.0": ""
    }
  },
  "llm_responses": {
    "deepseek": {
      "synonym": {
        "0.0": [
          "ERROR: Timeout after 3 attempts"
        ],
        "0.1": [
          "def maxSumKNonOverlappingSubarrays(nums, k, m):\n    n = len(nums)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i+1] = prefix[i] + nums[i]\n    \n    # dp[i][j] represents the maximum sum of j subarrays for the first i elements\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for j in range(1, k + 1):\n        for i in range(m * j, n + 1):\n            # The sum of the subarray ending at i with length m\n            current_subarray = prefix[i] - prefix[i - m]\n            # We can either take the current subarray and add to dp[i - m][j - 1]\n            # Or not take it and keep dp[i - 1][j]\n            if i - m >= 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - m][j - 1] + current_subarray)\n    \n    return dp[n][k]"
        ],
        "0.2": [
          "def maxSumTwoNoOverlap(nums, k, m):\n    n = len(nums)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i+1] = prefix[i] + nums[i]\n    \n    def maxSum(k_len, m_len):\n        max_sum = 0\n        # First pass: left to right\n        max_k = [0] * n\n        sum_k = prefix[k_len] - prefix[0]\n        max_k[k_len - 1] = sum_k\n        for i in range(k_len, n):\n            sum_k += nums[i] - nums[i - k_len]\n            max_k[i] = max(max_k[i-1], sum_k)\n        \n        # Second pass: right to left\n        sum_m = prefix[n] - prefix[n - m_len]\n        max_sum = max(max_sum, sum_m + max_k[n - m_len - 1])\n        for i in range(n - m_len - 1, k_len - 1, -1):\n            sum_m += nums[i] - nums[i + m_len]\n            max_sum = max(max_sum, sum_m + max_k[i - 1])\n        \n        return max_sum\n    \n    return max(maxSum(k, m), maxSum(m, k))"
        ],
        "0.3": [
          "def max_sum_k_subarrays(nums, k, m):\n    n = len(nums)\n    if n < k * m:\n        return 0\n    \n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n    \n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for j in range(1, k + 1):\n        for i in range(m * j, n + 1):\n            if j == 1:\n                dp[i][j] = prefix_sum[i] - prefix_sum[i - m]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - m][j - 1] + prefix_sum[i] - prefix_sum[i - m])\n    \n    max_sum = 0\n    for i in range(m * k, n + 1):\n        if dp[i][k] > max_sum:\n            max_sum = dp[i][k]\n    \n    return max_sum"
        ],
        "0.4": [
          "def max_sum_two_no_overlap(nums, k, m):\n    n = len(nums)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i+1] = prefix[i] + nums[i]\n    \n    def max_sum(k_len, m_len):\n        max_k = 0\n        max_total = 0\n        # First k_len subarray, then m_len subarray\n        for i in range(k_len, n - m_len + 1):\n            current_k = prefix[i] - prefix[i - k_len]\n            if current_k > max_k:\n                max_k = current_k\n            current_m = prefix[i + m_len] - prefix[i]\n            max_total = max(max_total, max_k + current_m)\n        # First m_len subarray, then k_len subarray\n        max_m = 0\n        for i in range(m_len, n - k_len + 1):\n            current_m = prefix[i] - prefix[i - m_len]\n            if current_m > max_m:\n                max_m = current_m\n            current_k = prefix[i + k_len] - prefix[i]\n            max_total = max(max_total, max_m + current_k)\n        return max_total\n    \n    return max_sum(k, m)"
        ],
        "0.5": [
          "def max_sum_two_no_overlap(nums, m, k):\n    n = len(nums)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + nums[i]\n\n    def max_sum(m, k):\n        max_sum = 0\n        max_m = [0] * n\n        for i in range(m - 1, n):\n            if i == m - 1:\n                max_m[i] = prefix[i + 1] - prefix[i - m + 1]\n            else:\n                max_m[i] = max(max_m[i - 1], prefix[i + 1] - prefix[i - m + 1])\n\n        for i in range(m + k - 1, n):\n            current_k = prefix[i + 1] - prefix[i - k + 1]\n            current_m = max_m[i - k]\n            max_sum = max(max_sum, current_k + current_m)\n        return max_sum\n\n    return max(max_sum(m, k), max_sum(k, m))"
        ],
        "0.6": [
          "def max_sum_two_subarrays(nums, mb, g):\n    n = len(nums)\n    if n < mb + g or mb <= 0 or g <= 0:\n        return 0\n    \n    # Compute prefix sums\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + nums[i]\n    \n    # Compute max subarrays of length at least mb ending at each position\n    max_mb = [0] * n\n    current_sum = prefix[mb] - prefix[0]\n    max_mb[mb - 1] = current_sum\n    for i in range(mb, n):\n        current_sum += nums[i] - nums[i - mb]\n        max_mb[i] = max(max_mb[i - 1], current_sum)\n    \n    # Compute max subarrays of length at least g ending at each position\n    max_g = [0] * n\n    current_sum = prefix[g] - prefix[0]\n    max_g[g - 1] = current_sum\n    for i in range(g, n):\n        current_sum += nums[i] - nums[i - g]\n        max_g[i] = max(max_g[i - 1], current_sum)\n    \n    max_total = 0\n    # Check non-overlapping subarrays: mb followed by g\n    for i in range(mb - 1, n - g):\n        max_total = max(max_total, max_mb[i] + max_g[i + g])\n    \n    # Check non-overlapping subarrays: g followed by mb\n    for i in range(g - 1, n - mb):\n        max_total = max(max_total, max_g[i] + max_mb[i + mb])\n    \n    return max_total"
        ],
        "0.7": [
          "def max_non_overlapping_subarrays(nums, k, m):\n    n = len(nums)\n    if n < k:\n        return 0\n    \n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n    \n    dp = [0] * (n + 1)\n    max_subarrays = 0\n    \n    for i in range(k, n + 1):\n        current_sum = prefix_sum[i] - prefix_sum[i - k]\n        if i - k >= m:\n            max_subarrays = max(max_subarrays, dp[i - k - m] + 1)\n        dp[i] = max(dp[i - 1], max_subarrays)\n    \n    return dp[n]"
        ],
        "0.8": [
          "def max_sum_two_no_overlap(nums, k, m):\n    n = len(nums)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + nums[i]\n\n    def max_sum(k, m):\n        max_sum = 0\n        max_k = [0] * n\n        sum_k = 0\n        for i in range(k - 1, n):\n            if i == k - 1:\n                sum_k = prefix[i + 1] - prefix[0]\n            else:\n                sum_k = prefix[i + 1] - prefix[i - k + 1]\n            if i - k >= 0:\n                max_k[i] = max(max_k[i - 1], sum_k)\n            else:\n                max_k[i] = sum_k\n\n        sum_m = 0\n        for j in range(m - 1, n):\n            if j == m - 1:\n                sum_m = prefix[j + 1] - prefix[0]\n            else:\n                sum_m = prefix[j + 1] - prefix[j - m + 1]\n            if j - m >= 0:\n                current_sum = sum_m + max_k[j - m]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n        return max_sum\n\n    return max(max_sum(k, m), max_sum(m, k))"
        ],
        "0.9": [
          "def max_sum_two_no_overlap(nums, first_len, second_len):\n    def max_sum_helper(L, M):\n        max_L = [0] * len(nums)\n        sum_L = 0\n        for i in range(len(nums)):\n            sum_L += nums[i]\n            if i >= L:\n                sum_L -= nums[i - L]\n            if i >= L - 1:\n                max_L[i] = max(sum_L, max_L[i - 1] if i > 0 else 0)\n        \n        max_M = [0] * len(nums)\n        sum_M = 0\n        for i in range(len(nums)):\n            sum_M += nums[i]\n            if i >= M:\n                sum_M -= nums[i - M]\n            if i >= M - 1:\n                max_M[i] = max(sum_M, max_M[i - 1] if i > 0 else 0)\n        \n        res = 0\n        for i in range(L + M - 1, len(nums)):\n            res = max(res, max_L[i - M] + sum_M, max_M[i - L] + sum_L)\n            sum_M += nums[i - M + 1] - nums[i - M - L + 1] if i - M - L + 1 >= 0 else 0\n            sum_L += nums[i - L + 1] - nums[i - L - M + 1] if i - L - M + 1 >= 0 else 0\n        return res\n    \n    return max(max_sum_helper(first_len, second_len), max_sum_helper(second_len, first_len))"
        ],
        "1.0": [
          "def max_sum_two_no_overlap(nums, k, m):\n    n = len(nums)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i+1] = prefix[i] + nums[i]\n\n    def max_sum_subarray(length):\n        max_sum = 0\n        for i in range(length, n + 1):\n            current_sum = prefix[i] - prefix[i - length]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        return max_sum\n\n    max_k = max_sum_subarray(k)\n    max_m = max_sum_subarray(m)\n\n    max_total = 0\n    for i in range(k, n - m + 1):\n        current_k = prefix[i] - prefix[i - k]\n        current_m = prefix[i + m] - prefix[i]\n        if current_k + current_m > max_total:\n            max_total = current_k + current_m\n\n    for i in range(m, n - k + 1):\n        current_m = prefix[i] - prefix[i - m]\n        current_k = prefix[i + k] - prefix[i]\n        if current_m + current_k > max_total:\n            max_total = current_m + current_k\n\n    return max(max_total, max_k + max_m)"
        ]
      }
    }
  }
}