{
  "slug": "longest-common-prefix-of-k-strings-after-removal",
  "problem_title": "Longest Common Prefix of K Strings After Removal",
  "number": 3485,
  "acceptance": 0.178,
  "difficulty": "Hard",
  "question": "You are given an array of strings words and an integer k. For each index i in the range [0, words.length - 1], find the length of the longest common prefix among any k strings (selected at distinct indices) from the remaining array after removing the ith element. Return an array answer, where answer[i] is the answer for the ith element. If removing the ith element leaves fewer than k strings, the answer should be 0.\n\n**Example 1:**\n\n```\nInput: words = [\"apple\", \"apricot\", \"ape\", \"apartment\"], k = 2\nOutput: [2, 2, 2, 2]\nExplanation:\n- Removing \"apple\", the longest common prefix among any 2 strings is \"ap\" with length 2.\n- Removing \"apricot\", the longest common prefix among any 2 strings is \"ap\" with length 2.\n- Removing \"ape\", the longest common prefix among any 2 strings is \"ap\" with length 2.\n- Removing \"apartment\", the longest common prefix among any 2 strings is \"ap\" with length 2.\n```\n\n**Example 2:**\n\n```\nInput: words = [\"dog\", \"racecar\", \"car\"], k = 2\nOutput: [0, 0, 0]\nExplanation:\n- Removing any word leaves fewer than 2 strings, so the answer for each is 0.\n```\n\n**Constraints:**\n\n- 2 <= words.length <= 100\n- 1 <= words[i].length <= 100\n- words[i] consists of lowercase English letters.\n- 2 <= k <= words.length",
  "post_href": "https://leetcode.com/problems/longest-common-prefix-of-k-strings-after-removal/discuss/3485/Hard-Python-Solution",
  "python_solutions": "class Solution:\n    def longestCommonPrefixAfterRemoval(self, words: List[str], k: int) -> List[int]:\n        def common_prefix_length(strs):\n            if not strs: return 0\n            min_len = min(len(s) for s in strs)\n            for i in range(min_len):\n                if len(set(s[i] for s in strs)) > 1:\n                    return i\n            return min_len\n        n = len(words)\n        answer = [0] * n\n        for i in range(n):\n            remaining_words = words[:i] + words[i+1:]\n            if len(remaining_words) < k:\n                answer[i] = 0\n            else:\n                max_prefix = 0\n                for comb in itertools.combinations(remaining_words, k):\n                    max_prefix = max(max_prefix, common_prefix_length(comb))\n                answer[i] = max_prefix\n        return answer",
  "post_title": "Hard Python Solution",
  "user": "leetcode_user",
  "upvotes": 50,
  "views": 2000,
  "augmented_questions": {
    "keyboard": {
      "0.0": "You are given an array of strings words and an integer k. For each index i in the range [0, words. length - 1 ], find the length of the longest common prefix among any k strings (selected at distinct indices) from the remaining array after removing the ith element. Return an array answer, where answer [i] is the answer for the ith element. If removing the ith element leaves fewer than k strings, the answer should be 0.",
      "0.1": "You are given an arrZy of stringA words and an integer k. For each iMdex i in the range [0, words. length - 1 ], find the lenrth of the longest common lrefix among any k str9ngs (selected at distincY indices) from the remaining array Qfter removing the ith element. Return an array aHswer, where answer [i] is the answer for the ith element. If removkng the ith element leaves fewer than k strings, the answer should be 0.",
      "0.2": "You are glven an array of strings Aords and an integer k. For each indes i in the raJge [0, wordA. .engfh - 1 ], find the lenNtU of the longest c9kmon Orecix among any k xtriggs (selsvted at distinct undiced) crom the remaining Qrray after removing the ith elemdHt. Return an xrray answer, where anXwe3 [i] is the answer for the ith eldhent. If removing the ith element leaves fewer thah k strings, the answer should be 0.",
      "0.3": "You are given an zrraJ of s6r9ngZ wlrdz and an in%SNer k. For dacy inE2x i in the range [0, Eorcs. length - 1 ], f9nc the length of the longest clmmLn pref9S among any k strings (Ce,eFted at viWfinct Jbdicea) grKm the remziG*ng array af6e4 removing the ith element. Re5uDn an array andweg, whefF answer [i] is the Znswef for the ith 2isment. If remIGiGg the ith eldhejt leaFws feaRr tMWn k strings, the ansQet Ahou,d be 0.",
      "0.4": "You are t(ven an atraj of xtr8nns words and an iGtFge4 k. For esVh iJeex i in the rSngW [0, w*rVs. l2nnFh - 1 ], biBd the /enntt of the :onged^ DoNmKn preD&D a<onH any k sFriHns (sFlRc%Sd at viaHincR indices) fr9K the fekSininf srra% aft4F TeKofinn the ith #lemWnY. RfG8rn an ar4aU xgs1er, wGWre xnX@er [i] is the SGsaer for the ith rlekwnt. If EemogjnY the ith DlememF ;ezvee eeEer ^Jan k strings, the anX2eG shpHlw be 0.",
      "0.5": "You are ykcen an aerZu of s4guggs w(rRw and an onteNFg k. For saFh oMdeC i in the DSbge [0, @orRA. lsnHtM - 1 ], fJnE the lDJgrh of the kohrFst co,Hoj pr4DiZ AmKJg any k s6rlHgq (sw,rcter at xustonc5 9gdOXes) frIK the GeHaUnLHg WrTQy aC^eF rem(Blnh the ith @ldm2bt. twt Trn an aTrwU xMswe3, wneT@ aHEw3r [i] is the aBzwwr for the ith sl4hDnt. If r$modlnt the ith 4KeheBt Osavew fe3RG ttqn k CGr(nrs, the andddr syoIpd be 0.",
      "0.6": "You are figem an af%Sy of aHe*ngZ w(gdz and an 9btwf$r k. For rXcg inf#a i in the rZnvD [0, w(#Cs. ;eJNtu - 1 ], f9MW the .egNgh of the >onRwEf fPhmoB )red7C Wkonv any k s6E*Brs (de,rdtev at fiAtiBF4 Lgd*cSe) gEpm the tRmXiJUnR ag%Qy Zf%eF #$moFUnR the ith DlsNeJ5. %etKeH an ad$Qy qmew#r, EMeee SnwEe5 [i] is the znQse4 for the ith eosHeB5. If 5eHovjmb the ith 2PeKem4 ;ezDex tew4# 5hqG k s$tiHNW, the XnsS35 sh( T;x be 0.",
      "0.7": "You are Nuceh an Wr5z5 of Ztf*nyC a0rfe and an kn6wgRd k. For eQXj KBdWD i in the %WnNs [0, eoevq. odnv%N - 1 ], fkGV the .$mYyh of the O9ngdzg so,h*g pt2G9D Qn)Jg any k eGDjggs (zs?wDRed at Wod$iMc6 uBSKced) ftKN the fWKziJijf SDta& abR$G #e,LCjhg the ith S>eneM6. D2$Krj an z$dAy qMdde#, QbeF# qMsd3# [i] is the WHsQR# for the ith w/$NenR. If $SH(B*ng the ith 2kFmfBt oRqvDd vFDwr rhAg k Qt4jjys, the Wbcde3 snL T<v be 0.",
      "0.8": "You are YuDeM an xTrzT of s$t&Bte !iGcs and an UJg2b#r k. For $Zxt ujd4S i in the DZbTe [0, 20rFZ. >emF4G - 1 ], r8gv the IejHrB of the /pGY4s^ x)mN(G od4foS XNojN any k ZtTKBNQ (q@<Wc4rx at sKsF*bsG iGcUVde) D#P, the fWKQUjoHg at5QT AfgRG rSHPfkBt the ith e<4,RB^. fDt7tb an Q$5Zy qGs@3t, 2JSTe ZGwwf3 [i] is the XGWssr for the ith #pe,wMh. If rw<Kg&HF the ith D,eN#by .DabwW edw@d huzG k sHT8bYe, the AJc#2r xTiHod be 0.",
      "0.9": "You are T7C@b an XF%W5 of zYtLBtd @IDFW and an 7jFDvw4 k. For dzvJ *bSwd i in the TSbvf [0, E9ewX. pFmTRT - 1 ], cJjS the >fbY5u of the iPmNRQ$ f9k<Kg ogSVjC S<LHh any k xYDkmRa (cSKdDy2S at V7W68BSy lGE8fRX) RfKK the GSHAJH7Mf WtgXh Se6F5 FDhICUgH the ith #:4jwHh. #S67Em an X#esG Zge@#3, AMW%F SBa#DD [i] is the xjdqde for the ith @>shSHf. If 5rHPbOjr the ith s/2,rjr OdqdFz tdds4 FJSG k A%3lBrc, the wbEq4F XT8iKe be 0.",
      "1.0": "You are F8FRg an qdeZU of WGTOBvE q9EFd and an 8HY2t$D k. For 4QfG ogfDD i in the $ZGY$ [0, D0dvA. .sjTFu - 1 ], c8BE the iDMnht of the IpHv3Ay Xl<J(H 0ERd7a wnKBN any k cY4KjyW (Dd?@DfwS at XKq6LgvF 7HC8XWa) vtK< the %DHZOj*JF X%TSU XEF@F GdN*g7BV the ith s<dhsHY. E#y&$M an QTGqG Zbe!4#, sbrE# XGZDse [i] is the XbEA#G for the ith @?WHsg^. If GsH9ckBt the ith r,wNfhh K3wG$a rfSdt FGzh k E55&jyC, the xhxa#G ejPkpx be 0."
    },
    "synonym": {
      "0.0": "You are given an array of strand watchword and an integer k. For each exponent i in the chain [zero, logos. duration - ane ], feel the length of the long coarse prefix among any k strings (selected at clear cut indices) from the remaining array after removing the ith component. Bring back an array answer, where answer [i] be the answer for the ith element. If removing the ith element leave few than k strings, the answer should exist zero.",
      "0.1": "You be give an array of strings holy writ and an integer k. For each index i in the range [0, word. length - 1 ], find the length of the long common prefix among any k strings (selected at distinct indices) from the remaining array after take away the ith ingredient. Return an array answer, where answer [i] is the answer for the ith element. If removing the ith element leaves fewer than k strings, the answer should be 0.",
      "0.2": "You are given an array of strings words and an integer k. For each index one in the range [0, word. length - unity ], find the length of the long vulgar prefix among any one thousand strings (take at clear cut indices) from the remaining array after removing the ith element. Return an array solvent, where answer [1] is the answer for the ith element. If polish off the ith ingredient leaves fewer than k strings, the answer should be zero.",
      "0.3": "You are break an array of string words and an integer kb. For each index number i in the reach [zero, words. distance - i ], regain the length of the longest uncouth prefix among any k string section (selected at distinct index) from the stay array after removing the ith element. Give back an array answer, where answer [iodine] be the solution for the ith element. If remove the ith element allow for few than k strings, the answer should be cypher.",
      "0.4": "You are given an array of string words and an whole number k. For each index atomic number 53 in the reach [0, words. length - single ], discover the duration of the foresighted common prefix among any k string (pick out at distinct power) from the remain regalia after take away the ith component. Repay an raiment solvent, where answer [one] be the solvent for the ith ingredient. If off the ith element leaves few than special k strings, the resolution should comprise cipher.",
      "0.5": "You represent present an regalia of string lyric and an whole number k. For each index number ace in the stove [0, words. duration - 1 ], find the length of the long vulgar prefix among any m train (take at distinguishable index) from the continue raiment after murder the ith component. Return an regalia solvent, where result [iodine] is the answer for the ith component. If move out the ith constituent lead few than cat valium strings, the result should embody zero.",
      "0.6": "You be give an regalia of string section word and an whole number one thousand. For each indicant 1 in the range of a function [zero, christian bible. duration - i ], chance the distance of the retentive common prefix among any 1000 strings (choose at discrete index) from the remain regalia after take out the ith component. Repay an raiment result, where solvent [1] follow the reply for the ith component. If withdraw the ith constituent leave few than super c string, the reply should comprise nought.",
      "0.7": "You be grant an raiment of string section holy scripture and an whole number jet. For each index finger one in the scope [zero, word of honor. duration - unity ], find out the duration of the farseeing rough cut prefix among any m strand (choose at clear cut index number) from the rest regalia after remove the ith chemical element. Deliver an regalia solvent, where result [ace] constitute the result for the ith ingredient. If remove the ith chemical element leave few than kb drawstring, the reply should make up zero.",
      "0.8": "You exist give an regalia of drawing string scripture and an whole number thou. For each indicator one in the kitchen range [cypher, dustup. duration - i ], discover the distance of the long coarse prefix among any m string (select at trenchant forefinger) from the remain regalia after withdraw the ith constituent. Refund an regalia solvent, where solvent [atomic number 53] follow the reply for the ith constituent. If transfer the ith component will few than one thousand string, the solution should exist cipher.",
      "0.9": "You live yield an regalia of string word and an whole number 1000. For each exponent atomic number 53 in the kitchen range [cypher, password. duration - unity ], observe the distance of the long uncouth prefix among any m string (select at discrete index) from the stay on regalia after off the ith component. Refund an raiment solution, where solution [iodine] be the solution for the ith factor. If remove the ith ingredient leave few than one thousand twine, the solvent should represent cipher.",
      "1.0": "You be dedicate an raiment of chain bible and an whole number green. For each exponent 1 in the kitchen range [cypher, row. duration - ace ], discover the duration of the recollective plebeian prefix among any thousand twine (choose at clear cut exponent) from the continue regalia after murder the ith constituent. Turn back an raiment result, where reply [single] be the solvent for the ith factor. If remove the ith factor leave few than yard twine, the response should constitute zero."
    },
    "random": {
      "0.0": "You are given an array strings words and k. For each index i in the range [0, . length - 1 ], length of the prefix among k (selected distinct indices) the after the. Return array, where answer [i] the ith. If removing the element leaves than k strings, the be 0.",
      "0.1": "You are given an array strings words and an integer k. For each index i in the range [0, words. length - 1 ], find the length of the longest common prefix among any strings (selected at indices) from the remaining array after ith element. Return array answer, answer [] is the answer for the ith. If removing the ith element leaves than k strings, the answer should be 0.",
      "0.2": "You are given an array of words and an integer. For each index i in range [0, . length - ], the length of the common prefix strings (selected) from the remaining after removing ith element. Return an answer, where answer [i] is the answer for the ith element. If the element leaves fewer than k strings, the should be 0.",
      "0.3": "Are given an array of strings an integer k. For each index the [, words. length - 1 ], find the length of the longest common prefix among k strings (selected at) from the remaining array. an answer, where [] is the the. If removing the ith leaves fewer, answer should be 0.",
      "0.4": "Are given an array words and an integer k. the [, . length - ], of the among any k strings (selected at distinct) from the array removing ith. Return an array, [] answer the ith element. If the ith element strings, the be.",
      "0.5": "Are array of and an integer. For each in range [0, . length - 1 ], find of any (distinct) the remaining the. array, [] answer for element. removing the ith fewer, the be 0.",
      "0.6": "Are strings integer. each index the [, . - ], the length common prefix among any k (at) from after. , [] the ith. removing the leaves strings,.",
      "0.7": "You are integer. range [0, . - ], common (selected ). Return, []. If k strings,.",
      "0.8": "You. [0, . - ], (). , []. ,.",
      "0.9": "Are. [, . - ], (). , []. ,.",
      "1.0": "Are. [, . - ], (). , []. ,."
    },
    "cut": {
      "0.0": "You are given an array of strings words and an integer k. For each index i in the range [0, words.length - 1], find the length of the longest common prefix among any k strings (selected at distinct indices) from the remaining array after removing the ith element. Return an array answer, where answer[i] is the answer for the ith element. If removing the ith element leaves fewer than k strings, the answer should be 0.",
      "0.1": "You are given an array of strings words and an integer k. For each index i in the range [0, words.length - 1], find the length of the longest common prefix among any k strings (selected at distinct indices) from the remaining array after removing the ith element. Return an array answer, where answer[i] is the answer for the ith element. If removing the ith element leaves few",
      "0.2": "You are given an array of strings words and an integer k. For each index i in the range [0, words.length - 1], find the length of the longest common prefix among any k strings (selected at distinct indices) from the remaining array after removing the ith element. Return an array answer, where answer[i] is the answer for the ith eleme",
      "0.3": "You are given an array of strings words and an integer k. For each index i in the range [0, words.length - 1], find the length of the longest common prefix among any k strings (selected at distinct indices) from the remaining array after removing the ith element. Return an array answer, where",
      "0.4": "You are given an array of strings words and an integer k. For each index i in the range [0, words.length - 1], find the length of the longest common prefix among any k strings (selected at distinct indices) from the remaining array after removing the ",
      "0.5": "You are given an array of strings words and an integer k. For each index i in the range [0, words.length - 1], find the length of the longest common prefix among any k strings (selected at distinct indices) fro",
      "0.6": "You are given an array of strings words and an integer k. For each index i in the range [0, words.length - 1], find the length of the longest common prefix among any k ",
      "0.7": "You are given an array of strings words and an integer k. For each index i in the range [0, words.length - 1], find the length",
      "0.8": "You are given an array of strings words and an integer k. For each index i in the ra",
      "0.9": "You are given an array of strings words an",
      "1.0": ""
    }
  },
  "llm_responses": {
    "anthropic": {
      "synonym": {
        "0.0": [
          "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    \n    prefix = strs[0]\n    for string in strs[1:]:\n        while string[:len(prefix)] != prefix:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n\ndef findLongestCommonPrefixLength(strs):\n    if not strs:\n        return 0\n    return len(longestCommonPrefix(strs))\n\ndef findLongestCommonPrefixes(watchword, k):\n    n = len(watchword)\n    answer = [0] * n\n    \n    for i in range(n):\n        remaining = watchword[:i] + watchword[i+1:]\n        \n        if len(remaining) < k:\n            answer[i] = 0\n        else:\n            combinations = []\n            for j in range(len(remaining)):\n                for l in range(j+1, len(remaining)):\n                    combinations.append([remaining[j], remaining[l]])\n            \n            max_prefix_length = 0\n            for combo in combinations:\n                max_prefix_length = max(max_prefix_length, findLongestCommonPrefixLength(combo))\n            \n            answer[i] = max_prefix_length\n    \n    return answer"
        ],
        "0.1": [
          "def longestCommonPrefix(strs, k):\n    n = len(strs)\n    answer = [0] * n\n    \n    for i in range(n):\n        subset = strs[:i] + strs[i+1:]\n        \n        if len(subset) < k:\n            continue\n        \n        min_length = min(len(s) for s in subset)\n        \n        for prefix_len in range(min_length + 1):\n            common_prefix = subset[0][:prefix_len]\n            \n            if all(s.startswith(common_prefix) for s in subset):\n                answer[i] = prefix_len\n            else:\n                break\n    \n    return answer"
        ],
        "0.2": [
          "def longestCommonPrefix(words):\n    if not words:\n        return \"\"\n    \n    prefix = words[0]\n    for word in words[1:]:\n        while word[:len(prefix)] != prefix:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n\ndef findLongestCommonPrefixLengths(words, k):\n    n = len(words)\n    answer = [0] * n\n    \n    for i in range(n):\n        remaining_words = words[:i] + words[i+1:]\n        \n        if len(remaining_words) < k:\n            answer[i] = 0\n        else:\n            common_prefix = longestCommonPrefix(remaining_words)\n            answer[i] = len(common_prefix)\n    \n    return answer"
        ],
        "0.3": [
          "def longestCommonPrefix(words):\n    if not words:\n        return \"\"\n    \n    prefix = words[0]\n    for word in words[1:]:\n        while word[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:-1]\n        if not prefix:\n            return \"\"\n    return prefix\n\ndef findLongestCommonPrefix(words, k):\n    if len(words) < k:\n        return 0\n    \n    combinations = []\n    for i in range(len(words)):\n        subset = words[:i] + words[i+1:]\n        if len(subset) >= k:\n            combinations.append(subset)\n    \n    max_prefix_length = 0\n    for combo in combinations:\n        all_k_combinations = [combo[j:j+k] for j in range(len(combo)-k+1)]\n        for subset in all_k_combinations:\n            prefix = longestCommonPrefix(subset)\n            max_prefix_length = max(max_prefix_length, len(prefix))\n    \n    return max_prefix_length\n\ndef findLongestCommonPrefixes(words, k):\n    result = []\n    for i in range(len(words)):\n        result.append(findLongestCommonPrefix(words, k))\n    return result"
        ],
        "0.4": [
          "def longestCommonPrefix(words, k):\n    n = len(words)\n    answer = [0] * n\n    \n    for i in range(n):\n        remaining = words[:i] + words[i+1:]\n        \n        if len(remaining) < k:\n            continue\n        \n        combinations = itertools.combinations(remaining, k)\n        max_prefix_length = 0\n        \n        for combo in combinations:\n            current_prefix_length = 0\n            min_length = min(len(word) for word in combo)\n            \n            for j in range(min_length):\n                if all(word[j] == combo[0][j] for word in combo):\n                    current_prefix_length += 1\n                else:\n                    break\n            \n            max_prefix_length = max(max_prefix_length, current_prefix_length)\n        \n        answer[i] = max_prefix_length\n    \n    return answer"
        ],
        "0.5": [
          "def longestCommonPrefix(words, k):\n    n = len(words)\n    result = [0] * n\n    \n    for i in range(n):\n        remaining_words = words[:i] + words[i+1:]\n        \n        if len(remaining_words) < k:\n            result[i] = 0\n            continue\n        \n        max_prefix_length = 0\n        for j in range(k):\n            current_prefix_length = 0\n            current_word = remaining_words[j]\n            \n            for m in range(min(len(current_word), len(words[i]))):\n                if current_word[m] == words[i][m]:\n                    current_prefix_length += 1\n                else:\n                    break\n            \n            max_prefix_length = max(max_prefix_length, current_prefix_length)\n        \n        result[i] = max_prefix_length\n    \n    return result"
        ],
        "0.6": [
          "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for s in strs[1:]:\n        while s[:len(prefix)] != prefix:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n\ndef solve(arr):\n    n = len(arr)\n    result = [0] * n\n    \n    for i in range(n):\n        subset = arr[:i] + arr[i+1:]\n        \n        if len(subset) < 1000:\n            result[i] = 0\n        else:\n            random_subset = subset[:1000]\n            max_prefix_length = len(longestCommonPrefix(random_subset))\n            result[i] = max_prefix_length\n    \n    return result"
        ],
        "0.7": [
          "def longestCommonPrefix(strs, k):\n    n = len(strs)\n    result = [0] * n\n    \n    for i in range(n):\n        remaining = strs[:i] + strs[i+1:]\n        \n        if len(remaining) < k:\n            result[i] = 0\n            continue\n        \n        max_prefix = 0\n        for j in range(len(remaining)):\n            for m in range(j+1, len(remaining)):\n                prefix_len = 0\n                while (prefix_len < len(remaining[j]) and \n                       prefix_len < len(remaining[m]) and \n                       remaining[j][prefix_len] == remaining[m][prefix_len]):\n                    prefix_len += 1\n                max_prefix = max(max_prefix, prefix_len)\n        \n        result[i] = max_prefix\n    \n    return result"
        ],
        "0.8": [
          "def longest_common_prefix(strings):\n    if not strings:\n        return 0\n    \n    min_length = len(min(strings, key=len))\n    \n    for i in range(min_length):\n        if len(set(s[i] for s in strings)) > 1:\n            return i\n    \n    return min_length\n\ndef solution(arr, m):\n    n = len(arr)\n    result = [0] * n\n    \n    for i in range(n):\n        remaining_arr = arr[:i] + arr[i+1:]\n        \n        if len(remaining_arr) < m:\n            result[i] = 0\n        else:\n            result[i] = longest_common_prefix(remaining_arr)\n    \n    return result"
        ],
        "0.9": [
          "def solution(words, k):\n    n = len(words)\n    result = [0] * n\n    \n    for i in range(n):\n        remaining_words = words[:i] + words[i+1:]\n        \n        if len(remaining_words) < k:\n            result[i] = 0\n            continue\n        \n        max_prefix_length = 0\n        for j in range(k):\n            current_prefix_length = 0\n            for m in range(len(remaining_words[j])):\n                match = all(remaining_words[j][:m+1] == remaining_words[l][:m+1] for l in range(k) if l != j)\n                if match:\n                    current_prefix_length = m + 1\n                else:\n                    break\n            max_prefix_length = max(max_prefix_length, current_prefix_length)\n        \n        result[i] = max_prefix_length\n    \n    return result"
        ],
        "1.0": [
          "def findLongestCommonPrefix(arr, n):\n    result = [0] * n\n    \n    for i in range(n):\n        remaining = arr[:i] + arr[i+1:]\n        \n        if len(remaining) < 1000:\n            result[i] = 0\n            continue\n        \n        max_prefix_length = 0\n        for j in range(len(remaining)):\n            for k in range(j+1, len(remaining)):\n                prefix_length = 0\n                while (prefix_length < len(remaining[j]) and \n                       prefix_length < len(remaining[k]) and \n                       remaining[j][prefix_length] == remaining[k][prefix_length]):\n                    prefix_length += 1\n                max_prefix_length = max(max_prefix_length, prefix_length)\n        \n        result[i] = max_prefix_length\n    \n    return result"
        ]
      }
    }
  }
}