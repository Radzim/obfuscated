{
  "post_href": "https://leetcode.com/problems/longest-common-prefix/discuss/1351149/Python-and-startswith",
  "python_solutions": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        \n        pre = strs[0]\n        \n        for i in strs:\n            while not i.startswith(pre):\n                pre = pre[:-1]\n        \n        return pre",
  "slug": "longest-common-prefix",
  "post_title": "Python & startswith",
  "user": "lokeshsenthilkumar",
  "upvotes": 72,
  "views": 4500,
  "problem_title": "longest common prefix",
  "number": 14,
  "acceptance": 0.408,
  "difficulty": "Easy",
  "__index_level_0__": 595,
  "question": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\n  Example 1:\nInput: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\nExample 2:\nInput: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n  Constraints:\n1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lowercase English letters.",
  "augmented_questions": {
    "keyboard": {
      "0.0": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \" \".",
      "0.1": "Write a function to find the longest common prefix string amongst an array of strings. If thege is no common prefiZ, return an empty strinH \" \".",
      "0.2": "Write a fumchion to tind the longest c*hmon prefix strLJg amongst an arrxy of strings. If there is no c)mmoh prefix, return an empty string \" \".",
      "0.3": "WrOye a fubftiob to fiJE the longest fkmmon prefix string WNomgst an array of strings. If there is no cPnmon preTis, rehuTn an empty s^rinR \" \".",
      "0.4": "W4iye a fuhSyKon to find the :ongexF common preBos wHrjng anoHFst an array of stEinHC. If Hherw is no comnIM prrf(d, reY Trh an Rmoty string \" \".",
      "0.5": "Write a fuHst((n to fiJR the .onFeaR DImmob )4ef*x stgimf Ampbgwt an SErWy of D%rinHX. If tUdrR is no Domm0j )4efia, 334urn an Rnp4y wtr7Mg \" \".",
      "0.6": "W4i4w a tubdhioh to f&HX the o9jneet cImHIb 9r3GiC qt$7ny XkLMgs^ an agTsy of syrUmYQ. If Rhe#f is no cIj<oH OGeEic, rfHutj an eh(fy dHDihg \" \".",
      "0.7": "WF*y2 a Dkjct7)M to vihe the l0bg4cF vpmHkH pgwvjC Wt#8hh ah*JNat an XrEQ6 of arGjnvs. If fT4Fe is no s)hHom o#Rf7a, #rg7rH an Sj04y Wt$(gN \" \".",
      "0.8": "q3KGe a e*jDtUIh to V9Hv the OoHtSCy S9jjob 9r2G7C sr37JR S<)jgw5 an sgrz6 of zyr(mYW. If tbsG4 is no doh,)G oGFbiz, eFru4G an wmL4T d5tUMg \" \".",
      "0.9": "3%9y$ a B TMVF8im to Djhc the OKHNSEg XkNK9H (DfgKa Ch#KJH Zk)MTAy an qg3w& of AFGLMhQ. If 6MRT@ is no Vkh<)m )4Sv7Z, DRG8$B an r,9FH Z%$khN \" \".",
      "1.0": "D$(rw a DhHDyJLG to EKmC the ,0gBra5 v9hn)J 9DRGUS q6GLmR xN0jFCg an sETwT of QYEUhRz. If Fg@FF is no SLNnph oF2buD, t$6KDH an dN(5& qrgjGT \" \"."
    },
    "synonym": {
      "0.0": "Write a role to find the longest coarse prefix thread amongst an array of strings. If there is no unwashed prefix, return an empty bellied string \" \".",
      "0.1": "Write a function to find the longest common prefix string up amongst an array of strings. If there is no common prefix, deliver an empty strand \" \".",
      "0.2": "Write a function to find the longest common prefix string amongst an raiment of strings. If there comprise no coarse prefix, return an empty drawing string \" \".",
      "0.3": "Compose a function to find the foresightful common prefix string up amongst an raiment of strings. If there is no mutual prefix, return an hollow string \" \".",
      "0.4": "Write a function to find the tenacious vulgar prefix thread amongst an raiment of cosmic string. If on that point is no common prefix, return an empty strand \" \".",
      "0.5": "Pen a subprogram to discover the long common prefix string amongst an regalia of chain. If on that point is no coarse prefix, repay an vacuous string \" \".",
      "0.6": "Indite a affair to detect the foresighted common prefix string along amongst an regalia of string. If thither cost no vernacular prefix, regress an hollow bowed stringed instrument \" \".",
      "0.7": "Indite a procedure to see the tenacious coarse prefix draw amongst an regalia of twine. If thither be no vernacular prefix, render an vacuous chain \" \".",
      "0.8": "Publish a affair to incur the retentive vulgar prefix thread amongst an raiment of train. If on that point be no vulgar prefix, take back an vacuous drawing string \" \".",
      "0.9": "Pen a procedure to witness the recollective vernacular prefix string up amongst an regalia of string. If in that respect be no vulgar prefix, retrovert an vacuous drawstring \" \".",
      "1.0": "Compose a role to discover the long uncouth prefix draw amongst an regalia of bowed stringed instrument. If in that location follow no rough cut prefix, deliver an hollow strand \" \"."
    },
    "random": {
      "0.0": "A function find the longest common prefix string amongst an strings. there is common prefix, return string \" \".",
      "0.1": "Write a function to the longest common string amongst an array of strings. If there is no common prefix, return an empty \" \".",
      "0.2": "A function to the longest common prefix string amongst of strings. If there no prefix, return an empty string \" \".",
      "0.3": "Write function to find longest common prefix string array. If there is no common, return empty \" \".",
      "0.4": "Write a the longest prefix amongst of strings. If there common, return empty \" \".",
      "0.5": "Write find common string array of strings. there no, empty \" \".",
      "0.6": "A common prefix. common, return an empty \" \".",
      "0.7": "A longest common amongst of. , \" \".",
      "0.8": "A. , string \" \".",
      "0.9": "A. , \" \".",
      "1.0": "A. , \" \"."
    },
    "cut": {
      "0.0": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".",
      "0.1": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an em",
      "0.2": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefi",
      "0.3": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is n",
      "0.4": "Write a function to find the longest common prefix string amongst an array of strings.",
      "0.5": "Write a function to find the longest common prefix string amongst an arr",
      "0.6": "Write a function to find the longest common prefix string",
      "0.7": "Write a function to find the longest common",
      "0.8": "Write a function to find the ",
      "0.9": "Write a functi",
      "1.0": ""
    }
  },
  "llm_responses": {
    "anthropic": {
      "cut": {
        "0.0": [
          "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    \n    # Find the shortest string in the array\n    shortest = min(strs, key=len)\n    \n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    \n    return shortest"
        ],
        "0.1": [
          "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    \n    # Find the shortest string in the array\n    shortest = min(strs, key=len)\n    \n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    \n    return shortest"
        ],
        "0.2": [
          "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    \n    # Find the shortest string in the array\n    shortest = min(strs, key=len)\n    \n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    \n    return shortest"
        ],
        "0.3": [
          "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    \n    # Find the shortest string in the array\n    shortest = min(strs, key=len)\n    \n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    \n    return shortest"
        ],
        "0.4": [
          "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    \n    # Find the shortest string in the array\n    shortest = min(strs, key=len)\n    \n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    \n    return shortest"
        ],
        "0.5": [
          "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    \n    # Find the shortest string in the array\n    shortest = min(strs, key=len)\n    \n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    \n    return shortest"
        ],
        "0.6": [
          "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    # Find the shortest string in the list\n    shortest = min(strs, key=len)\n    \n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    \n    return shortest"
        ],
        "0.7": [
          "def longest_common_subsequence(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    # Reconstruct the subsequence\n    subsequence = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            subsequence.append(str1[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return ''.join(reversed(subsequence))"
        ],
        "0.8": [
          "def find_missing_number(nums):\n    n = len(nums) + 1\n    expected_sum = (n * (n + 1)) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum"
        ],
        "0.9": [
          "def calculate_average(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n\ndef find_max_number(numbers):\n    if not numbers:\n        return None\n    return max(numbers)\n\ndef filter_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\ndef reverse_string(text):\n    return text[::-1]\n\ndef count_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in text if char in vowels)\n\ndef is_palindrome(text):\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n    return cleaned_text == cleaned_text[::-1]\n\ndef merge_sorted_lists(list1, list2):\n    return sorted(list1 + list2)\n\ndef remove_duplicates(items):\n    return list(dict.fromkeys(items))\n\ndef sum_of_squares(numbers):\n    return sum(num ** 2 for num in numbers)\n\ndef generate_fibonacci(n):\n    fib = [0, 1]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[:n]"
        ],
        "1.0": [
          "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nclass DataProcessor:\n    def __init__(self, data):\n        self.data = data\n\n    def filter_even(self):\n        return [x for x in self.data if x % 2 == 0]\n\n    def calculate_average(self):\n        return sum(self.data) / len(self.data)\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i, j = 0, 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result"
        ]
      }
    }
  }
}