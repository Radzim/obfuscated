{
  "slug": "sum-of-k-subarrays-with-length-at-least-m",
  "problem_title": "Sum of K Subarrays With Length at Least M",
  "number": 3473,
  "acceptance": 0.239,
  "difficulty": "Medium",
  "question": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.\n\n**Example 1:**\n\n```\nInput: nums = [1,2,-1,3,3,4], k = 2, m = 2\nOutput: 13\nExplanation:\nThe optimal choice is:\n- Subarray nums[3..5] with sum 3 + 3 + 4 = 10 (length is 3 >= m).\n- Subarray nums[0..1] with sum 1 + 2 = 3 (length is 2 >= m).\nThe total sum is 10 + 3 = 13.\n```\n\n**Example 2:**\n\n```\nInput: nums = [-10,3,-1,-2], k = 4, m = 1\nOutput: -10\nExplanation:\nThe optimal choice is choosing each element as a subarray. The output is (-10) + 3 + (-1) + (-2) = -10.\n```\n\n**Constraints:**\n\n- 1 <= nums.length <= 2000\n- -10^4 <= nums[i] <= 10^4\n- 1 <= k <= floor(nums.length / m)\n- 1 <= m <= 3",
  "post_href": "https://leetcode.com/problems/sum-of-k-subarrays-with-length-at-least-m/discuss/3473/Medium-Python-Solution",
  "python_solutions": "class Solution:\n    def maxSum(self, nums: List[int], k: int, m: int) -> int:\n        from itertools import accumulate\n        from functools import lru_cache\n        n = len(nums)\n        prefix = [0] + list(accumulate(nums))\n        @lru_cache(None)\n        def dp(i, k):\n            if k == 0:\n                return 0\n            if i + m > n:\n                return float('-inf')\n            return max(dp(j, k - 1) + prefix[j] - prefix[i] for j in range(i + m, n + 1))\n        return dp(0, k)",
  "post_title": "Medium Python Solution",
  "user": "leetcode_user",
  "upvotes": 50,
  "views": 2000,
  "augmented_questions": {
    "keyboard": {
      "0.0": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.1": "You are given an integer array n8ms and two integers, k and m. Return the mAximum sum of k non - overlapping subarrays of nu<s, where each subarray has a length of at leasG m.",
      "0.2": "You are givDn an inR#ger array nuJs and two integers, k and m. 54turn the maximum sum of k non - overlapping subarrays of nums, ahere eAch suba4rzy has a length of at leaEt m.",
      "0.3": "You are giDej an iB5ege4 array nuHQ and two iJtevdrs, k and m. ReRufn the mssinum sum of k non - ove5iaLp9ng Zubagrzys of nums, wNRre eadM sugardAy has a length of at :easY m.",
      "0.4": "You are glveb an UntFg2r arrW5 n&<s and two lnGeNefs, k and m. R2HurM the mWxLmuN sum of k non - iB$rlWppinh s6bQrrwyZ of n6Ks, wTerr eAfh WufwrrAy has a lebg5T of at leaWH m.",
      "0.5": "You are gic#h an Lg$eher adrqg n&mW and two iJyeNe#s, k and m. RehuTJ the mWxJKuN sum of k non - LvWr:ALp*ng suFa4rSGc of nuHd, dge3e exvh sufsrrQ& has a leHyrh of at l#qCt m.",
      "0.6": "You are guBWn an imtSv#e xrrWU muJX and two oHteNeTD, k and m. Eet TeJ the HQZikuk sum of k non - oBrGlqop9nr AjhartZUs of h^js, sNerF esXU s tVSr4aJ has a k@nggg of at oeaAR m.",
      "0.7": "You are fuC2n an jb6Syer aD5S^ n7ND and two UmtrFegX, k and m. R$$6Fb the kad*k&m sum of k non - obfDlXpL8gB x&baGts^C of MKks, wys5S 4Ash XIhQd5ay has a <eGY^J of at <3aWG m.",
      "0.8": "You are noc$n an iB$3n@% SE4Sy H TnC and two jj^3Vf5s, k and m. gd5*rM the nZcJKuN sum of k non - *DeDizlLibb divwg5Z5s of HJKC, wJd32 rWfJ X TbWteQ& has a .RnN^y of at .eSEF m.",
      "0.9": "You are h(D4H an KgrWy4d AeTQ6 bkJX and two JMg2V3eQ, k and m. d4g T$h the KQZ7KjH sum of k non - 0dS4iSpOJmH CIfw#$w5c of J T,e, EJFEW sWVy e6GXg5zh has a >@jt%J of at iFwzr m.",
      "1.0": "You are YJCsj an oJYSrsE w3GwH B T,x and two khhsRw$A, k and m. g3gjDB the HXzKn6H sum of k non - (Gr#KxO9OMF CkgqE%QtW of BIkZ, 1MseS #Zsm X*Hz4$X% has a <FHbHG of at KRQDF m."
    },
    "synonym": {
      "0.0": "You make up given an integer array nums and two integers, k and k. Repay the maximal sum of thou not - overlapping subarrays of nums, where each subarray has a length of at least meter.",
      "0.1": "You be given an whole number array nums and two integers, k and m. Return the maximum sum of k non - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.2": "You are given an whole number array nums and two integer, kb and molarity. Return the maximum substance of k not - overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.3": "You constitute given an integer array nums and deuce integer, k and m. Return the maximal kernel of k non - overlap subarrays of nums, where each subarray own a length of at least m.",
      "0.4": "You are leave an integer regalia nums and two integer, k and metre. Return the maximal aggregate of kibibyte non - overlap subarrays of nums, where each subarray own a length of at least metre.",
      "0.5": "You represent given an whole number array nums and ii integers, kibibyte and molarity. Regress the maximal sum of thousand not - overlap subarrays of nums, where each subarray experience a duration of at least m.",
      "0.6": "You be impart an whole number array nums and two whole number, thou and g. Revert the maximal inwardness of g not - overlap subarrays of nums, where each subarray have a duration of at least mb.",
      "0.7": "You equal give an whole number raiment nums and two whole number, thousand and molar concentration. Hark back the maximal amount of kilobyte not - overlapping subarrays of nums, where each subarray get a distance of at least grand.",
      "0.8": "You equal impart an whole number raiment nums and ii integer, kelvin and mb. Bring back the maximal heart of special k not - overlap subarrays of nums, where each subarray take a distance of at least molar concentration.",
      "0.9": "You exist pay an whole number raiment nums and ii whole number, g and yard. Reelect the maximal sum of money of jet not - overlap subarrays of nums, where each subarray accept a distance of at least megabyte.",
      "1.0": "You make up consecrate an whole number regalia nums and deuce whole number, special k and mib. Render the maximal core of kb not - overlap subarrays of nums, where each subarray take a duration of at least meter."
    },
    "random": {
      "0.0": "You are given an array nums two, k. the maximum sum of k non - overlapping subarrays nums, where has length of m.",
      "0.1": "You are given an integer array nums and integers, k and m. Return the maximum sum of non - overlapping subarrays of nums, where each subarray has a of least m.",
      "0.2": "Are given an integer nums and two integers, k m. Return maximum sum k - overlapping subarrays of, where each subarray has a length of at least.",
      "0.3": "You given an array nums and two integers, m. Return maximum sum of k non - overlapping subarrays of, where each length at.",
      "0.4": "You are nums two integers, k m. the maximum sum - overlapping subarrays of nums, each has least m.",
      "0.5": "Are and two integers, k and. Return the k - nums, a length least m.",
      "0.6": "Are integer array and two, k. k - subarrays, has of at.",
      "0.7": "Are an, . the maximum - subarrays, a.",
      "0.8": "Are, . -, subarray.",
      "0.9": "Are, . -,.",
      "1.0": "Are, . -,."
    },
    "cut": {
      "0.0": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.",
      "0.1": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a leng",
      "0.2": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of nums, where each s",
      "0.3": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlapping subarrays of n",
      "0.4": "You are given an integer array nums and two integers, k and m. Return the maximum sum of k non-overlappi",
      "0.5": "You are given an integer array nums and two integers, k and m. Return the maximum sum ",
      "0.6": "You are given an integer array nums and two integers, k and m. Return",
      "0.7": "You are given an integer array nums and two integers",
      "0.8": "You are given an integer array nums",
      "0.9": "You are given an ",
      "1.0": ""
    }
  },
  "llm_responses": {
    "anthropic": {
      "cut": {
        "0.0": [
          "class Solution:\n    def maxSumOfThreeSubarrays(self, nums, k, m):\n        n = len(nums)\n        \n        # Calculate prefix sums\n        prefix = [0] * (n + 1)\n        for i in range(n):\n            prefix[i + 1] = prefix[i] + nums[i]\n        \n        # Calculate window sums of length k\n        window_sums = [prefix[i + k] - prefix[i] for i in range(n - k + 1)]\n        \n        # Left max subarrays\n        left_max = [0] * len(window_sums)\n        best_left = 0\n        for i in range(len(window_sums)):\n            if window_sums[i] > window_sums[best_left]:\n                best_left = i\n            left_max[i] = best_left\n        \n        # Right max subarrays\n        right_max = [0] * len(window_sums)\n        best_right = len(window_sums) - 1\n        for i in range(len(window_sums) - 1, -1, -1):\n            if window_sums[i] >= window_sums[best_right]:\n                best_right = i\n            right_max[i] = best_right\n        \n        # Find maximum sum of three non-overlapping subarrays\n        max_total = 0\n        result = [0, 0, 0]\n        \n        for j in range(m, n - 2 * k - m + 1):\n            left = left_max[0:j]\n            right = right_max[j + k:]\n            \n            i, l = left[j - m], right[0]\n            current_sum = window_sums[i] + window_sums[j] + window_sums[l]\n            \n            if current_sum > max_total:\n                max_total = current_sum\n                result = [i, j, l]\n        \n        return result"
        ],
        "0.1": [
          "def maxSumOfSubarrays(nums, k, m):\n    n = len(nums)\n    if n < k * m:\n        return 0\n    \n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n    \n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(m, n + 1):\n        for j in range(1, k + 1):\n            curr_sum = prefix_sum[i] - prefix_sum[i - m]\n            dp[i][j] = max(dp[i - 1][j], dp[i - m][j - 1] + curr_sum)\n    \n    return dp[n][k]"
        ],
        "0.2": [
          "def maxSumOfThreeSubarrays(nums, k, m):\n    n = len(nums)\n    window_sum = [sum(nums[i:i+k]) for i in range(n-k+1)]\n    \n    left_max = [0] * (n-k+1)\n    right_max = [0] * (n-k+1)\n    \n    curr_max = window_sum[0]\n    left_max[0] = 0\n    for i in range(1, n-k+1):\n        if window_sum[i] > curr_max:\n            curr_max = window_sum[i]\n            left_max[i] = i\n        else:\n            left_max[i] = left_max[i-1]\n    \n    curr_max = window_sum[-1]\n    right_max[-1] = n-k\n    for i in range(n-k-1, -1, -1):\n        if window_sum[i] >= curr_max:\n            curr_max = window_sum[i]\n            right_max[i] = i\n        else:\n            right_max[i] = right_max[i+1]\n    \n    max_total = 0\n    result = []\n    \n    for j in range(k, n-2*k+1):\n        left = left_max[j-k]\n        right = right_max[j+k]\n        total = window_sum[left] + window_sum[j] + window_sum[right]\n        \n        if total > max_total:\n            max_total = total\n            result = [left, j, right]\n    \n    return max_total"
        ],
        "0.3": [
          "def maxSumOfSubarrays(nums, k, m):\n    n = len(nums)\n    if k * m > n:\n        return 0\n    \n    # Compute prefix sums\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = prefix_sums[i-1] + nums[i-1]\n    \n    # Dynamic programming to track max subarrays\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(m, n + 1):\n        for j in range(1, k + 1):\n            curr_sum = prefix_sums[i] - prefix_sums[i-m]\n            dp[i][j] = max(dp[i-1][j], dp[i-m][j-1] + curr_sum)\n    \n    return dp[n][k]"
        ],
        "0.4": [
          "def maxSum(nums, k, m):\n    n = len(nums)\n    if k * m > n:\n        return -1\n    \n    max_sum = float('-inf')\n    \n    for i in range(n - k * m + 1):\n        current_sum = 0\n        used_indices = set()\n        \n        for j in range(k):\n            best_subarray_sum = float('-inf')\n            best_subarray_start = -1\n            \n            for start in range(i + j * m, min(n - m + 1, i + (j + 1) * m)):\n                if start not in used_indices:\n                    subarray_sum = sum(nums[start:start + m])\n                    if subarray_sum > best_subarray_sum:\n                        best_subarray_sum = subarray_sum\n                        best_subarray_start = start\n            \n            if best_subarray_start == -1:\n                break\n            \n            current_sum += best_subarray_sum\n            used_indices.update(range(best_subarray_start, best_subarray_start + m))\n        \n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum if max_sum != float('-inf') else -1"
        ],
        "0.5": [
          "def maxSum(nums, k, m):\n    n = len(nums)\n    if n < k * m:\n        return -1\n    \n    max_sum = float('-inf')\n    \n    for i in range(n - k * m + 1):\n        current_sum = 0\n        subarrays = []\n        \n        for j in range(m):\n            subarray = nums[i + j * k : i + j * k + k]\n            subarrays.append(subarray)\n            current_sum += sum(subarray)\n        \n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
        ],
        "0.6": [
          "def maxFrequencyScore(nums, k, m):\n    nums.sort()\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    \n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n    \n    max_freq = 0\n    \n    for i in range(n):\n        left, right = i, n - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            length = mid - i + 1\n            \n            if length > m:\n                right = mid - 1\n                continue\n            \n            median_idx = i + (length - 1) // 2\n            median = nums[median_idx]\n            \n            left_sum = prefix_sum[median_idx + 1] - prefix_sum[i]\n            right_sum = prefix_sum[mid + 1] - prefix_sum[median_idx + 1]\n            \n            total_cost = (median_idx - i + 1) * median - left_sum + right_sum - (mid - median_idx) * median\n            \n            if total_cost <= k:\n                max_freq = max(max_freq, length)\n                left = mid + 1\n            else:\n                right = mid - 1\n    \n    return max_freq"
        ],
        "0.7": [
          "def findMaxAverage(nums, k):\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n    \n    for i in range(k, len(nums)):\n        window_sum = window_sum - nums[i-k] + nums[i]\n        max_sum = max(max_sum, window_sum)\n    \n    return max_sum / k"
        ],
        "0.8": [
          "def findMaxLength(nums):\n    count = 0\n    max_length = 0\n    count_dict = {0: -1}\n    \n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count -= 1\n        else:\n            count += 1\n        \n        if count in count_dict:\n            max_length = max(max_length, i - count_dict[count])\n        else:\n            count_dict[count] = i\n    \n    return max_length"
        ],
        "0.9": [
          "def solution(A):\n    n = len(A)\n    if n == 0:\n        return 0\n    \n    max_ending = max_so_far = A[0]\n    \n    for i in range(1, n):\n        max_ending = max(A[i], max_ending + A[i])\n        max_so_far = max(max_so_far, max_ending)\n    \n    return max_so_far"
        ],
        "1.0": [
          "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i, j = 0, 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result"
        ]
      }
    }
  }
}