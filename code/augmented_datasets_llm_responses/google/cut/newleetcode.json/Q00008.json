{
  "slug": "analyze-organization-hierarchy",
  "problem_title": "Analyze Organization Hierarchy",
  "number": 3482,
  "acceptance": 0.759,
  "difficulty": "Hard",
  "question": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For each employee, count the total number of subordinates under them, including indirect subordinates.\n\n3. **Manager Chain**: For each employee, list their chain of managers up to the CEO.\n\n**Example:**\n\nGiven the following employee table:\n\n| employee_id | employee_name | manager_id |\n|-------------|---------------|------------|\n| 1           | Alice         | NULL       |\n| 2           | Bob           | 1          |\n| 3           | Charlie       | 1          |\n| 4           | David         | 2          |\n| 5           | Eve           | 2          |\n| 6           | Frank         | 3          |\n\nYour solution should output:\n\n1. **Hierarchy Levels**:\n\n| employee_id | employee_name | level |\n|-------------|---------------|-------|\n| 1           | Alice         | 1     |\n| 2           | Bob           | 2     |\n| 3           | Charlie       | 2     |\n| 4           | David         | 3     |\n| 5           | Eve           | 3     |\n| 6           | Frank         | 3     |\n\n2. **Subordinate Count**:\n\n| employee_id | employee_name | subordinate_count |\n|-------------|---------------|-------------------|\n| 1           | Alice         | 5                 |\n| 2           | Bob           | 2                 |\n| 3           | Charlie       | 1                 |\n| 4           | David         | 0                 |\n| 5           | Eve           | 0                 |\n| 6           | Frank         | 0                 |\n\n3. **Manager Chain**:\n\n| employee_id | employee_name | manager_chain     |\n|-------------|---------------|-------------------|\n| 1           | Alice         | NULL              |\n| 2           | Bob           | Alice             |\n| 3           | Charlie       | Alice             |\n| 4           | David         | Bob > Alice       |\n| 5           | Eve           | Bob > Alice       |\n| 6           | Frank         | Charlie > Alice   |\n\n**Constraints:**\n\n- The number of employees will not exceed 10^4.\n- Each employee will have a unique `employee_id`.\n- The `manager_id` for the CEO is `NULL`.",
  "post_href": "https://leetcode.com/problems/analyze-organization-hierarchy/discuss/3482/Hard-Python-Solution",
  "python_solutions": "class Solution:\n    def analyzeHierarchy(self, employees: List[List[int]]) -> Tuple[List[List[int]], List[List[int]], List[List[int]]]:\n        from collections import defaultdict, deque\n        # Build the tree and initialize data structures\n        tree = defaultdict(list)\n        employee_info = {}\n        for emp_id, emp_name, mgr_id in employees:\n            employee_info[emp_id] = {'name': emp_name, 'manager': mgr_id, 'level': 0, 'subordinates': 0, 'manager_chain': []}\n            if mgr_id is not None:\n                tree[mgr_id].append(emp_id)\n        # Find the CEO (root of the tree)\n        ceo = next(emp_id for emp_id, info in employee_info.items() if info['manager'] is None)\n        # BFS to determine levels and manager chains\n        queue = deque([(ceo, 1, [])])\n        while queue:\n            emp_id, level, chain = queue.popleft()\n            employee_info[emp_id]['level'] = level\n            employee_info[emp_id]['manager_chain'] = chain\n            for sub_id in tree[emp_id]:\n                queue.append((sub_id, level + 1, chain + [employee_info[emp_id]['name']]))\n        # DFS to count subordinates\n        def count_subordinates(emp_id):\n            count = 0\n            for sub_id in tree[emp_id]:\n                count += 1 + count_subordinates(sub_id)\n            employee_info[emp_id]['subordinates'] = count\n            return count\n        count_subordinates(ceo)\n        # Prepare results\n        hierarchy_levels = []\n        subordinate_counts = []\n        manager_chains = []\n        for emp_id, info in employee_info.items():\n            hierarchy_levels.append([emp_id, info['name'], info['level']])\n            subordinate_counts.append([emp_id, info['name'], info['subordinates']])\n            manager_chains.append([emp_id, info['name'], ' > '.join(reversed(info['manager_chain'])) or 'NULL'])\n        return hierarchy_levels, subordinate_counts, manager_chains",
  "post_title": "Hard Python Solution",
  "user": "leetcode_user",
  "upvotes": 40,
  "views": 1800,
  "augmented_questions": {
    "keyboard": {
      "0.0": "Write a solution to analyze the organizational hierarchy and answer the following: 1. * * Hierarchy Levels * *: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on. 2. * * Subordinate Count * *: For each employee, count the total number of subordinates under them, including indirect subordinates. 3. * * Manager Chain * *: For each employee, list their chain of managers up to the CEO.",
      "0.1": "Wrihe a solution to Snalyze the organizational hierarchy and answer the following: 1. * * Hierarchy Levels * *: For each emp.oyee, determine their lwvel in the otgsnization. The CEO is at level 1, direct feports to the CEO are at level 2, and so on. 2. * * Subordinate Count * *: For each employee, count the total number of subordinates under them, includinN indirect subordinates. 3. * * Manager dhain * *: For exch employee, lost their chain of manavers up to the CEO.",
      "0.2": "WritR a soluYi8n to anaOTze the organizational hierarchy and xnZwer the follp1ing: 1. * * H7erarcyy Levels * *: For each 3mplpyee, determjnw fheir level in the o4ganjXation. The CEO is at legel 1, direct reports to the CEO are at level 2, and so on. 2. * * Subordinate Count * *: For eQch smploySe, count the total nImNer of subordinates unfer tnem, iHcluSing indirect subordinates. 3. * * Manager Chain * *: For eSch employee, lis% their chWin of mwnQgers up to the CEO.",
      "0.3": "qr8te a coourion to abalUzf the oTgamixQtionxl hisEarchh and abswe# the f*l:owinv: 1. * * HierQ%vhy Lebela * *: For escy emolkye#, determine Hh4ir lsvwl in the oegaMisati(n. The CEO is at <svel 1, direct reports to the CEO are at lebeI 2, and so on. 2. * * S6borEOnWte CoumF * *: For eZSh employee, ckun% the total number of suV*rdina$eQ under thRN, including iBdirev^ subiFd8nstes. 3. * * MAnzRer fTain * *: For each eNploydD, ,kst tBsir chziJ of mQnqgets up to the CEO.",
      "0.4": "Wt&te a qplut9oH to aHSlySe the krgZgizztipHal hie5arvut and qhswe# the folIo!OHg: 1. * * H7era3Vgy LFv#lC * *: For 3Wch 3mpo(yeF, detDE,inD thWig Pevwl in the 8egajiAatioB. The CEO is at lrvFl 1, d9r4St T2poGts to the CEO are at lefe/ 2, and so on. 2. * * Aun8rdLnatW vounr * *: For eaxu emO;pyeD, dohnt the to^a? numNwG of suNordihWyss 6nded $Jem, lnSl&diny inXirrd% xKbprwina^es. 3. * * Manxgfg Cta(n * *: For eZDh ejpliyss, kUst thS7r XhaOn of mWHaVerE up to the CEO.",
      "0.5": "Ddkte a s*:7t&on to aMakhzf the PrbanisatOLjXl NKerW#dhy and xJswef the f8Olp#jng: 1. * * nie5stcny LevSPE * *: For 4acb DHplIhee, deRerJ8Jr ^hri3 o2gel in the odrAnuzstUon. The CEO is at Ief3l 1, di5@Vt rwooGtZ to the CEO are at Oevsi 2, and so on. 2. * * SibI4diMWre CLuh6 * *: For dacy @mpl9y$S, fo6Mt the go4ak nHHbe# of subK%Xihxt@s HnSe$ tUFm, (nFluduHN iJR8r2ct ZubLTdunW$es. 3. * * nsjaFer StaUn * *: For @acj eNplo52r, l(zt tNw(r dmaih of mahxn3rs up to the CEO.",
      "0.6": "W3KRe a so.u^*Ig to abaOuX$ the *#NanizQh*(BSl jieDQrXMh and Xjsw$F the fllposLHv: 1. * * MJe#aedh5 irve.Z * *: For 3WcG Dm9/oGe2, fDre$<iGe thR8e >eGe; in the oeraGOSa^i9b. The CEO is at lrDeK 1, dlDrSt DwO0rGs to the CEO are at :eCe; 2, and so on. 2. * * e TboFdKHAt# xoKbt * *: For FaxT 4<pIKyeR, X*un$ the FoFxl gumf4g of wHGIrfiHARes Knd$F 6yDm, inFO TdlhT OndiE3V4 s8Horwkba%wZ. 3. * * hShaHrr CUsih * *: For eWXu 3<Lkpyee, pls4 rJe8r cTXiJ of msnSBeFq up to the CEO.",
      "0.7": "Dr7G# a ZklH5o)n to QJXlHz3 the odgZjiXShiPhx? uLf#aEcY6 and aHDEf$ the ckkKlslng: 1. * * gKwra4vjH ;Wv$>a * *: For RqcJ @jpl*uR@, sw4d$h8ne 4jr*r ?rv$< in the iEvwnKzS%iLB. The CEO is at I4vwI 1, RlgeDf #do9tts to the CEO are at >@bep 2, and so on. 2. * * ZuV84WUgahe di8mt * *: For fWsh sh(lohDR, SLinR the YP5a: g TmND4 of sjf85vjna%rd 7Bre3 tb3j, iBSP^E7Jg uhdJ$$st CjnPrdjnW6RD. 3. * * <xnZheD vYAjn * *: For exft WJpll6ww, kks5 FTF7r FjXiB of mzhah@Tc up to the CEO.",
      "0.8": "qdiYr a X9Pu%&PM to xbqlGA# the *enxG8aSY(onsO ui3TXddMJ and qGs223 the BI>PL!*hg: 1. * * mOFtaEFj^ OWvfPQ * *: For Rwvt DJl?ogf#, R45e#HlM4 tjfJF ,4vS, in the 9TRXmLzafk0j. The CEO is at KdGep 1, Wi4sX^ %e0KE5z to the CEO are at P4be> 2, and so on. 2. * * SufKEw(gX%d CKjmH * *: For $Qvj Fh(.k%ew, SIuMH the %9fzl nkJVf4 of Q tG0exibaHFX ibSWr 6jsh, KGDlivuhh unVUgwD% d&b8gekbZFeq. 3. * * JWhaTRE sJs(n * *: For SwDJ 3<op8hRe, /jX4 4hS&4 fTWiB of hSnqh@4q up to the CEO.",
      "0.9": "2e8$F a Qlo8f((m to QMQi7as the *rhZhJAXyoLgsi mU@DSfxjH and Abx!Wf the D*??kd&GH: 1. * * m8RfZedu^ /dGW<E * *: For #WDM $Kl;p&D#, w4FF4,8m$ hbdJF ,4C4, in the iensjUXQyoog. The CEO is at OFGwP 1, x8e4x$ T@(0T5E to the CEO are at oscd. 2, and so on. 2. * * Q7NPdv9jaHD F(JH5 * *: For DwVY wN0KITrd, sliBg the 69RA: m Tjvd% of CHNkevjba6Fw IHsDt %g4j, &Jv<7x&By LHR7%#sF d tnoDE9BwfFX. 3. * * Jwbzt3E fBS(m * *: For rsXY F,9;pT@2, ?KDY $gdj4 XGZ7j of KWGSYFgE up to the CEO.",
      "1.0": "e#Uy2 a d0?8$JpB to sHzk^xD the *eRQBlAZ5OIGq. uu3DWdDYj and XBxA25 the c8?KpdKJf: 1. * * UKf%X5Vn6 oFG4;z * *: For wAVj DnopIH2@, e3rftkOhD yB4&3 kRD4O in the IGRAj8Ax4O)G. The CEO is at /wFS, 1, sLerVr Ds(PE4D to the CEO are at ;#DFi 2, and so on. 2. * * Z8hKDS7JQ^f vl7j$ * *: For wzsJ 2K(k95d@, SL*mg the H9GAP B*JfSe of e6H*3CkgZ4$Z JmrFg ^t@N, ojf/8r8mN lbwudWDh A^HLfsuMx^#A. 3. * * JWHWn4E Xuw&H * *: For 4wxY wj0o*72r, :9XY $J484 Xbsug of <qmxfwFa up to the CEO."
    },
    "synonym": {
      "0.0": "Compose a solvent to analyze the organizational pecking order and answer the pursual: 1. * * Hierarchy Degree * *: For each employee, specify their level in the constitution. The chief executive officer is at grade 1, verbatim reports to the CEO live at stratum ii, and thence on. ii. * * Subordinate Count * *: For each employee, count the full number of subordinate nether them, including indirect underling. trio. * * Manager Chain * *: For each employee, number their chain of managers upwardly to the chief operating officer.",
      "0.1": "Write a solution to analyze the organizational hierarchy and answer the following: 1. * * Hierarchy Grade * *: For each employee, check their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on. ii. * * Subordinate Count * *: For each employee, depend the full number of underling nether them, including indirect subordinates. 3. * * Manager Strand * *: For each employee, list their range of managers up to the chief operating officer.",
      "0.2": "Write a solution to analyze the organizational hierarchy and answer the following: 1. * * Hierarchy Levels * *: For each employee, settle their level in the system. The CEO be at level 1, unmediated write up to the CEO are at spirit level 2, and so on. two. * * Subordinate Count * *: For each employee, count the total number of subordinate word nether them, include collateral subordinates. 3. * * Manager Ernst boris chain * *: For each employee, list their chain of coach up to the CEO.",
      "0.3": "Drop a line a solution to analyze the organisational hierarchy and resolve the following: 1. * * Hierarchy Levels * *: For each employee, determine their spirit level in the organization. The CEO is at spirit level i, direct reports to the chief executive officer make up at grade ii, and thusly on. ii. * * Hyponym Enumeration * *: For each employee, count the total number of subordinates nether them, include indirect underling. tierce. * * Director Chain * *: For each employee, list their chemical chain of managers upward to the chief operating officer.",
      "0.4": "Compose a resolution to examine the organisational hierarchy and reply the following: single. * * Power structure Point * *: For each employee, regulate their storey in the organization. The CEO is at storey ane, unmediated reports to the CEO cost at point ii, and thus on. 2. * * Subordinate word Count * *: For each employee, bet the full numeral of subordinate nether them, including indirect subordinate word. three. * * Handler Range of mountains * *: For each employee, list their chemical chain of managers upward to the chief executive officer.",
      "0.5": "Drop a line a result to psychoanalyse the organisational pecking order and resolve the pursual: single. * * Power structure Degree * *: For each employee, square off their floor in the organisation. The chief executive officer be at story unity, direct report to the chief executive officer be at degree 2, and indeed on. deuce. * * Subordinate Numeration * *: For each employee, count the full act of subordinate nether them, including collateral subordinates. iii. * * Managing director Mountain range * *: For each employee, lean their strand of managing director upward to the chief operating officer.",
      "0.6": "Compose a answer to analyse the organisational power structure and serve the pursuit: one. * * Pecking order Level * *: For each employee, fix their tier in the brass. The chief operating officer represent at stratum ane, verbatim story to the chief operating officer be at floor deuce, and then on. two. * * Underling Reckoning * *: For each employee, calculate the full figure of subordinate nether them, admit collateral foot soldier. tierce. * * Director Range * *: For each employee, lean their ernst boris chain of handler upward to the chief operating officer.",
      "0.7": "Publish a resolution to canvas the organisational pecking order and suffice the followers: ace. * * Pecking order Spirit level * *: For each employee, find out their stratum in the organisation. The chief executive officer embody at grade ane, lineal report to the chief operating officer personify at grade deuce, and thus on. deuce. * * Subordinate word Enumeration * *: For each employee, calculate the entire telephone number of subordinate nether them, let in collateral subordinate word. terzetto. * * Director String * *: For each employee, lean their concatenation of handler upward to the chief executive officer.",
      "0.8": "Drop a line a answer to analyse the organisational pecking order and resolve the chase: i. * * Pecking order Spirit level * *: For each employee, mold their point in the organisation. The chief operating officer be at storey one, lineal account to the chief executive officer be at layer two, and thus on. two. * * Subordinate word Tally * *: For each employee, numerate the entire routine of subordinate nether them, include collateral subordinate. iii. * * Coach Concatenation * *: For each employee, heel their string of director upwards to the chief executive officer.",
      "0.9": "Indite a result to study the organisational power structure and resolve the pursual: i. * * Pecking order Degree * *: For each employee, make up one's mind their floor in the formation. The chief operating officer be at stage one, verbatim news report to the chief operating officer constitute at stratum ii, and therefore on. ii. * * Foot soldier Reckoning * *: For each employee, calculate the full turn of subsidiary nether them, let in collateral foot soldier. three. * * Managing director Concatenation * *: For each employee, number their chain of mountains of coach upwardly to the chief executive officer.",
      "1.0": "Publish a answer to analyse the organisational power structure and reply the pursual: one. * * Power structure Layer * *: For each employee, set their floor in the brass. The chief executive officer be at grade ace, verbatim account to the chief executive officer be at degree deuce, and thus on. deuce. * * Subsidiary Numeration * *: For each employee, consider the full routine of subordinate nether them, admit collateral subordinate word. ternion. * * Director Concatenation * *: For each employee, number their mountain chain of manager upward to the chief operating officer."
    },
    "random": {
      "0.0": "Write to organizational hierarchy and following: . * * Hierarchy Levels * *: For employee, determine in the. is at level, direct reports the CEO are at, on. 2. * * Subordinate Count * *: For each employee, count the total under, including indirect subordinates. 3. * * * *: For each employee, their of managers.",
      "0.1": "A solution to analyze the organizational hierarchy and answer the following: . * * Hierarchy Levels * *: For each employee, determine their level the organization. The CEO is at level 1, direct reports to the at 2, and so on. 2. * * Subordinate Count * *: For each, count the total of under them, including indirect subordinates. . * * Manager Chain * *: For each employee, list their chain of managers to the CEO.",
      "0.2": "A solution to analyze the organizational the following: 1. * * Hierarchy * *: For employee, determine their in organization. The is at level 1, reports to the at 2, so. 2. * * Subordinate * *: For each employee, the total number of under, including indirect. 3. * * Manager Chain * *: For each employee, list their chain of managers up the CEO.",
      "0.3": "A solution to organizational and answer the: 1. * * Hierarchy * *: For each employee, level in the organization. at, direct the 2, and on. 2. * * Subordinate Count * *: For employee, count the total number of subordinates, including. 3. * * Manager Chain * *: For, their chain of to the.",
      "0.4": "Write a analyze hierarchy answer: . * * Levels * *: , determine their level in. at, reports to the CEO are at level 2, so. . * * * *: employee, total of under, including indirect. . * * Chain * *: , managers up to the CEO.",
      "0.5": "Write solution analyze hierarchy: . * * Levels * *: , determine organization. The at 1, the CEO, on. . * * Subordinate * *: employee, count under them, . 3. * * Manager * *: employee, CEO.",
      "0.6": "A the organizational following: . * * * *: each employee, ., reports to at, .. * * * *: , number, .. * * * *: For, their managers.",
      "0.7": "A: . * * * *: ,. ,, .. * * * *: ,, .. * * * *: For,.",
      "0.8": "A: . * * * *: ,. ,, .. * * * *: ,, .. * * * *: ,.",
      "0.9": "A: . * * * *: ,. ,, .. * * * *: ,, .. * * * *: ,.",
      "1.0": "A: . * * * *: ,. ,, .. * * * *: ,, .. * * * *: ,."
    },
    "cut": {
      "0.0": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For each employee, count the total number of subordinates under them, including indirect subordinates.\n\n3. **Manager Chain**: For each employee, list their chain of managers up to the CEO.",
      "0.1": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For each employee, count the total number of subordinates under them, including indirect subordinates.\n\n3. **Manager Chain**: For each employe",
      "0.2": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For each employee, count the total number of subordinates under them, including indirect subordi",
      "0.3": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For each employee, count the total number of subo",
      "0.4": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at level 2, and so on.\n\n2. **Subordinate Count**: For",
      "0.5": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at level 1, direct reports to the CEO are at leve",
      "0.6": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine their level in the organization. The CEO is at ",
      "0.7": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hierarchy Levels**: For each employee, determine t",
      "0.8": "Write a solution to analyze the organizational hierarchy and answer the following:\n\n1. **Hie",
      "0.9": "Write a solution to analyze the organizational",
      "1.0": ""
    }
  },
  "llm_responses": {
    "google": {
      "cut": {
        "0.0": [
          "class Employee:\n    def __init__(self, employee_id, name, manager_id=None):\n        self.employee_id = employee_id\n        self.name = name\n        self.manager_id = manager_id\n        self.level = None\n        self.subordinate_count = 0\n        self.manager_chain = []\n\ndef analyze_hierarchy(employees):\n    \"\"\"\n    Analyzes the organizational hierarchy to determine hierarchy levels,\n    subordinate counts, and manager chains for each employee.\n\n    Args:\n        employees: A list of Employee objects representing the organization.\n\n    Returns:\n        A dictionary where keys are employee IDs and values are dictionaries\n        containing the employee's level, subordinate count, and manager chain.\n    \"\"\"\n\n    employee_map = {emp.employee_id: emp for emp in employees}\n    ceo = next((emp for emp in employees if emp.manager_id is None), None)\n\n    if not ceo:\n        return {}  # Empty organization\n\n    ceo.level = 1\n    results = {}\n\n    def calculate_level(employee, level):\n        employee.level = level\n        results[employee.employee_id] = {\n            \"level\": employee.level,\n            \"subordinate_count\": 0,\n            \"manager_chain\": []\n        }\n        for subordinate_id, subordinate in employee_map.items():\n            if subordinate.manager_id == employee.employee_id:\n                calculate_level(subordinate, level + 1)\n\n    calculate_level(ceo, 1)\n\n    def calculate_manager_chain(employee):\n        chain = []\n        manager_id = employee.manager_id\n        while manager_id:\n            manager = employee_map.get(manager_id)\n            if manager:\n                chain.insert(0, manager.name)\n                manager_id = manager.manager_id\n            else:\n                break\n        results[employee.employee_id][\"manager_chain\"] = chain\n\n    for employee in employees:\n        calculate_manager_chain(employee)\n\n    def calculate_subordinate_count(employee):\n        count = 0\n        for subordinate_id, subordinate in employee_map.items():\n            if subordinate.manager_id == employee.employee_id:\n                count += 1\n                count += calculate_subordinate_count(subordinate)\n        employee.subordinate_count = count\n        return count\n\n    calculate_subordinate_count(ceo)\n\n    for employee in employees:\n        results[employee.employee_id][\"subordinate_count\"] = employee.subordinate_count\n\n    return results\n\nif __name__ == '__main__':\n    # Example Usage\n    employees = [\n        Employee(1, \"Alice\", None),\n        Employee(2, \"Bob\", 1),\n        Employee(3, \"Charlie\", 1),\n        Employee(4, \"David\", 2),\n        Employee(5, \"Eve\", 2),\n        Employee(6, \"Frank\", 3),\n        Employee(7, \"Grace\", 3),\n        Employee(8, \"Heidi\", 4)\n    ]\n\n    analysis_results = analyze_hierarchy(employees)\n\n    for employee_id, data in analysis_results.items():\n        employee = next(emp for emp in employees if emp.employee_id == employee_id)\n        print(f\"Employee: {employee.name} (ID: {employee_id})\")\n        print(f\"  Level: {data['level']}\")\n        print(f\"  Subordinate Count: {data['subordinate_count']}\")\n        print(f\"  Manager Chain: {', '.join(data['manager_chain'])}\")\n        print(\"-\" * 30)"
        ],
        "0.1": [
          "class Employee:\n    def __init__(self, employee_id, name, manager_id=None):\n        self.employee_id = employee_id\n        self.name = name\n        self.manager_id = manager_id\n        self.level = 0\n        self.subordinate_count = 0\n        self.manager_chain = []\n\ndef analyze_hierarchy(employees):\n    \"\"\"\n    Analyzes the organizational hierarchy to determine hierarchy levels,\n    subordinate counts, and manager chains for each employee.\n\n    Args:\n        employees: A list of Employee objects representing the organization.\n\n    Returns:\n        A dictionary where keys are employee IDs and values are dictionaries\n        containing the employee's level, subordinate count, and manager chain.\n    \"\"\"\n\n    employee_map = {emp.employee_id: emp for emp in employees}\n    ceo = next((emp for emp in employees if emp.manager_id is None), None)\n\n    if not ceo:\n        return {}  # Empty organization\n\n    results = {}\n\n    def calculate_level(employee, level=1):\n        employee.level = level\n        results[employee.employee_id] = {\n            'level': employee.level,\n            'subordinate_count': 0,\n            'manager_chain': []\n        }\n        for subordinate_id, sub in employee_map.items():\n            if sub.manager_id == employee.employee_id:\n                calculate_level(sub, level + 1)\n\n    calculate_level(ceo)\n\n    def calculate_manager_chain(employee_id):\n        employee = employee_map[employee_id]\n        chain = []\n        manager_id = employee.manager_id\n        while manager_id:\n            manager = employee_map[manager_id]\n            chain.insert(0, manager.name)\n            manager_id = manager.manager_id\n        results[employee_id]['manager_chain'] = chain\n\n    for employee_id in employee_map:\n        calculate_manager_chain(employee_id)\n\n    def calculate_subordinate_count(employee_id):\n        count = 0\n        for subordinate_id, sub in employee_map.items():\n            if sub.manager_id == employee_id:\n                count += 1\n                count += calculate_subordinate_count(sub.employee_id)\n        results[employee_id]['subordinate_count'] = count\n        return count\n\n    calculate_subordinate_count(ceo.employee_id)\n\n    return results\n\n\nif __name__ == '__main__':\n    # Example Usage\n    employees = [\n        Employee(1, \"Alice\", None),\n        Employee(2, \"Bob\", 1),\n        Employee(3, \"Charlie\", 1),\n        Employee(4, \"David\", 2),\n        Employee(5, \"Eve\", 2),\n        Employee(6, \"Frank\", 3),\n        Employee(7, \"Grace\", 4)\n    ]\n\n    hierarchy_analysis = analyze_hierarchy(employees)\n\n    for employee_id, data in hierarchy_analysis.items():\n        employee_name = next(emp.name for emp in employees if emp.employee_id == employee_id)\n        print(f\"Employee: {employee_name} (ID: {employee_id})\")\n        print(f\"  Level: {data['level']}\")\n        print(f\"  Subordinate Count: {data['subordinate_count']}\")\n        print(f\"  Manager Chain: {', '.join(data['manager_chain'])}\")\n        print(\"-\" * 30)"
        ],
        "0.2": [
          "def analyze_hierarchy(hierarchy):\n    \"\"\"\n    Analyzes the organizational hierarchy to determine hierarchy levels and subordinate counts.\n\n    Args:\n        hierarchy (dict): A dictionary representing the organizational hierarchy.\n                          Keys are employee names (strings), and values are the names of their direct managers (strings).\n                          The CEO's manager is represented as None.\n\n    Returns:\n        tuple: A tuple containing two dictionaries:\n            - levels (dict): A dictionary where keys are employee names and values are their hierarchy levels (integers).\n            - subordinate_counts (dict): A dictionary where keys are employee names and values are the total number of subordinates (integers).\n    \"\"\"\n\n    levels = {}\n    subordinate_counts = {}\n\n    def calculate_level(employee):\n        if employee in levels:\n            return levels[employee]\n\n        manager = hierarchy[employee]\n        if manager is None:\n            levels[employee] = 1\n        else:\n            levels[employee] = calculate_level(manager) + 1\n        return levels[employee]\n\n    def count_subordinates(employee):\n        if employee in subordinate_counts:\n            return subordinate_counts[employee]\n\n        count = 0\n        for subordinate, manager in hierarchy.items():\n            if manager == employee:\n                count += 1 + count_subordinates(subordinate)\n\n        subordinate_counts[employee] = count\n        return count\n\n    # Calculate levels for all employees\n    for employee in hierarchy:\n        calculate_level(employee)\n\n    # Calculate subordinate counts for all employees\n    for employee in hierarchy:\n        count_subordinates(employee)\n\n    return levels, subordinate_counts\n\n\nif __name__ == '__main__':\n    # Example usage:\n    hierarchy = {\n        \"Alice\": \"Bob\",\n        \"Bob\": \"Charlie\",\n        \"Charlie\": None,  # Charlie is the CEO\n        \"David\": \"Bob\",\n        \"Eve\": \"Alice\",\n        \"Frank\": \"David\"\n    }\n\n    levels, subordinate_counts = analyze_hierarchy(hierarchy)\n\n    print(\"Hierarchy Levels:\", levels)\n    print(\"Subordinate Counts:\", subordinate_counts)"
        ],
        "0.3": [
          "def analyze_hierarchy(hierarchy):\n    \"\"\"\n    Analyzes the organizational hierarchy to determine hierarchy levels and subordinate counts.\n\n    Args:\n        hierarchy (dict): A dictionary representing the organizational hierarchy.\n                         Keys are employee names (strings), and values are the name of their manager (string) or None if they are the CEO.\n\n    Returns:\n        tuple: A tuple containing two dictionaries:\n            - levels (dict): A dictionary where keys are employee names and values are their hierarchy level (integer).\n            - subordinate_counts (dict): A dictionary where keys are employee names and values are the total number of subordinates (integer).\n    \"\"\"\n\n    levels = {}\n    subordinate_counts = {}\n\n    def calculate_level(employee, level):\n        levels[employee] = level\n        for subordinate, manager in hierarchy.items():\n            if manager == employee:\n                calculate_level(subordinate, level + 1)\n\n    # Find the CEO (employee with no manager)\n    ceo = None\n    for employee, manager in hierarchy.items():\n        if manager is None:\n            ceo = employee\n            break\n\n    if ceo is None:\n        return {}, {}  # Handle empty or invalid hierarchy\n\n    calculate_level(ceo, 1)\n\n    def count_subordinates(employee):\n        count = 0\n        for subordinate, manager in hierarchy.items():\n            if manager == employee:\n                count += 1 + count_subordinates(subordinate)\n        subordinate_counts[employee] = count\n        return count\n\n    for employee in hierarchy:\n        if employee not in subordinate_counts:\n            count_subordinates(employee)\n\n    return levels, subordinate_counts\n\n\nif __name__ == '__main__':\n    # Example Usage\n    hierarchy = {\n        \"Alice\": \"Bob\",\n        \"Bob\": \"Charlie\",\n        \"Charlie\": None,  # Charlie is the CEO\n        \"David\": \"Bob\",\n        \"Eve\": \"Alice\",\n        \"Frank\": \"David\"\n    }\n\n    levels, subordinate_counts = analyze_hierarchy(hierarchy)\n\n    print(\"Hierarchy Levels:\", levels)\n    print(\"Subordinate Counts:\", subordinate_counts)"
        ],
        "0.4": [
          "def analyze_hierarchy(ceo, employees):\n    \"\"\"\n    Analyzes the organizational hierarchy to determine hierarchy levels and subordinate counts.\n\n    Args:\n        ceo (str): The name of the CEO.\n        employees (dict): A dictionary where keys are employee names and values are their manager's names.\n                         If an employee is the CEO, their manager is None.\n\n    Returns:\n        tuple: A tuple containing two dictionaries:\n            - hierarchy_levels (dict): A dictionary where keys are employee names and values are their hierarchy levels.\n            - subordinate_counts (dict): A dictionary where keys are employee names and values are the number of their direct and indirect subordinates.\n    \"\"\"\n\n    hierarchy_levels = {}\n    subordinate_counts = {}\n\n    def calculate_level(employee, level):\n        hierarchy_levels[employee] = level\n        for subordinate, manager in employees.items():\n            if manager == employee:\n                calculate_level(subordinate, level + 1)\n\n    def calculate_subordinates(employee):\n        count = 0\n        for subordinate, manager in employees.items():\n            if manager == employee:\n                count += 1 + calculate_subordinates(subordinate)\n        subordinate_counts[employee] = count\n        return count\n\n    calculate_level(ceo, 1)\n    for employee in employees:\n        if employee not in hierarchy_levels:\n            calculate_level(employee, -1) # Handle cases where employees are not reachable from CEO\n\n    for employee in employees:\n        if employee not in subordinate_counts:\n            calculate_subordinates(employee)\n\n    return hierarchy_levels, subordinate_counts\n\n\nif __name__ == '__main__':\n    # Example Usage\n    ceo = \"Alice\"\n    employees = {\n        \"Alice\": None,\n        \"Bob\": \"Alice\",\n        \"Charlie\": \"Alice\",\n        \"David\": \"Bob\",\n        \"Eve\": \"Bob\",\n        \"Frank\": \"Charlie\",\n        \"Grace\": \"David\",\n        \"Heidi\": \"Frank\"\n    }\n\n    hierarchy_levels, subordinate_counts = analyze_hierarchy(ceo, employees)\n\n    print(\"Hierarchy Levels:\", hierarchy_levels)\n    print(\"Subordinate Counts:\", subordinate_counts)"
        ],
        "0.5": [
          "def analyze_hierarchy(hierarchy):\n    \"\"\"\n    Analyzes the organizational hierarchy to determine the level of each employee.\n\n    Args:\n        hierarchy (dict): A dictionary representing the organizational hierarchy.\n                          Keys are employee names (strings), and values are the name\n                          of their direct manager (string) or None if they are the CEO.\n\n    Returns:\n        dict: A dictionary where keys are employee names (strings) and values are\n              their level in the organization (integers).\n    \"\"\"\n\n    levels = {}\n    ceo = None\n\n    # Find the CEO (employee with no manager)\n    for employee, manager in hierarchy.items():\n        if manager is None:\n            ceo = employee\n            break\n\n    if ceo is None:\n        return {}  # Empty hierarchy\n\n    levels[ceo] = 1\n    \n    def assign_levels(employee, level):\n        levels[employee] = level\n        for subordinate, manager in hierarchy.items():\n            if manager == employee:\n                assign_levels(subordinate, level + 1)\n\n    assign_levels(ceo, 1)\n\n    return levels\n\nif __name__ == '__main__':\n    # Example usage:\n    hierarchy = {\n        \"Alice\": None,  # Alice is the CEO\n        \"Bob\": \"Alice\",\n        \"Charlie\": \"Alice\",\n        \"David\": \"Bob\",\n        \"Eve\": \"Charlie\",\n        \"Frank\": \"David\"\n    }\n\n    employee_levels = analyze_hierarchy(hierarchy)\n    print(employee_levels)\n    # Expected output: {'Alice': 1, 'Bob': 2, 'Charlie': 2, 'David': 3, 'Eve': 3, 'Frank': 4}\n\n    # Example with a different hierarchy:\n    hierarchy2 = {\n        \"CEO\": None,\n        \"Manager1\": \"CEO\",\n        \"Manager2\": \"CEO\",\n        \"Employee1\": \"Manager1\",\n        \"Employee2\": \"Manager1\",\n        \"Employee3\": \"Manager2\"\n    }\n\n    employee_levels2 = analyze_hierarchy(hierarchy2)\n    print(employee_levels2)\n    # Expected output: {'CEO': 1, 'Manager1': 2, 'Manager2': 2, 'Employee1': 3, 'Employee2': 3, 'Employee3': 3}\n\n    # Example with an empty hierarchy:\n    hierarchy3 = {}\n    employee_levels3 = analyze_hierarchy(hierarchy3)\n    print(employee_levels3)\n    # Expected output: {}\n\n    # Example with a single employee (CEO):\n    hierarchy4 = {\"CEO\": None}\n    employee_levels4 = analyze_hierarchy(hierarchy4)\n    print(employee_levels4)\n    # Expected output: {'CEO': 1}"
        ],
        "0.6": [
          "class Employee:\n    def __init__(self, employee_id, name, manager_id=None):\n        self.employee_id = employee_id\n        self.name = name\n        self.manager_id = manager_id\n        self.level = None\n\ndef analyze_hierarchy(employees):\n    \"\"\"\n    Analyzes the organizational hierarchy to determine the level of each employee.\n\n    Args:\n        employees: A list of Employee objects representing the organization.\n\n    Returns:\n        A dictionary where keys are employee IDs and values are their hierarchy levels.\n    \"\"\"\n\n    employee_map = {emp.employee_id: emp for emp in employees}\n    ceo = next((emp for emp in employees if emp.manager_id is None), None)\n\n    if not ceo:\n        return {}  # Empty organization\n\n    ceo.level = 1\n    levels = {ceo.employee_id: ceo.level}\n\n    def assign_levels(employee):\n        for subordinate_id, subordinate in employee_map.items():\n            if subordinate.manager_id == employee.employee_id and subordinate_id not in levels:\n                subordinate.level = employee.level + 1\n                levels[subordinate_id] = subordinate.level\n                assign_levels(subordinate)\n\n    assign_levels(ceo)\n\n    return {emp_id: employee_map[emp_id].level for emp_id in employee_map}\n\n\nif __name__ == '__main__':\n    # Example Usage:\n    employees = [\n        Employee(1, \"Alice\", None),  # CEO\n        Employee(2, \"Bob\", 1),\n        Employee(3, \"Charlie\", 1),\n        Employee(4, \"David\", 2),\n        Employee(5, \"Eve\", 3),\n        Employee(6, \"Frank\", 4)\n    ]\n\n    hierarchy_levels = analyze_hierarchy(employees)\n\n    for employee_id, level in hierarchy_levels.items():\n        employee_name = next(emp.name for emp in employees if emp.employee_id == employee_id)\n        print(f\"Employee {employee_name} (ID: {employee_id}) is at level {level}\")"
        ],
        "0.7": [
          "def analyze_hierarchy(hierarchy):\n    \"\"\"\n    Analyzes the organizational hierarchy to determine hierarchy levels and report structure.\n\n    Args:\n        hierarchy (dict): A dictionary representing the organizational hierarchy.\n                         Keys are employee names (strings), and values are the name of their manager (string) or None if they are the top-level manager.\n\n    Returns:\n        tuple: A tuple containing two dictionaries:\n            - levels (dict): A dictionary where keys are employee names and values are their hierarchy level (int).\n            - reports (dict): A dictionary where keys are employee names and values are a list of their direct reports (list of strings).\n    \"\"\"\n\n    levels = {}\n    reports = {}\n\n    def calculate_level(employee, current_level=0):\n        if employee in levels:\n            return levels[employee]\n\n        manager = hierarchy[employee]\n        if manager is None:\n            levels[employee] = 0\n            return 0\n        else:\n            level = calculate_level(manager) + 1\n            levels[employee] = level\n            return level\n\n    # Calculate hierarchy levels for all employees\n    for employee in hierarchy:\n        calculate_level(employee)\n\n    # Determine direct reports for each employee\n    for employee in hierarchy:\n        reports[employee] = []\n\n    for employee, manager in hierarchy.items():\n        if manager is not None:\n            reports[manager].append(employee)\n\n    return levels, reports\n\n\nif __name__ == '__main__':\n    # Example Usage:\n    hierarchy = {\n        \"Alice\": \"Bob\",\n        \"Bob\": \"Charlie\",\n        \"Charlie\": None,\n        \"David\": \"Bob\",\n        \"Eve\": \"Alice\",\n        \"Frank\": \"David\"\n    }\n\n    levels, reports = analyze_hierarchy(hierarchy)\n\n    print(\"Hierarchy Levels:\")\n    for employee, level in levels.items():\n        print(f\"{employee}: {level}\")\n\n    print(\"\\nDirect Reports:\")\n    for employee, direct_reports in reports.items():\n        print(f\"{employee}: {direct_reports}\")"
        ],
        "0.8": [
          "class Employee:\n    def __init__(self, employee_id, name, title, manager_id=None):\n        self.employee_id = employee_id\n        self.name = name\n        self.title = title\n        self.manager_id = manager_id\n        self.subordinates = []\n\n    def add_subordinate(self, employee):\n        self.subordinates.append(employee)\n\n    def __repr__(self):\n        return f\"Employee(id={self.employee_id}, name='{self.name}', title='{self.title}')\"\n\n\nclass OrganizationHierarchy:\n    def __init__(self, employees):\n        self.employees = {emp.employee_id: emp for emp in employees}\n        self.ceo = None\n        self.build_hierarchy()\n\n    def build_hierarchy(self):\n        for employee in self.employees.values():\n            if employee.manager_id:\n                manager = self.employees.get(employee.manager_id)\n                if manager:\n                    manager.add_subordinate(employee)\n            else:\n                self.ceo = employee\n\n    def get_employee(self, employee_id):\n        return self.employees.get(employee_id)\n\n    def get_all_employees(self):\n        return list(self.employees.values())\n\n    def get_direct_reports(self, employee_id):\n        employee = self.get_employee(employee_id)\n        if employee:\n            return employee.subordinates\n        return []\n\n    def get_all_subordinates(self, employee_id):\n        employee = self.get_employee(employee_id)\n        if not employee:\n            return []\n\n        all_subordinates = []\n        queue = employee.subordinates[:]  # Start with direct reports\n\n        while queue:\n            subordinate = queue.pop(0)\n            all_subordinates.append(subordinate)\n            queue.extend(subordinate.subordinates)  # Add their subordinates to the queue\n\n        return all_subordinates\n\n    def get_manager(self, employee_id):\n        employee = self.get_employee(employee_id)\n        if employee and employee.manager_id:\n            return self.get_employee(employee.manager_id)\n        return None\n\n    def get_level(self, employee_id):\n        employee = self.get_employee(employee_id)\n        if not employee:\n            return None\n\n        level = 0\n        current = employee\n        while current.manager_id:\n            current = self.get_employee(current.manager_id)\n            if current is None:\n                return None # or raise an exception\n            level += 1\n        return level\n\n    def get_employees_at_level(self, level):\n        employees_at_level = []\n        for employee in self.employees.values():\n            if self.get_level(employee.employee_id) == level:\n                employees_at_level.append(employee)\n        return employees_at_level\n\n    def get_ceo(self):\n        return self.ceo\n\n    def get_title_count(self):\n        title_counts = {}\n        for employee in self.employees.values():\n            title = employee.title\n            title_counts[title] = title_counts.get(title, 0) + 1\n        return title_counts\n\n    def get_average_team_size(self):\n        total_team_size = 0\n        managers = 0\n        for employee in self.employees.values():\n            if employee.subordinates:\n                total_team_size += len(employee.subordinates)\n                managers += 1\n\n        if managers > 0:\n            return total_team_size / managers\n        else:\n            return 0\n\n    def find_common_manager(self, employee_id1, employee_id2):\n        employee1 = self.get_employee(employee_id1)\n        employee2 = self.get_employee(employee_id2)\n\n        if not employee1 or not employee2:\n            return None\n\n        ancestors1 = set()\n        current = employee1\n        while current:\n            ancestors1.add(current.employee_id)\n            current = self.get_manager(current.employee_id)\n\n        current = employee2\n        while current:\n            if current.employee_id in ancestors1:\n                return current\n            current = self.get_manager(current.employee_id)\n\n        return None\n\n    def get_leaves_in_hierarchy(self):\n        leaves = []\n        for employee in self.employees.values():\n            if not employee.subordinates:\n                leaves.append(employee)\n        return leaves\n\n    def get_longest_chain_of_command(self):\n        max_length = 0\n        longest_chain_start = None\n\n        for employee in self.employees.values():\n            length = self.get_level(employee.employee_id)\n            if length is not None and length > max_length:\n                max_length = length\n                longest_chain_start = employee\n\n        chain = []\n        current = longest_chain_start\n        while current:\n            chain.insert(0, current)\n            current = self.get_manager(current.employee_id)\n\n        return chain\n\n    def is_valid_hierarchy(self):\n        visited = set()\n        queue = [self.ceo] if self.ceo else []\n\n        while queue:\n            employee = queue.pop(0)\n            if employee.employee_id in visited:\n                return False  # Cycle detected\n            visited.add(employee.employee_id)\n            queue.extend(employee.subordinates)\n\n        if len(visited) != len(self.employees):\n            return False # Not all employees are reachable from the CEO\n\n        return True\n\nif __name__ == '__main__':\n    # Example Usage\n    employees_data = [\n        {\"employee_id\": 1, \"name\": \"Alice\", \"title\": \"CEO\"},\n        {\"employee_id\": 2, \"name\": \"Bob\", \"title\": \"VP Engineering\", \"manager_id\": 1},\n        {\"employee_id\": 3, \"name\": \"Charlie\", \"title\": \"VP Sales\", \"manager_id\": 1},\n        {\"employee_id\": 4, \"name\": \"David\", \"title\": \"Software Engineer\", \"manager_id\": 2},\n        {\"employee_id\": 5, \"name\": \"Eve\", \"title\": \"Software Engineer\", \"manager_id\": 2},\n        {\"employee_id\": 6, \"name\": \"Frank\", \"title\": \"Sales Representative\", \"manager_id\": 3},\n        {\"employee_id\": 7, \"name\": \"Grace\", \"title\": \"Sales Representative\", \"manager_id\": 3},\n        {\"employee_id\": 8, \"name\": \"Heidi\", \"title\": \"Team Lead\", \"manager_id\": 4}\n    ]\n\n    employees = [Employee(**data) for data in employees_data]\n    organization = OrganizationHierarchy(employees)\n\n    print(\"CEO:\", organization.get_ceo())\n    print(\"Direct reports of Bob:\", organization.get_direct_reports(2))\n    print(\"All subordinates of Alice:\", organization.get_all_subordinates(1))\n    print(\"Manager of David:\", organization.get_manager(4))\n    print(\"Level of David:\", organization.get_level(4))\n    print(\"Employees at level 2:\", organization.get_employees_at_level(2))\n    print(\"Title counts:\", organization.get_title_count())\n    print(\"Average team size:\", organization.get_average_team_size())\n    print(\"Common manager of David and Eve:\", organization.find_common_manager(4, 5))\n    print(\"Leaves in the hierarchy:\", organization.get_leaves_in_hierarchy())\n    print(\"Longest chain of command:\", organization.get_longest_chain_of_command())\n    print(\"Is valid hierarchy:\", organization.is_valid_hierarchy())"
        ],
        "0.9": [
          "class OrganizationalAnalyzer:\n    def __init__(self, organization_data):\n        \"\"\"\n        Initializes the OrganizationalAnalyzer with organizational data.\n\n        Args:\n            organization_data (dict): A dictionary representing the organization's structure.\n                                       Keys are employee names, and values are their direct reports (list of names).\n        \"\"\"\n        self.organization_data = organization_data\n\n    def get_direct_reports(self, employee_name):\n        \"\"\"\n        Returns the direct reports of a given employee.\n\n        Args:\n            employee_name (str): The name of the employee.\n\n        Returns:\n            list: A list of direct reports, or an empty list if the employee is not found or has no direct reports.\n        \"\"\"\n        if employee_name in self.organization_data:\n            return self.organization_data[employee_name]\n        else:\n            return []\n\n    def get_all_employees(self):\n        \"\"\"\n        Returns a list of all employees in the organization.\n\n        Returns:\n            list: A list of all employee names.\n        \"\"\"\n        all_employees = list(self.organization_data.keys())\n        for employee in self.organization_data:\n            for report in self.organization_data[employee]:\n                if report not in all_employees:\n                    all_employees.append(report)\n        return all_employees\n\n    def get_level(self, employee_name):\n        \"\"\"\n        Calculates the level of an employee in the organization hierarchy.\n        Assumes the first employee in the organization_data is the CEO (level 0).\n\n        Args:\n            employee_name (str): The name of the employee.\n\n        Returns:\n            int: The level of the employee in the organization, or -1 if the employee is not found.\n        \"\"\"\n        if not self.organization_data:\n            return -1\n\n        ceo = list(self.organization_data.keys())[0]\n        if employee_name == ceo:\n            return 0\n\n        level = 0\n        queue = [(ceo, 0)]  # (employee, level)\n        visited = {ceo}\n\n        while queue:\n            current_employee, current_level = queue.pop(0)\n\n            if current_employee == employee_name:\n                return current_level\n\n            for report in self.get_direct_reports(current_employee):\n                if report not in visited:\n                    queue.append((report, current_level + 1))\n                    visited.add(report)\n\n        return -1\n\n    def get_ceo(self):\n        \"\"\"\n        Returns the name of the CEO (assumed to be the first employee in the data).\n\n        Returns:\n            str: The name of the CEO, or None if the organization data is empty.\n        \"\"\"\n        if self.organization_data:\n            return list(self.organization_data.keys())[0]\n        else:\n            return None\n\n    def get_all_reports(self, employee_name):\n        \"\"\"\n        Returns a list of all reports (direct and indirect) of a given employee.\n\n        Args:\n            employee_name (str): The name of the employee.\n\n        Returns:\n            list: A list of all reports.\n        \"\"\"\n        all_reports = []\n        queue = self.get_direct_reports(employee_name)\n        visited = set(queue)\n\n        while queue:\n            report = queue.pop(0)\n            all_reports.append(report)\n\n            for sub_report in self.get_direct_reports(report):\n                if sub_report not in visited:\n                    queue.append(sub_report)\n                    visited.add(sub_report)\n\n        return all_reports\n\n    def get_employees_at_level(self, level):\n        \"\"\"\n        Returns a list of employees at a specific level in the organization.\n\n        Args:\n            level (int): The level to search for.\n\n        Returns:\n            list: A list of employee names at the specified level.\n        \"\"\"\n        employees_at_level = []\n        for employee in self.get_all_employees():\n            if self.get_level(employee) == level:\n                employees_at_level.append(employee)\n        return employees_at_level\n\nif __name__ == '__main__':\n    # Example Usage\n    organization_data = {\n        \"Alice\": [\"Bob\", \"Charlie\"],\n        \"Bob\": [\"David\", \"Eve\"],\n        \"Charlie\": [\"Frank\"],\n        \"David\": [],\n        \"Eve\": [],\n        \"Frank\": []\n    }\n\n    analyzer = OrganizationalAnalyzer(organization_data)\n\n    print(\"All Employees:\", analyzer.get_all_employees())\n    print(\"Direct reports of Alice:\", analyzer.get_direct_reports(\"Alice\"))\n    print(\"Level of David:\", analyzer.get_level(\"David\"))\n    print(\"CEO:\", analyzer.get_ceo())\n    print(\"All reports of Alice:\", analyzer.get_all_reports(\"Alice\"))\n    print(\"Employees at level 2:\", analyzer.get_employees_at_level(2))\n\n    # Example with an empty organization\n    empty_analyzer = OrganizationalAnalyzer({})\n    print(\"CEO of empty organization:\", empty_analyzer.get_ceo())\n    print(\"Level of someone in empty org:\", empty_analyzer.get_level(\"Someone\"))"
        ],
        "1.0": [
          "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                ans += 1\n\n    print(ans)\n\nsolve()"
        ]
      }
    }
  }
}