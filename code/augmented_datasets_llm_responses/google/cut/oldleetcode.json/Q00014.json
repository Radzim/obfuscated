{
  "post_href": "https://leetcode.com/problems/binary-tree-level-order-traversal/discuss/2790811/Python-solution",
  "python_solutions": "class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        levels = []\n        \n        def order(node, level):\n            if level >= len(levels):\n                levels.append([])\n            \n            if node:\n                levels[level].append(node.val)\n            \n                if node.left:\n                    order(node.left, level + 1)\n                \n                if node.right:\n                    order(node.right, level + 1)\n        \n        if not root:\n            return []\n        \n        order(root, 0)\n        return levels",
  "slug": "binary-tree-level-order-traversal",
  "post_title": "Python solution",
  "user": "maomao1010",
  "upvotes": 0,
  "views": 3,
  "problem_title": "binary tree level order traversal",
  "number": 102,
  "acceptance": 0.634,
  "difficulty": "Medium",
  "__index_level_0__": 613,
  "question": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n  Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\nExample 2:\nInput: root = [1]\nOutput: [[1]]\nExample 3:\nInput: root = []\nOutput: []\n  Constraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-1000 <= Node.val <= 1000",
  "augmented_questions": {
    "keyboard": {
      "0.0": "Given the root of a binary tree, return the level order traversal of its nodes ' values. (i. e. , from left to right, level by level ).",
      "0.1": "GiFen the root of a binary tree, returh the level order traversal of its nodes ' valu4s. (i. e. , from left to right, level by ievel ).",
      "0.2": "Given the Eoot of a binary tree, re5urH the level order traversal of its nodes ' val7Fs. (i. e. , Erom left to #ight, lfvel by leBel ).",
      "0.3": "Given the Go(t of a ninaDy %rwe, re6irn the peBel order trZvWraal of its jodrs ' vw.ues. (i. e. , from Oebt to riRJt, level by ldvei ).",
      "0.4": "GiDej the riPt of a FiMa4y 4Dee, rstjrg the lrveK order rgaferzal of its n*dRs ' vakkFs. (i. e. , Tro< leb% to figh$, l$vWl by leFep ).",
      "0.5": "VivwH the 5o8t of a binxET hre$, r3YurB the leb$; 8gfer RfaFersq< of its JoE2s ' vzlkDs. (i. e. , fF*m lDvt to %iytt, legwi by K2veK ).",
      "0.6": "VjFen the 4o9R of a viHQey hrW$, $et6dh the Krvdl irVeg YFwvsEsa> of its noC$w ' va/HdW. (i. e. , Vr9, lrE6 to rJfgt, lDvR> by ievfk ).",
      "0.7": "GOC3G the %(o% of a gjmQEy tg$F, $sG6rb the pWbe; *fdF% %rAceeWqk of its n0W4x ' DXiheD. (i. e. , f30n keCR to tLNut, l2crK by OFv$o ).",
      "0.8": "GlCdM the F)*Y of a b7mX4t ^gdW, 4F4j#n the PFv$p )#S4r $%qgRrqz? of its j*dsE ' fZ.8ws. (i. e. , r%p< idDY to G7gBf, lDbw: by o$dSl ).",
      "0.9": "b&DdJ the d(I$ of a n8GSej feS4, #DHiTH the /@G2i (4R4T H#ACSFCWK of its MPf2Z ' csOiwZ. (i. e. , G%pN ;3dg to f7rj$, ,WG@; by ;rcwK ).",
      "1.0": "t7CFH the E*kG of a f*BZf% F444, Gw$ItB the ?SDdP 0TVwg rfAd2$zsp of its Blv3a ' bA.ISw. (i. e. , BTi, ircy to tlFGG, ?sf$? by k$BSk )."
    },
    "synonym": {
      "0.0": "Ease up the root of a binary tree, return the level order traversal of it node ' value. (i. e. , from entrust to compensate, story by level ).",
      "0.1": "Given the root of a binary tree, return the level order traverse of its nodes ' values. (i. e. , from allow for to right, level by floor ).",
      "0.2": "Given the root of a binary tree, repay the level parliamentary procedure traversal of its nodes ' values. (1. east. , from provide to right, level by level ).",
      "0.3": "Given the root of a binary tree diagram, return the level rules of order traversal of information technology node ' value. (ane. tocopherol. , from left to right, layer by level ).",
      "0.4": "Give the root of a binary tree, render the degree orderliness traverse of information technology node ' value. (1. einsteinium. , from leave to redress, level by level ).",
      "0.5": "Give the root of a binary sir herbert beerbohm tree, reelect the horizontal surface edict traverse of it node ' values. (one. tocopherol. , from leave to rectify, stage by stage ).",
      "0.6": "Pass on the theme of a binary sir herbert beerbohm tree, render the spirit level purchase order traverse of information technology thickening ' value. (ane. e. , from leave to compensate, stratum by grade ).",
      "0.7": "Give the solution of a binary tree diagram, rejoin the stratum ordering traverse of information technology thickening ' value. (1. tocopherol. , from give to redress, storey by grade ).",
      "0.8": "Pass the stem of a binary sir herbert beerbohm tree, yield the stage purchase order traverse of information technology node ' note value. (ane. vitamin e. , from leave to compensate, storey by storey ).",
      "0.9": "Throw the solution of a binary sir herbert beerbohm tree, pass the grade order of magnitude traverse of information technology node ' value. (one. east. , from go away to correct, horizontal surface by degree ).",
      "1.0": "Give the base of a binary tree diagram, turn back the horizontal surface purchase order traverse of information technology thickening ' value. (ane. einsteinium. , from leave alone to correct, point by grade )."
    },
    "random": {
      "0.0": "Given the root, level order traversal of '. (. e. , from left to, level by level ).",
      "0.1": "The root of a binary tree, return the level order traversal of nodes ' values. (i. e. , from right, level by level ).",
      "0.2": "The root a tree, return the level order traversal its nodes '. (i. e. , left to right, level level ).",
      "0.3": "The root of binary tree, return the order traversal of '. (. e. , left right, level ).",
      "0.4": "Given of tree, the level its ' values. (. ., left to right, level ).",
      "0.5": "The root a tree, the its '. (. ., from to, ).",
      "0.6": "The, nodes '. (. ., left right, ).",
      "0.7": "The, '. (. ., , ).",
      "0.8": "The, '. (. ., , ).",
      "0.9": "The, '. (. ., , ).",
      "1.0": "The, '. (. ., , )."
    },
    "cut": {
      "0.0": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
      "0.1": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, lev",
      "0.2": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left ",
      "0.3": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e",
      "0.4": "Given the root of a binary tree, return the level order traversal of its nodes'",
      "0.5": "Given the root of a binary tree, return the level order traversal ",
      "0.6": "Given the root of a binary tree, return the level or",
      "0.7": "Given the root of a binary tree, return",
      "0.8": "Given the root of a binary",
      "0.9": "Given the roo",
      "1.0": ""
    }
  },
  "llm_responses": {
    "google": {
      "cut": {
        "0.0": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(current_level)\n\n    return result"
        ],
        "0.1": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(current_level)\n\n    return result"
        ],
        "0.2": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(current_level)\n\n    return result"
        ],
        "0.3": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(current_level)\n\n    return result"
        ],
        "0.4": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(current_level)\n\n    return result"
        ],
        "0.5": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(current_level)\n\n    return result"
        ],
        "0.6": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n    level = 0\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(current_level)\n        level += 1\n\n    return result"
        ],
        "0.7": [
          "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef diameterOfBinaryTree(root):\n    diameter = 0\n\n    def height(node):\n        nonlocal diameter\n        if not node:\n            return 0\n\n        left_height = height(node.left)\n        right_height = height(node.right)\n\n        diameter = max(diameter, left_height + right_height)\n\n        return 1 + max(left_height, right_height)\n\n    height(root)\n    return diameter"
        ],
        "0.8": [
          "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef inorder_traversal(root):\n    \"\"\"\n    Performs an inorder traversal of a binary tree.\n\n    Args:\n        root: The root node of the binary tree.\n\n    Returns:\n        A list containing the values of the nodes in inorder.\n    \"\"\"\n    result = []\n    if root:\n        result.extend(inorder_traversal(root.left))\n        result.append(root.val)\n        result.extend(inorder_traversal(root.right))\n    return result\n\ndef preorder_traversal(root):\n    \"\"\"\n    Performs a preorder traversal of a binary tree.\n\n    Args:\n        root: The root node of the binary tree.\n\n    Returns:\n        A list containing the values of the nodes in preorder.\n    \"\"\"\n    result = []\n    if root:\n        result.append(root.val)\n        result.extend(preorder_traversal(root.left))\n        result.extend(preorder_traversal(root.right))\n    return result\n\ndef postorder_traversal(root):\n    \"\"\"\n    Performs a postorder traversal of a binary tree.\n\n    Args:\n        root: The root node of the binary tree.\n\n    Returns:\n        A list containing the values of the nodes in postorder.\n    \"\"\"\n    result = []\n    if root:\n        result.extend(postorder_traversal(root.left))\n        result.extend(postorder_traversal(root.right))\n        result.append(root.val)\n    return result\n\ndef level_order_traversal(root):\n    \"\"\"\n    Performs a level order traversal of a binary tree.\n\n    Args:\n        root: The root node of the binary tree.\n\n    Returns:\n        A list of lists, where each inner list contains the values of the nodes at a specific level.\n    \"\"\"\n    if not root:\n        return []\n\n    result = []\n    queue = [root]\n\n    while queue:\n        level_values = []\n        level_size = len(queue)\n\n        for _ in range(level_size):\n            node = queue.pop(0)\n            level_values.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(level_values)\n\n    return result\n\ndef tree_height(root):\n    \"\"\"\n    Calculates the height of a binary tree.\n\n    Args:\n        root: The root node of the binary tree.\n\n    Returns:\n        The height of the tree.\n    \"\"\"\n    if not root:\n        return 0\n    else:\n        left_height = tree_height(root.left)\n        right_height = tree_height(root.right)\n        return max(left_height, right_height) + 1\n\ndef is_balanced(root):\n    \"\"\"\n    Checks if a binary tree is balanced.\n\n    Args:\n        root: The root node of the binary tree.\n\n    Returns:\n        True if the tree is balanced, False otherwise.\n    \"\"\"\n    def height(node):\n        if not node:\n            return 0\n        left_height = height(node.left)\n        if left_height == -1:\n            return -1\n        right_height = height(node.right)\n        if right_height == -1:\n            return -1\n        if abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n\n    return height(root) != -1\n\ndef is_bst(root):\n    \"\"\"\n    Checks if a binary tree is a Binary Search Tree (BST).\n\n    Args:\n        root: The root node of the binary tree.\n\n    Returns:\n        True if the tree is a BST, False otherwise.\n    \"\"\"\n    def is_bst_helper(node, min_val, max_val):\n        if not node:\n            return True\n\n        if node.val <= min_val or node.val >= max_val:\n            return False\n\n        return (is_bst_helper(node.left, min_val, node.val) and\n                is_bst_helper(node.right, node.val, max_val))\n\n    return is_bst_helper(root, float('-inf'), float('inf'))\n\ndef find_node(root, val):\n    \"\"\"\n    Finds a node with a given value in a binary tree.\n\n    Args:\n        root: The root node of the binary tree.\n        val: The value to search for.\n\n    Returns:\n        The TreeNode with the given value if found, None otherwise.\n    \"\"\"\n    if not root:\n        return None\n\n    if root.val == val:\n        return root\n\n    left_result = find_node(root.left, val)\n    if left_result:\n        return left_result\n\n    right_result = find_node(root.right, val)\n    return right_result\n\ndef insert_node_bst(root, val):\n    \"\"\"\n    Inserts a new node with the given value into a Binary Search Tree (BST).\n\n    Args:\n        root: The root node of the BST.\n        val: The value to insert.\n\n    Returns:\n        The root of the updated BST.\n    \"\"\"\n    if not root:\n        return TreeNode(val)\n\n    if val < root.val:\n        root.left = insert_node_bst(root.left, val)\n    else:\n        root.right = insert_node_bst(root.right, val)\n\n    return root\n\ndef delete_node_bst(root, val):\n    \"\"\"\n    Deletes a node with the given value from a Binary Search Tree (BST).\n\n    Args:\n        root: The root node of the BST.\n        val: The value to delete.\n\n    Returns:\n        The root of the updated BST.\n    \"\"\"\n    if not root:\n        return None\n\n    if val < root.val:\n        root.left = delete_node_bst(root.left, val)\n    elif val > root.val:\n        root.right = delete_node_bst(root.right, val)\n    else:\n        # Node to be deleted found\n        # Case 1: Node has no children\n        if not root.left and not root.right:\n            return None\n\n        # Case 2: Node has one child\n        if not root.left:\n            return root.right\n        if not root.right:\n            return root.left\n\n        # Case 3: Node has two children\n        # Find the inorder successor (smallest node in the right subtree)\n        min_node = root.right\n        while min_node.left:\n            min_node = min_node.left\n\n        # Copy the inorder successor's value to this node\n        root.val = min_node.val\n\n        # Delete the inorder successor\n        root.right = delete_node_bst(root.right, min_node.val)\n\n    return root"
        ],
        "0.9": [
          "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                ans += 1\n\n    print(ans)\n\nsolve()"
        ],
        "1.0": [
          "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                ans += 1\n\n    print(ans)\n\nsolve()"
        ]
      }
    }
  }
}