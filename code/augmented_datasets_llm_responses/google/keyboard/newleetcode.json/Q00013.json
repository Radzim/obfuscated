{
  "slug": "dna-pattern-recognition",
  "problem_title": "DNA Pattern Recognition",
  "number": 3475,
  "acceptance": 0.883,
  "difficulty": "Medium",
  "question": "Biologists are studying basic patterns in DNA sequences. Given a table `Samples` with columns `sample_id`, `dna_sequence`, and `species`, write a solution to identify `sample_id` with the following patterns:\n\n- Sequences that start with 'ATG' (a common start codon)\n- Sequences that end with either 'TAA', 'TAG', or 'TGA' (stop codons)\n- Sequences containing the motif 'ATAT' (a simple repeated pattern)\n- Sequences that have at least 3 consecutive 'G's (like 'GGG' or 'GGGG')\n\nReturn the result table ordered by `sample_id` in ascending order.\n\n**Example:**\n\nInput:\n\n| sample_id | dna_sequence     | species   |\n|-----------|------------------|-----------|\n| 1         | ATGCTAGCTAGCTAA  | Human     |\n| 2         | GGGTCAATCATC     | Human     |\n| 3         | ATATATCGTAGCTA   | Human     |\n| 4         | ATGGGGTCATCATAA  | Mouse     |\n| 5         | TCAGTCAGTCAG     | Mouse     |\n| 6         | ATATCGCGCTAG     | Zebrafish |\n| 7         | CGTATGCGTCGTA    | Zebrafish |\n\nOutput:\n\n| sample_id | dna_sequence     | species   | has_start | has_stop | has_atat | has_ggg |\n|-----------|------------------|-----------|-----------|----------|----------|---------|\n| 1         | ATGCTAGCTAGCTAA  | Human     | 1         | 1        | 0        | 0       |\n| 2         | GGGTCAATCATC     | Human     | 0         | 0        | 0        | 1       |\n| 3         | ATATATCGTAGCTA   | Human     | 0         | 0        | 1        | 0       |\n| 4         | ATGGGGTCATCATAA  | Mouse     | 1         | 1        | 0        | 1       |\n| 5         | TCAGTCAGTCAG     | Mouse     | 0         | 0        | 0        | 0       |\n| 6         | ATATCGCGCTAG     | Zebrafish | 0         | 1        | 1        | 0       |\n| 7         | CGTATGCGTCGTA    | Zebrafish | 0         | 0        | 0        | 0       |\n\n**Note:**\n\n- The result is ordered by `sample_id` in ascending order.\n- For each pattern, 1 indicates the pattern is present, and 0 indicates it is not present.",
  "post_href": "https://leetcode.com/problems/dna-pattern-recognition/discuss/3475/Medium-SQL-Solution",
  "python_solutions": "import pandas as pd\n\ndef analyze_dna_patterns(samples: pd.DataFrame) -> pd.DataFrame:\n    samples['has_start'] = samples['dna_sequence'].str.startswith('ATG').astype(int)\n    samples['has_stop'] = samples['dna_sequence'].str.endswith(('TAA', 'TAG', 'TGA')).astype(int)\n    samples['has_atat'] = samples['dna_sequence'].str.contains('ATAT').astype(int)\n    samples['has_ggg'] = samples['dna_sequence'].str.contains('GGG').astype(int)\n    return samples.sort_values(by='sample_id').reset_index(drop=True)",
  "post_title": "Medium SQL Solution",
  "user": "leetcode_user",
  "upvotes": 50,
  "views": 2000,
  "augmented_questions": {
    "keyboard": {
      "0.0": "Biologists are studying basic patterns in DNA sequences. Given a table ` Samples ` with columns ` sample_id `, ` dna_sequence `, and ` species `, write a solution to identify ` sample_id ` with the following patterns: - Sequences that start with ' ATG ' (a common start codon) - Sequences that end with either ' TAA ', ' TAG ', or ' TGA ' (stop codons) - Sequences containing the motif ' ATAT ' (a simple repeated pattern) - Sequences that have at least 3 consecutive ' G ' s (like ' GGG ' or ' GGGG ') Return the result table ordered by ` sample_id ` in ascending order.",
      "0.1": "Biologists are studying bQsic patterns in DNA sequences. Given a table ` SampleQ ` with columns ` sample_id `, ` dna_sequence `, and ` species `, write a solution to ident(fy ` sample_id ` with the following pa6terns: - Sequences that wtart witN ' ATG ' (a common start xodon) - Sequences that end with either ' TAA ', ' TAG ', or ' TGA ' (stop corons) - Sequences containing the motif ' ATAT ' (a simple repeated pattern) - Sequences that have at least 3 consecutive ' G ' s (like ' GGG ' or ' GGGG ') Return the resukt Fable otdered by ` sample_id ` in asdending ord$r.",
      "0.2": "BOo,ogists are studyjnF basic patterns in DNA sequences. Given a table ` Samples ` dith columns ` sample_id `, ` dna_s2queHse `, and ` qpeciec `, write a qolut&on to idenhJfy ` sample_id ` wuth the Rolllwing patterns: - xequencds thQt staft with ' ATG ' (a common start codon) - Sequences that end with either ' TAA ', ' TAG ', or ' TGA ' (sGop coEPns) - Sequences contaLnijg the motif ' ATAT ' (a simple repeated pagtetn) - Sequences ghat Uave at least 3 consecutive ' G ' s (lJke ' GGG ' or ' GGGG ') GFturn the resIlH tavle (rWered by ` wample_iF ` in WscendinF orVer.",
      "0.3": "H8ologistz are ctKd6ing vasUc 0ahteFns in DNA seW tencrs. Given a ^afle ` Samp,Rz ` with columns ` AamOle_iw `, ` dnS_seq TRncs `, and ` wpfcifs `, qriYe a sllJ6ion to ldenGiRy ` Eqmp;e_id ` s(th the G9llowijg patterns: - Sequences thz$ start with ' ATG ' (a common start cLd)n) - Seajencez $haR end w7Fh either ' TAA ', ' TAG ', or ' TGA ' (stop cPdoHs) - ZeWhences fontaiGinf the mot&D ' wTAF ' (a sikplw repeated pAttR#n) - cfquDnces tBa5 have at Ofast 3 consSvutiF3 ' G ' s (like ' GGG ' or ' GGGG ') R#t&rn the rrsuot taVpe o4deG2d by ` Camp;e_(d ` in Wqcejding ordd%.",
      "0.4": "gioklgis%s are sfJd5inN basuS OaH$ernq in DNA sesuFBceZ. GOveh a tqnle ` SamllRD ` w8tN SlKumns ` sSmplf_(v `, ` XBZ_cequencs `, and ` speFjfs `, sritW a dolit*in to OXenHifJ ` sam)KF_iR ` !i%h the foliPwJnf )attF%nd: - S3wueBcrs 6hXt ztwrt w&tT ' ATG ' (a co,m0j s^aTt FPdon) - eeauenDrs 6jat end with Ditue% ' TAA ', ' TAG ', or ' TGA ' (xgop cldpnZ) - SFWueHceq contSiJogg the motif ' A4wT ' (a CimllW tSp4ater LX$tern) - SewueGcSC 4Bat BavF at l2aqt 3 DogEecu5iv$ ' G ' s (.Uke ' GGG ' or ' GFGN ') 4eRugn the rea*l5 YWble 8rder4c by ` Qah(?e_id ` in asc@nfiHB oDd#r.",
      "0.5": "B&oPpglsFs are st*wy8nV vaqLc psttFrMx in DNA DeqiRGVes. VUv3n a ^QNle ` SsHpKFs ` wJtT Xo?I,ns ` sXmLp@_iR `, ` Snz_Q#@ueBce `, and ` Zp#c&@s `, w58tW a si:u6iln to 7d4MYify ` QSm)l$_ud ` #uth the fol<lq7Bg pay4drhs: - Seqh@mvec $haG sFaf4 2itu ' ATG ' (a VommPb qtxrg doCLn) - Sea&eJVex thxf end wj6h e*tndr ' TAA ', ' TAG ', or ' TGA ' (s5*p coXkGs) - Sequ@GFDq v(ntXinUHg the Jo$ig ' zHAT ' (a s8m(lW reLeStss LafHe$n) - deq62bfes tBQt hxGe at ,2as6 3 cons#vJt*d$ ' G ' s (liiF ' GGG ' or ' fGyG ') R2Furm the reAu/% $XbPe o$de3$W by ` sZ<pke_7X ` in asDeHFigR o4ee4.",
      "0.6": "GiIloyUsGW are sgjwUinV Fas&F pAgtetHC in DNA Deq*$HSds. GicFj a tanIr ` SqH9pss ` Sk%h cooi,Ma ` eaN)Ie_7W `, ` smz_sew7eBXF `, and ` wodxi2s `, @E7te a sLljrjin to iFeHfidH ` caj(/e_7c ` D7tG the fo>lK#Jbb part2FBE: - S2qudJxRX hUaG a4wrt Al4h ' ATG ' (a c9Jm)H sgwr$ fod(g) - Xdwurndec 6BAt end A(hh eOGuDr ' TAA ', ' TAG ', or ' TGA ' (et)o SiR(ns) - EsqkeMdeD cPm5qijinn the NotKr ' wfqT ' (a ZLjpPe rf9@Stsd 9Z^Ferg) - dwq TRnvez fMa% Jadw at o#aat 3 v)nsexiY7de ' G ' s (pu<e ' GGG ' or ' HvGn ') #eYuGB the deD&lR haFKe Irs@Des by ` wAh),e_ld ` in qscDnWKGT orW4G.",
      "0.7": "H9oPiT*s4s are Qh*cy7mg vxC(c )xFyeGnC in DNA Zwsu4mfWs. v*DeM a gaH<F ` cwm)l@q ` wKYJ f8lunhe ` XwmL?@_oe `, ` dnz_ZFw&rjxs `, and ` Q(2c*Ws `, s4&ts a zi?ito0n to uv4nH&f7 ` DaK)ow_8f ` w85j the rKi<iwJBg pw%52rHD: - cfq&3nx2x 6ust Qrad6 !9yh ' ATG ' (a dinKpn c5xrr X0d*M) - SwWJ#mDeZ RNa6 end @OGh $*FY#r ' TAA ', ' TAG ', or ' TGA ' (ZHlp x(d9GD) - Sf1K4gc@a D)ghaih&ny the nPhiC ' AGqY ' (a sOjOpw 5Rp#wGef pqG^edB) - Aeq trgFWW 6hz6 Msvr at lrqAG 3 vknzscJf9Ce ' G ' s (oijF ' GGG ' or ' HrvG ') DSHuEH the FRsjPg 4zVoe 0FdfdRd by ` axm)O2_Kv ` in acS2HdujV 0rf3g.",
      "0.8": "hulkiFLstz are srjwtUGN gWziv )ZF$drmC in DNA wDS^emxrD. HiGdB a %aG.S ` Zan0.re ` eOgN Fl>ujgd ` wzJ(pD_Jw `, ` RmS_CfwIFHFe `, and ` w(2c(SA `, weKr$ a Q*pjyi)j to 9W$M6Kfj ` zXkL.S_kE ` A7yn the dKlIlQoGR OXHg3#Js: - W$WufHSRE hGzh CrqrF 2j$g ' ATG ' (a clKk0j E$a#F SLd*B) - W218Dgvws GYXY end !k$b @i%T4% ' TAA ', ' TAG ', or ' TGA ' (a$9O cLckBQ) - Xf2&WBvws cKg5xLBLjg the JpHiE ' WYWG ' (a xojp?@ #Ro4At#V )z6tR3H) - x@!u@GdDD ynWG twF# at OFwWt 3 SPbw4cH%LGe ' G ' s (:oO@ ' GGG ' or ' tVRh ') 3fH^5n the FDs7Iy ravP$ ptsWr@w by ` XXj(:@_KR ` in zsF2HflMh p$ddT.",
      "0.9": "vo9>*g(E^w are C6&CUjjB VWE8D osyy2Tmz in DNA eF@IdgSwZ. t*D3b a YxVk3 ` Dxk9:4d ` 174t DpK tJMq ` AA,);4_lw `, ` xJx_ESW7fHSw `, and ` Ao#FURc `, a5(y2 a a(,85l)B to lr$HR*tJ ` cQh9>4_&C ` AoFT the gk;O)dkJN 9Q^hddHq: - dww^rhffQ rGWh dFzEH #Ufm ' ATG ' (a SpJJKb c^z%Y skepj) - cfsH3GDwE 4MZ5 end Du5n 2k4jF5 ' TAA ', ' TAG ', or ' TGA ' (AG8o xLrpbz) - cww&#JXWC X9jFwon*BV the N*HKR ' x%qY ' (a AJj9>$ ESowsf$E 0whh3eJ) - arWI4MDDa gGq6 JsDf at >wWxH 3 v0BXwc^HoBw ' G ' s (.&>$ ' GGG ' or ' FNRN ') esF6gB the T3AKp% gzVOd pdS34#c by ` wZn9/d_(C ` in WZFWBwLjH *Ffd3.",
      "1.0": "GLkp8ble6C are XHhe%kGv Gqe8V LZRfstMC in DNA qSa^@bf2w. YUcfM a fZGI3 ` XWk9P3q ` DUgn S*i7hhx ` Ww<9/S_UC `, ` FGX_q3w&WMfd `, and ` A)FXoSW `, qgJ5F a Ci;85Kim to kc$m5jtT ` xAKl/3_OX ` @*4J the gP/iI2LMf OQ4F2gMW: - w3A6FJfDd FGzG Xys$% @oFG ' ATG ' (a sKkhIj aGseR v9W9G) - xw2K4hXFa rNs5 end 2K5J W9gNrf ' TAA ', ' TAG ', or ' TGA ' (Erp0 xLwlhd) - csA62HSWW VIgySLJugr the nL48t ' aRZ% ' (a cOKO;# GD(WQgDc )Sg^#dM) - dR18sbF@c 5gz5 YAfd at I$Xz^ 3 s0GZWDHhUDf ' G ' s (;7.2 ' GGG ' or ' trYH ') FfyI$b the 5rEiKr Hxn.3 kDvr$wX by ` AWn)i3_7f ` in wQSWJvjhF 9%fre."
    },
    "synonym": {
      "0.0": "Life scientist are studying basic patterns in DNA sequence. Given a table ` Samples ` with columns ` sample_id `, ` dna_sequence `, and ` species `, publish a result to discover ` sample_id ` with the pursue convention: - Sequences that part with ' ATG ' (a vulgar starting time codon) - Sequence that end with either ' TAA ', ' TAG ', operating theater ' TGA ' (stop codons) - Succession containing the motif ' ATAT ' (a simple repeated approach pattern) - Sequences that have at least 3 serial ' G ' siemens (like ' GGG ' operating theatre ' GGGG ') Turn back the result table govern by ` sample_id ` in ascend orderliness.",
      "0.1": "Biologists are studying basic patterns in DNA sequences. Given a table ` Samples ` with columns ` sample_id `, ` dna_sequence `, and ` species `, write a solution to distinguish ` sample_id ` with the following patterns: - Sequences that start with ' ATG ' (a common start codon) - Sequence that end with either ' TAA ', ' ticket ', operating room ' TGA ' (stop codons) - Sequences containing the motif ' ATAT ' (a simpleton perennial shape) - Sequences that have at least 3 consecutive ' G ' s (like ' GGG ' or ' GGGG ') Return the result table tell by ` sample_id ` in ascending order.",
      "0.2": "Biologists are study basic form in DNA sequences. Given a table ` Sample ` with columns ` sample_id `, ` dna_sequence `, and ` species `, write a root to key out ` sample_id ` with the following patterns: - Sequence that start with ' ATG ' (a mutual start codon) - Sequences that close with either ' TAA ', ' rag ', or ' TGA ' (stop codons) - Sequence stop the motif ' ATAT ' (a simpleton repeated pattern) - Sequences that have at least 3 consecutive ' Gravitational constant ' sulphur (corresponding ' GGG ' operating room ' GGGG ') Turn back the result table ordered by ` sample_id ` in uprise order.",
      "0.3": "Biologist are studying basic patterns in desoxyribonucleic acid chronological succession. Move over a table ` Samples ` with column ` sample_id `, ` dna_sequence `, and ` specie `, spell a result to distinguish ` sample_id ` with the follow patterns: - Sequences that get with ' ATG ' (a common start codon) - Sequences that oddment with either ' TAA ', ' tatter ', or ' TGA ' (stop codon) - Sequences stop the theme ' ATAT ' (a simple recurrent pattern) - Succession that hold at least iii consecutive ' G ' siemens (like ' GGG ' beaver state ' GGGG ') Repay the final result mesa ordered by ` sample_id ` in ascending order.",
      "0.4": "Biologist are canvas basic patterns in DNA sequence. Given a table ` Sample distribution ` with tower ` sample_id `, ` dna_sequence `, and ` mintage `, spell a solution to name ` sample_id ` with the follow pattern: - Successiveness that start out with ' ATG ' (a common jump codon) - Sequences that conclusion with either ' TAA ', ' TAG ', operating room ' TGA ' (stop codon) - Succession stop the motif ' ATAT ' (a simple perennial design) - Sequences that throw at least tierce successive ' G ' sulfur (corresponding ' GGG ' or ' GGGG ') Return the termination tabular array prescribe by ` sample_id ` in ascending monastic order.",
      "0.5": "Biologist be take introductory patterns in deoxyribonucleic acid sequence. Give a table ` Sample ` with pillar ` sample_id `, ` dna_sequence `, and ` metal money `, save a answer to name ` sample_id ` with the follow pattern: - Chronological succession that start up with ' ATG ' (a usual starting signal codon) - Sequence that remnant with either ' TAA ', ' rag ', beaver state ' TGA ' (stop codon) - Successiveness bear the motive ' ATAT ' (a simpleton recurrent form) - Chronological succession that have at least trey sequent ' M ' due south (similar ' GGG ' or ' GGGG ') Fall the resultant role board govern by ` sample_id ` in ascend fiat.",
      "0.6": "Biologist be contemplate canonic formula in desoxyribonucleic acid successiveness. Turn over a table ` Sample ` with column ` sample_id `, ` dna_sequence `, and ` metal money `, compose a root to key out ` sample_id ` with the be pattern: - Sequence that begin with ' ATG ' (a coarse commencement codon) - Sequence that destruction with either ' TAA ', ' shred ', operating room ' TGA ' (stop codon) - Sequence bear the motive ' ATAT ' (a simpleton recurrent figure) - Episode that take at least tierce sequential ' Gram ' entropy (corresponding ' GGG ' operating theater ' GGGG ') Regress the resultant role mesa tell by ` sample_id ` in ascend orderliness.",
      "0.7": "Life scientist personify study canonical normal in deoxyribonucleic acid successiveness. Give a table ` Sample ` with pillar ` sample_id `, ` dna_sequence `, and ` coinage `, spell a result to name ` sample_id ` with the follow pattern: - Succession that set forth with ' ATG ' (a vulgar first codon) - Sequence that ending with either ' TAA ', ' shred ', beaver state ' TGA ' (stop codon) - Episode contain the motive ' ATAT ' (a simpleton recurrent formula) - Sequence that hold at least troika successive ' One thousand ' due south (similar ' GGG ' operating theatre ' GGGG ') Rejoin the solvent board ordain by ` sample_id ` in ascend ordination.",
      "0.8": "Life scientist be study introductory traffic pattern in desoxyribonucleic acid chronological succession. Throw a table ` Sample ` with pillar ` sample_id `, ` dna_sequence `, and ` metal money `, save a result to describe ` sample_id ` with the watch over pattern: - Sequence that start out with ' ATG ' (a coarse beginning codon) - Sequence that ending with either ' TAA ', ' tatter ', beaver state ' TGA ' (stop codon) - Successiveness hold in the motive ' ATAT ' (a simpleton perennial blueprint) - Sequence that hold at least trio successive ' Gigabyte ' siemens (corresponding ' GGG ' oregon ' GGGG ') Retrovert the effect mesa rate by ` sample_id ` in ascend purchase order.",
      "0.9": "Life scientist be analyze canonical normal in desoxyribonucleic acid sequence. Cave in a table ` Sampling ` with column ` sample_id `, ` dna_sequence `, and ` mintage `, compose a root to name ` sample_id ` with the follow form: - Sequence that set forth with ' ATG ' (a mutual starting line codon) - Sequence that ending with either ' TAA ', ' rag ', operating theater ' TGA ' (stop codon) - Sequence hold the motive ' ATAT ' (a simpleton recurrent blueprint) - Succession that own at least trio straight ' Gib ' second (same ' GGG ' beaver state ' GGGG ') Bring back the resultant role mesa say by ` sample_id ` in move up ordering.",
      "1.0": "Life scientist constitute canvas canonic pattern in deoxyribonucleic acid sequence. Give a table ` Sample ` with tower ` sample_id `, ` dna_sequence `, and ` mintage `, save a resolution to name ` sample_id ` with the be approach pattern: - Sequence that start up with ' ATG ' (a rough cut jump codon) - Sequence that goal with either ' TAA ', ' ticket ', operating theater ' TGA ' (stop codon) - Sequence contain the motive ' ATAT ' (a simpleton recurrent practice) - Sequence that feature at least deuce ace successive ' Guanine ' south (same ' GGG ' operating theatre ' GGGG ') Bring back the issue mesa ordinate by ` sample_id ` in rise lodge."
    },
    "random": {
      "0.0": "Are DNA. a ` Samples ` ` sample_id `, ` `, and ` species `, write a solution identify ` sample_id ` with patterns: - with ' ATG ' (a start) - Sequences end with ' ', ' TAG ', or ' TGA ' () - containing motif ' ATAT ' (simple) - Sequences least consecutive ' ' s (like ' GGG ' or ' ') the result ordered by ` sample_id ` ascending.",
      "0.1": "Biologists are studying patterns in DNA sequences. Given table ` Samples ` with columns ` sample_id `, ` dna_sequence `, and ` `, a solution to identify ` ` with the following patterns: - Sequences that start with ' ATG ' (a common start codon) - that end with either ' TAA ', ' ', or ' ' (codons) - Sequences containing the motif ' ' (a simple repeated pattern) - Sequences that have at least 3 consecutive ' ' s (like ' GGG ' or ' GGGG ') Return the result by ` sample_id ` in ascending order.",
      "0.2": "Biologists are studying basic DNA sequences. Given table ` ` with columns ` `, ` dna_sequence `, ` `, write solution to identify ` sample_id ` the patterns: - Sequences start with ' ATG ' (a codon) - Sequences that end with either ' TAA ', ' TAG ', or ' TGA ' (stop codons) - containing ' ' (a repeated pattern) - Sequences that have at ' G ' s (like ' GGG ' ' ') Return result table ` sample_id ` in ascending order.",
      "0.3": "Biologists are studying in sequences. Given ` ` with columns ` `, ` `, ` `, write to identify ` sample_id ` with the following: - that start ' ATG ' (common start codon) - Sequences that with either ' TAA ', ' TAG ', or ' ' (stop) - Sequences motif ' ATAT ' (simple) - Sequences that 3 consecutive ' ' (like ' ' or ' GGGG ') Return ` `.",
      "0.4": "Are in sequences. ` ` with ` `, ` dna_sequence `, ` `, a identify ` ` with patterns: - Sequences ' ' (a codon) - either ' TAA ', ' ', ' ' () - containing motif ' ' (simple pattern) - Sequences at least 3 consecutive ' ' (like ' GGG ' ' GGGG ') Return result ` sample_id `.",
      "0.5": "Biologists in. ` Samples ` with columns ` `, ` `, ` `, ` ` with the patterns: - that ' ' () - ' ', ' ', ' ' () - ' ' (a simple repeated) - that ' ' s (' GGG ' ' ') ` ` order.",
      "0.6": "Are. table ` ` ` `, ` `, ` `, ` `: - ' ATG ' () - ' ', ' ', ' ' () - ' ' (pattern) - ' ' (' ' ' ') ` `.",
      "0.7": "Are. ` ` ` `, ` `, ` `, ` `: - ' ' () - ' ', ' ', ' ' () - ' ' () - ' ' (' ' ' ') ` `.",
      "0.8": "Are. ` ` ` `, ` `, ` `, ` `: - ' ' () - ' ', ' ', ' ' () - ' ' () - ' ' (' ' ' ') ` `.",
      "0.9": "Are. ` ` ` `, ` `, ` `, ` `: - ' ' () - ' ', ' ', ' ' () - ' ' () - ' ' (' ' ' ') ` `.",
      "1.0": "Are. ` ` ` `, ` `, ` `, ` `: - ' ' () - ' ', ' ', ' ' () - ' ' () - ' ' (' ' ' ') ` `."
    },
    "cut": {
      "0.0": "Biologists are studying basic patterns in DNA sequences. Given a table `Samples` with columns `sample_id`, `dna_sequence`, and `species`, write a solution to identify `sample_id` with the following patterns:\n\n- Sequences that start with 'ATG' (a common start codon)\n- Sequences that end with either 'TAA', 'TAG', or 'TGA' (stop codons)\n- Sequences containing the motif 'ATAT' (a simple repeated pattern)\n- Sequences that have at least 3 consecutive 'G's (like 'GGG' or 'GGGG')\n\nReturn the result table ordered by `sample_id` in ascending order.",
      "0.1": "Biologists are studying basic patterns in DNA sequences. Given a table `Samples` with columns `sample_id`, `dna_sequence`, and `species`, write a solution to identify `sample_id` with the following patterns:\n\n- Sequences that start with 'ATG' (a common start codon)\n- Sequences that end with either 'TAA', 'TAG', or 'TGA' (stop codons)\n- Sequences containing the motif 'ATAT' (a simple repeated pattern)\n- Sequences that have at least 3 consecutive 'G's (like 'GGG' or 'GGGG')\n\nReturn the r",
      "0.2": "Biologists are studying basic patterns in DNA sequences. Given a table `Samples` with columns `sample_id`, `dna_sequence`, and `species`, write a solution to identify `sample_id` with the following patterns:\n\n- Sequences that start with 'ATG' (a common start codon)\n- Sequences that end with either 'TAA', 'TAG', or 'TGA' (stop codons)\n- Sequences containing the motif 'ATAT' (a simple repeated pattern)\n- Sequences that have at least ",
      "0.3": "Biologists are studying basic patterns in DNA sequences. Given a table `Samples` with columns `sample_id`, `dna_sequence`, and `species`, write a solution to identify `sample_id` with the following patterns:\n\n- Sequences that start with 'ATG' (a common start codon)\n- Sequences that end with either 'TAA', 'TAG', or 'TGA' (stop codons)\n- Sequences containing the motif 'ATAT' (a si",
      "0.4": "Biologists are studying basic patterns in DNA sequences. Given a table `Samples` with columns `sample_id`, `dna_sequence`, and `species`, write a solution to identify `sample_id` with the following patterns:\n\n- Sequences that start with 'ATG' (a common start codon)\n- Sequences that end with either 'TAA', 'TAG', or 'TGA' (sto",
      "0.5": "Biologists are studying basic patterns in DNA sequences. Given a table `Samples` with columns `sample_id`, `dna_sequence`, and `species`, write a solution to identify `sample_id` with the following patterns:\n\n- Sequences that start with 'ATG' (a common start codon)\n- Sequ",
      "0.6": "Biologists are studying basic patterns in DNA sequences. Given a table `Samples` with columns `sample_id`, `dna_sequence`, and `species`, write a solution to identify `sample_id` with the following patterns:\n\n- Sequenc",
      "0.7": "Biologists are studying basic patterns in DNA sequences. Given a table `Samples` with columns `sample_id`, `dna_sequence`, and `species`, write a solution to ident",
      "0.8": "Biologists are studying basic patterns in DNA sequences. Given a table `Samples` with columns `sample_id`, `d",
      "0.9": "Biologists are studying basic patterns in DNA sequence",
      "1.0": ""
    }
  },
  "llm_responses": {
    "google": {
      "keyboard": {
        "0.0": [
          "import pandas as pd\n\ndef find_dna_patterns(samples: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Identifies sample_id with specific DNA sequence patterns.\n\n    Args:\n        samples (pd.DataFrame): DataFrame with columns sample_id, dna_sequence, and species.\n\n    Returns:\n        pd.DataFrame: DataFrame with sample_id that match the specified patterns, ordered by sample_id.\n    \"\"\"\n\n    def check_patterns(sequence: str) -> bool:\n        \"\"\"Checks if a DNA sequence matches the specified patterns.\"\"\"\n        start_codon = sequence.startswith('ATG')\n        stop_codons = sequence.endswith(('TAA', 'TAG', 'TGA'))\n        atat_motif = 'ATAT' in sequence\n        ggg_motif = 'GGG' in sequence\n        return start_codon and stop_codons and atat_motif and ggg_motif\n\n    # Apply the pattern check to each DNA sequence\n    samples['pattern_match'] = samples['dna_sequence'].apply(check_patterns)\n\n    # Filter for sample_ids where the pattern matches\n    matching_samples = samples[samples['pattern_match']][['sample_id']]\n\n    # Sort the result by sample_id in ascending order\n    matching_samples = matching_samples.sort_values(by='sample_id')\n\n    return matching_samples"
        ],
        "0.1": [
          "import pandas as pd\n\ndef solve():\n    SampleQ = pd.DataFrame({\n        'sample_id': [1, 2, 3, 4, 5, 6],\n        'dna_sequence': [\n            'ATGCGTAG',\n            'ATGCATATTAG',\n            'GGGGATGC',\n            'ATGGGGTAA',\n            'ATATATAT',\n            'ATGCCCTGA'\n        ],\n        'species': ['A', 'B', 'C', 'A', 'B', 'C']\n    })\n\n    def check_pattern(sequence):\n        if not sequence.startswith('ATG'):\n            return False\n        if not (sequence.endswith('TAA') or sequence.endswith('TAG') or sequence.endswith('TGA')):\n            return False\n        if 'ATAT' not in sequence:\n            return False\n        if 'GGG' not in sequence:\n            return False\n        return True\n\n    SampleQ['meets_criteria'] = SampleQ['dna_sequence'].apply(check_pattern)\n    result = SampleQ[SampleQ['meets_criteria']][['sample_id']].sort_values(by='sample_id')\n    return result\n\nif __name__ == '__main__':\n    result_df = solve()\n    print(result_df)"
        ],
        "0.2": [
          "import pandas as pd\n\ndef find_dna_patterns(samples: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Identifies sample_ids with specific DNA sequence patterns.\n\n    Args:\n        samples: A Pandas DataFrame with columns 'sample_id', 'dna_sequence', and 'species'.\n\n    Returns:\n        A Pandas DataFrame with the 'sample_id' of samples matching the specified patterns,\n        ordered by 'sample_id' in ascending order.\n    \"\"\"\n\n    def check_patterns(sequence: str) -> bool:\n        \"\"\"Checks if a DNA sequence matches the specified patterns.\"\"\"\n        if not isinstance(sequence, str):\n            return False\n\n        starts_with_atg = sequence.startswith('ATG')\n        ends_with_stop_codon = sequence.endswith(('TAA', 'TAG', 'TGA'))\n        contains_atat = 'ATAT' in sequence\n        contains_ggg = 'GGG' in sequence\n\n        return starts_with_atg and ends_with_stop_codon and contains_atat and contains_ggg\n\n    # Apply the pattern check to each DNA sequence\n    samples['matches_patterns'] = samples['dna_sequence'].apply(check_patterns)\n\n    # Filter for sample_ids that match the patterns\n    matching_samples = samples[samples['matches_patterns']]['sample_id'].reset_index(drop=True)\n\n    # Create a DataFrame from the matching sample_ids\n    result_df = pd.DataFrame({'sample_id': matching_samples})\n\n    # Sort the result by sample_id in ascending order\n    result_df = result_df.sort_values(by='sample_id', ascending=True).reset_index(drop=True)\n\n    return result_df"
        ],
        "0.3": [
          "import pandas as pd\nimport re\n\ndef identify_dna_patterns(sample_df):\n    \"\"\"\n    Identifies Sample_id's in a DataFrame that match specific DNA sequence patterns.\n\n    Args:\n        sample_df (pd.DataFrame): DataFrame with columns 'Sample_id', 'dna_seq', and 'wpfcifs'.\n\n    Returns:\n        pd.Series: Series of Sample_id's that match the specified patterns, sorted in ascending order.\n    \"\"\"\n\n    def check_patterns(dna_seq):\n        \"\"\"\n        Checks if a DNA sequence matches the specified patterns.\n\n        Args:\n            dna_seq (str): The DNA sequence to check.\n\n        Returns:\n            bool: True if the sequence matches all patterns, False otherwise.\n        \"\"\"\n        if not isinstance(dna_seq, str):\n            return False\n\n        if not dna_seq.startswith('ATG'):\n            return False\n\n        if not dna_seq.endswith(('TAA', 'TAG', 'TGA')):\n            return False\n\n        if 'GTAG' not in dna_seq:\n            return False\n\n        if 'GGG' not in dna_seq:\n            return False\n\n        return True\n\n    # Apply the pattern checking function to the 'dna_seq' column\n    matching_samples = sample_df[sample_df['dna_seq'].apply(check_patterns)]\n\n    # Return the 'Sample_id's of the matching samples, sorted in ascending order\n    return matching_samples['Sample_id'].sort_values()\n\n\nif __name__ == '__main__':\n    # Create a sample DataFrame (replace with your actual data)\n    data = {'Sample_id': [1, 2, 3, 4, 5],\n            'dna_seq': ['ATGCGTAGTAA', 'ATGGGGTAGTAG', 'ATGCCTAG', 'ATGGGTAGTGA', 'ATGCGTAG'],\n            'wpfcifs': [0.1, 0.2, 0.3, 0.4, 0.5]}\n    sample_df = pd.DataFrame(data)\n\n    # Identify the Sample_id's that match the patterns\n    matching_ids = identify_dna_patterns(sample_df)\n\n    # Print the matching Sample_id's\n    print(matching_ids)"
        ],
        "0.4": [
          "import pandas as pd\n\ndef identify_samples(sample_data):\n    \"\"\"\n    Identifies samples based on specific sequence patterns.\n\n    Args:\n        sample_data (pd.DataFrame): A DataFrame with columns 'sample_id', 'sequence', and 'species'.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing the 'sample_id' of samples that match the criteria,\n                      ordered by 'sample_id' in ascending order.\n    \"\"\"\n\n    def meets_criteria(sequence):\n        \"\"\"Checks if a sequence meets all the specified criteria.\"\"\"\n        return (\n            sequence.startswith('ATG') and\n            sequence.endswith(('TAA', 'TAG', 'TGA')) and\n            'AATT' in sequence and\n            'GGG' in sequence\n        )\n\n    # Apply the criteria to each sequence and filter the DataFrame\n    filtered_samples = sample_data[sample_data['sequence'].apply(meets_criteria)]\n\n    # Return the 'sample_id' column, sorted in ascending order\n    return filtered_samples[['sample_id']].sort_values(by='sample_id')\n\n\nif __name__ == '__main__':\n    # Example usage with a dummy DataFrame\n    data = {\n        'sample_id': ['sample1', 'sample2', 'sample3', 'sample4', 'sample5'],\n        'sequence': [\n            'ATGCGTTAA',  # Meets start/end, but not AATT or GGG\n            'ATGAATTAGGG',  # Meets all criteria\n            'ATGCGTAATAG',  # Meets start/end, but not AATT or GGG\n            'ATGAATTGTAGGG',  # Meets all criteria\n            'CGTAATTGTAGGG'   # Does not meet start\n        ],\n        'species': ['speciesA', 'speciesB', 'speciesC', 'speciesD', 'speciesE']\n    }\n    sample_df = pd.DataFrame(data)\n\n    # Identify samples that meet the criteria\n    result_df = identify_samples(sample_df)\n\n    # Print the result\n    print(result_df)"
        ],
        "0.5": [
          "def identify_dna_sequences(sequences):\n    \"\"\"\n    Identifies DNA sequences based on specific criteria.\n\n    Args:\n        sequences: A list of DNA sequences (strings).\n\n    Returns:\n        A list of identified sequences, sorted alphabetically.\n    \"\"\"\n\n    identified_sequences = []\n    for sequence in sequences:\n        if sequence.startswith('ATG') and \\\n           (sequence.endswith('TAA') or sequence.endswith('TAG') or sequence.endswith('TGA')) and \\\n           'zHAT' in sequence and \\\n           'GGG' in sequence:\n            identified_sequences.append(sequence)\n\n    identified_sequences.sort()\n    return identified_sequences\n\nif __name__ == '__main__':\n    sequences = ['SsHpKFs', 'wJtT', 'Xo?I,ns', 'sXmLp@_iR', 'Snz_Q#@ueBce', 'Zp#c&@s', 'QSm)l$_ud']\n    identified = identify_dna_sequences(sequences)\n    print(identified)"
        ],
        "0.6": [
          "def find_substring(dna_sequences, target_sequence):\n    \"\"\"\n    Identifies a substring within a list of DNA sequences based on specific criteria.\n\n    Args:\n        dna_sequences: A list of DNA sequences (strings).\n        target_sequence: The sequence to replace with 'wAh),e_ld'.\n\n    Returns:\n        A list of DNA sequences with the target sequence replaced, or the original\n        list if the target sequence is not found.\n    \"\"\"\n\n    modified_sequences = []\n    for sequence in dna_sequences:\n        if \"ATG\" in sequence and (sequence.endswith(\"TAA\") or sequence.endswith(\"TAG\") or sequence.endswith(\"TGA\")) and \"wfqT\" in sequence and \"GGG\" in sequence:\n            modified_sequence = sequence.replace(target_sequence, 'wAh),e_ld')\n            modified_sequences.append(modified_sequence)\n        else:\n            modified_sequences.append(sequence)\n    return modified_sequences\n\nif __name__ == '__main__':\n    dna_sequences = [\"SqH9pss\", \"Sk%h cooi,Ma\", \"eaN)Ie_7W\", \"smz_sew7eBXF\", \"wodxi2s\", \"caj(/e_7c\"]\n    target_sequence = \"caj(/e_7c\"\n    result = find_substring(dna_sequences, target_sequence)\n    print(result)"
        ],
        "0.7": [
          "import re\n\ndef find_patterns(dna, sequence_id):\n    \"\"\"\n    Finds specific patterns in a DNA sequence.\n\n    Args:\n        dna (str): The DNA sequence to search.\n        sequence_id (str): An identifier for the sequence.\n\n    Returns:\n        dict: A dictionary containing the found patterns.\n    \"\"\"\n\n    patterns = {\n        \"start_codon\": [],\n        \"stop_codons\": [],\n        \"agqY_motif\": [],\n        \"g_repeats\": []\n    }\n\n    # Find start codons (ATG)\n    for match in re.finditer(r\"ATG\", dna):\n        patterns[\"start_codon\"].append({\n            \"start\": match.start(),\n            \"end\": match.end(),\n            \"sequence\": match.group(0)\n        })\n\n    # Find stop codons (TAA, TAG, TGA)\n    for match in re.finditer(r\"(TAA|TAG|TGA)\", dna):\n        patterns[\"stop_codons\"].append({\n            \"start\": match.start(),\n            \"end\": match.end(),\n            \"sequence\": match.group(0)\n        })\n\n    # Find AGqY motif (where q is any character and Y is a pyrimidine (C or T))\n    for match in re.finditer(r\"AG[ACTG][CT]\", dna):\n        patterns[\"agqY_motif\"].append({\n            \"start\": match.start(),\n            \"end\": match.end(),\n            \"sequence\": match.group(0)\n        })\n\n    # Find G repeats (GGG or any sequence of Gs)\n    for match in re.finditer(r\"G{3,}\", dna):\n        patterns[\"g_repeats\"].append({\n            \"start\": match.start(),\n            \"end\": match.end(),\n            \"sequence\": match.group(0)\n        })\n\n    return patterns\n\nif __name__ == '__main__':\n    dna_sequences = {\n        \"Zwsu4mfWs\": \"vDeM a gaHF cwm)l@q wKYJ f8lunhe XwmL?@_oe\",\n        \"dnz_ZFw&rjxs\": \"d\",\n        \"Q(2c*Ws\": \"Q\",\n        \"DaK)ow_8f\": \"w85j\",\n        \"axm)O2_Kv\": \"acS2HdujV 0rf3g\"\n    }\n\n    dna = \"H9oPiTs4sQhcy7mgvxCcxFyeGnCZwsu4mfWsvDeMagaHFcwm)l@qwKYJf8lunheXwmL?@_oednz_ZFwrjxsQ2cWs4tsaziito0nuv4nHf7DaK)ow_8fw85jtherKiiwJBgpw52rHDcfq3nx2x6ustQrad69yhATGdinKpnc5xrrX0dMSwWJmDeZRNa6endOGhFYrTAAZHlpxd9GDSf1K4gc@aDghaihnythenPhiCAGqYsojOpw5RpwGefpqGedBAeqtrgFWW6hz6MsvratlrqAG3vknzscJf9CeGoijFGGGHrvGDSHuEHtheFRsjPg4zVoe0FdfdRdaxm)O2_Kv\"\n\n    results = find_patterns(dna, \"main_sequence\")\n\n    print(results)"
        ],
        "0.8": [
          "def find_sequences(dna):\n    \"\"\"\n    Finds specific sequences in a DNA string.\n\n    Args:\n        dna: The DNA string to search.\n\n    Returns:\n        A dictionary containing the positions of the found sequences.\n    \"\"\"\n\n    results = {\n        \"start_codons\": [],\n        \"stop_codons\": [],\n        \"wywg_sequences\": [],\n        \"ggg_sequences\": [],\n    }\n\n    # Find start codons (ATG)\n    for i in range(len(dna) - 2):\n        if dna[i:i+3] == \"ATG\":\n            results[\"start_codons\"].append(i)\n\n    # Find stop codons (TAA, TAG, TGA)\n    for i in range(len(dna) - 2):\n        codon = dna[i:i+3]\n        if codon in (\"TAA\", \"TAG\", \"TGA\"):\n            results[\"stop_codons\"].append(i)\n\n    # Find WYWG sequences\n    for i in range(len(dna) - 3):\n        if dna[i+1] == 'Y' and dna[i+3] == 'G':\n            results[\"wywg_sequences\"].append(i)\n\n    # Find GGG sequences\n    for i in range(len(dna) - 2):\n        if dna[i:i+3] == \"GGG\":\n            results[\"ggg_sequences\"].append(i)\n\n    return results\n\n# Example usage (replace with your actual DNA sequence)\ndna_sequence = \"hulkiFLstzsrjwtUGNgWzivZFdrmCHiGdBaG.SZan0reeOgNFlujgdwzJpDJwRmSCfwIFHFeWcSAWeKrQpjyi9WMKfjzXkLSkEA7yndKlIlQoGROXHgJsWWufHSREhGzhCrqrFjgATGclKEaFSLdBWGYXYTAA\"\nfound_sequences = find_sequences(dna_sequence)\n\n# Print the results (optional)\n#for sequence_type, positions in found_sequences.items():\n#    print(f\"{sequence_type}: {positions}\")"
        ],
        "0.9": [
          "import re\n\ndef find_orfs(dna_sequence, start_codon='ATG', stop_codons=('TAA', 'TAG', 'TGA'), wobble_codon='GGG', wobble_codon_alt='FNRN'):\n    \"\"\"\n    Finds Open Reading Frames (ORFs) in a DNA sequence.\n\n    Args:\n        dna_sequence: The DNA sequence to analyze (string).\n        start_codon: The start codon (string). Defaults to 'ATG'.\n        stop_codons: A tuple of stop codons (strings). Defaults to ('TAA', 'TAG', 'TGA').\n        wobble_codon: The wobble codon (string). Defaults to 'GGG'.\n        wobble_codon_alt: An alternative wobble codon (string). Defaults to 'FNRN'.\n\n    Returns:\n        A list of ORFs (strings).\n    \"\"\"\n\n    orfs = []\n    dna_sequence = dna_sequence.upper()  # Ensure uppercase for consistency\n\n    for frame in range(3):\n        for match in re.finditer(start_codon, dna_sequence[frame:]):\n            start_index = frame + match.start()\n            for i in range(start_index, len(dna_sequence), 3):\n                codon = dna_sequence[i:i+3]\n                if codon in stop_codons:\n                    orf = dna_sequence[start_index:i+3]\n                    orfs.append(orf)\n                    break\n                elif codon == wobble_codon or codon == wobble_codon_alt:\n                    break # Stop if wobble codon is encountered\n\n    return orfs\n\n# Example usage with provided data:\ndna = \"vo9>*g(E^w are C6&CUjjB VWE8D osyy2Tmz in DNA eF@IdgSwZ. t*D3b a YxVk3 ` Dxk9:4d ` 174t DpK tJMq ` AA,);4_lw `, ` xJx_ESW7fHSw `, and ` Ao#FURc `, a5(y2 a a(,85l)B to lr$HR*tJ ` cQh9>4_&C ` AoFT the gk;O)dkJN 9Q^hddHq: - dww^rhffQ rGWh dFzEH #Ufm ' ATG ' (a SpJJKb c^z%Y skepj) - cfsH3GDwE 4MZ5 end Du5n 2k4jF5 ' TAA ', ' TAG ', or ' TGA ' (AG8o xLrpbz) - cww&#JXWC X9jFwon*BV the N*HKR ' x%qY ' (a AJj9>$ ESowsf$E 0whh3eJ) - arWI4MDDa gGq6 JsDf at >wWxH 3 v0BXwc^HoBw ' G ' s (.&>$ ' GGG ' or ' FNRN ') esF6gB the T3AKp% gzVOd pdS34#c by ` wZn9/d_(C ` in WZFWBwLjH *Ffd3.\"\ndna = re.sub(r'[^ATGC]', '', dna) # Clean up the DNA sequence\n\norfs_found = find_orfs(dna)\n\n# Print the results (optional - for demonstration)\n#for orf in orfs_found:\n#    print(orf)"
        ],
        "1.0": [
          "import re\n\ndef find_dna_sequences(dna_string):\n    \"\"\"\n    Finds DNA sequences within a string that meet specific criteria.\n\n    Args:\n        dna_string: The string to search for DNA sequences.\n\n    Returns:\n        A list of DNA sequences that meet the criteria.\n    \"\"\"\n\n    # Define the regular expression pattern\n    pattern = r\"ATG(?:[ATGC]{3})*?(?:TAA|TAG|TGA)\"\n\n    # Find all matches in the DNA string\n    matches = re.findall(pattern, dna_string)\n\n    # Filter the matches based on the number of 'G's\n    filtered_matches = []\n    for match in matches:\n        if match.count('G') >= 3:\n            filtered_matches.append(match)\n\n    return filtered_matches\n\n# Example usage (replace with your actual DNA string)\ndna_string = \"GLkp8ble6C are XHhe%kGv Gqe8V LZRfstMC in DNA qSa^@bf2w. YUcfM a fZGI3 ` XWk9P3q ` DUgn S*i7hhx ` Ww<9/S_UC `, ` FGX_q3w&WMfd `, and ` A)FXoSW `, qgJ5F a Ci;85Kim to kc$m5jtT ` xAKl/3_OX ` @*4J the gP/iI2LMf OQ4F2gMW: - w3A6FJfDd FGzG Xys$% @oFG ' ATG ' (a sKkhIj aGseR v9W9G) - xw2K4hXFa rNs5 end 2K5J W9gNrf ' TAA ', ' TAG ', or ' TGA ' (Erp0 xLwlhd) - csA62HSWW VIgySLJugr the nL48t ' aRZ% ' (a cOKO;# GD(WQgDc )Sg^#dM) - dR18sbF@c 5gz5 YAfd at I$Xz^ 3 s0GZWDHhUDf ' G ' s (;7.2 ' GGG ' or ' trYH ') FfyI$b the 5rEiKr Hxn.3 kDvr$wX by ` AWn)i3_7f ` in wQSWJvjhF 9%fre.\"\nsequences = find_dna_sequences(dna_string)\n\n# Print the found sequences\n#for sequence in sequences:\n#    print(sequence)"
        ]
      }
    }
  }
}