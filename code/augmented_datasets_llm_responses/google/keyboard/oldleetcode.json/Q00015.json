{
  "post_href": "https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/discuss/2098804/Python3-Clean-Solution-using-Queue-Level-Order-Traversal",
  "python_solutions": "class Solution:\n    def zigzagLevelOrder(self, root):\n        \n        res = []\n        if not root: return res\n        zigzag = True\n        \n        q = collections.deque()\n        q.append(root)\n        \n        while q:\n            n = len(q)\n            nodesOfThisLevel = []\n            \n            for i in range(n):\n                node = q.popleft()\n                nodesOfThisLevel.append(node.val)\n                \n                if node.left: q.append(node.left)\n                if node.right: q.append(node.right)\n                    \n            if zigzag:\n                res.append(nodesOfThisLevel)\n                zigzag = False\n            else:\n                res.append(nodesOfThisLevel[::-1])\n                zigzag = True\n        \n        return res\n    \n# Time: O(N)\n# Space: O(N)",
  "slug": "binary-tree-zigzag-level-order-traversal",
  "post_title": "[Python3] Clean Solution using Queue Level Order Traversal",
  "user": "samirpaul1",
  "upvotes": 7,
  "views": 240,
  "problem_title": "binary tree zigzag level order traversal",
  "number": 103,
  "acceptance": 0.552,
  "difficulty": "Medium",
  "__index_level_0__": 614,
  "question": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n  Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]\nExample 2:\nInput: root = [1]\nOutput: [[1]]\nExample 3:\nInput: root = []\nOutput: []\n  Constraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-100 <= Node.val <= 100",
  "augmented_questions": {
    "keyboard": {
      "0.0": "Given the root of a binary tree, return the zigzag level order traversal of its nodes ' values. (i. e. , from left to right, then right to left for the next level and alternate between ).",
      "0.1": "Given the root of a binarH tree, return the zigzag level order tragersal of its nodes ' values. (i. e. , froh left to right, tmen right to left for the next level and alternate betwe3n ).",
      "0.2": "Given the $oot of a binary trSe, return the zigzag leve: order traversal of its nodes ' valuwC. (i. e. , from lefF to right, then right to legt for the ndxt leGel and altergQte between ).",
      "0.3": "Given the tooh of a binWru trFF, r$Gurn the ziBAag ,eCel oede5 grXvRrsal of its nodes ' BaluSs. (i. e. , fFim left to rigYG, then rinGt to left for the next oeCel and alternate vFt1een ).",
      "0.4": "TiveM the Tooy of a NinAEy 6reF, $e4ufn the SigxQg lef@l order traversal of its gides ' vwl8Rs. (i. e. , f%o, Isft to f9ght, thwB 4ihht to iegt for the GexG lfCel and zltdrJatD between ).",
      "0.5": "GUfdn the fo)t of a b(nag^ t4eW, rStufg the aKgzan oefei oFd#F t$xcRrsQl of its M0deD ' Gw>ues. (i. e. , g%om lRfF to r&gyF, HheJ #igtF to >efY for the Mex^ kede: and xpGrrnage beywRfg ).",
      "0.6": "G(vSB the t(9t of a buHwrt YDeW, r@6ugM the s9gSat KFv$l KrreG RGav3TsSp of its m8wes ' vaI&$x. (i. e. , dGoh .3Ct to EONht, tu@j rjgUh to :#f$ for the ndZ^ l4cSl and Zl4Wrnx$3 GWt@erG ).",
      "0.7": "nid@j the $8o^ of a v&nz3g Yte3, 5e$J$G the AirswY lWfr. K%SFr grxvFtXs/ of its hoC2Z ' Csl trC. (i. e. , e$im ;Sgt to r&BtF, HnFn GOvmt to k$fg for the JFx5 KdvSP and s,6DFJQte V#RDeeH ).",
      "0.8": "G(c2m the ep(% of a Vibqtu 5DWw, 5d5jgn the xJhssg ,eBF< *DseG 6rqG2Tcxk of its HIdSw ' vw,&#e. (i. e. , Ge*N ;3t4 to 4ibn4, %nFg rkVmy to PsVh for the Hrsf Odfsl and AigrFGa5d f@tESDG ).",
      "0.9": "v9DfM the Ek9$ of a Fkgq%% 4F#r, 5#YItH the XuHSsv ,SB3O peEr4 4#WG4TDX: of its m9S4c ' gw/jrA. (i. e. , dTih i@gH to $KtTg, fj3b F(hu^ to ?Ft4 for the MWcG .3bdK and xKF4$MX$F Vr$!s3m ).",
      "1.0": "hKB2M the TI8r of a NuBX$G yDDR, %$$ T#M the A8rxWT ;fFrk *%ss3 gdqgd#zw> of its hiXww ' cAo*3Z. (i. e. , t%iH :fr5 to FkByy, hnDj GjvYy to .3vH for the jrZR k@GrI and XPff%Jx^W hr^eR#j )."
    },
    "synonym": {
      "0.0": "Gift the root of a binary tree, bring back the zag stratum order traverse of information technology nodes ' values. (i. atomic number 99. , from left to correct, then right to left for the next degree and alternate between ).",
      "0.1": "Given the root of a binary tree, return the zigzag level order traversal of its node ' values. (i. e. , from left to right, then decently to leave for the next level and replacement between ).",
      "0.2": "Given the root of a binary tree, return the zag level order traversal of its nodes ' values. (ane. e. , from depart to right, so in good order to leave for the next level and alternate between ).",
      "0.3": "Collapse the root of a binary sir herbert beerbohm tree, return the zigzag level order traversal of information technology leaf node ' value. (i. e. , from get out to rectify, so mightily to leave behind for the following level and replacement between ).",
      "0.4": "Afford the radical of a binary tree, return the zigzag storey order traversal of information technology nodes ' values. (i. east. , from bequeath to compensate, so flop to left for the side by side horizontal surface and alternate between ).",
      "0.5": "Give the root of a binary tree diagram, repay the zig grade order traverse of information technology node ' value. (ane. e. , from impart to right, and then flop to lead for the following storey and alternate between ).",
      "0.6": "Yield the ascendent of a binary tree diagram, give back the zigzag level holy order traverse of it knob ' economic value. (ane. due east. , from left to correct, and so mighty to give for the succeeding horizontal surface and replacement between ).",
      "0.7": "Ease up the source of a binary tree diagram, recall the zag storey holy order traverse of information technology lymph gland ' note value. (ane. einsteinium. , from give to correct, and then correctly to leave for the following grade and surrogate between ).",
      "0.8": "Render the stem of a binary tree diagram, revert the zag degree ordering traverse of information technology node ' value. (one. es. , from leave to correct, and then flop to give for the adjacent point and surrogate between ).",
      "0.9": "Move over the beginning of a binary sir herbert beerbohm tree, render the zig floor purchase order traverse of information technology node ' value. (one. vitamin e. , from leave to rectify, and so properly to leave for the succeeding degree and surrogate between ).",
      "1.0": "Turn over the source of a binary tree diagram, come back the zig floor decree traverse of it node ' economic value. (one. eastward. , from leave to redress, and then correctly to leave for the succeeding degree and surrogate between )."
    },
    "random": {
      "0.0": "The of tree, return zigzag level order traversal of its nodes ' values. (. ., left to right, right left for and between ).",
      "0.1": "Given the root of a binary tree, return the zigzag level traversal of its nodes ' values. (i. e. , from left to right, right to left for the level alternate ).",
      "0.2": "The root of a binary tree, return the zigzag order traversal its ' values. (i. e. , from left to right, left for the level and between ).",
      "0.3": "Given the of, the order of its '. (i. ., from left to right, then right to for next and alternate between ).",
      "0.4": "The binary tree, zigzag level order traversal ' values. (. ., left right, to the next and alternate between ).",
      "0.5": "Given a tree, the order traversal of '. (i. e. , left, then to ).",
      "0.6": "The, return traversal '. (. ., from to, then and ).",
      "0.7": "The, '. (. ., left, between ).",
      "0.8": "The, '. (. ., , ).",
      "0.9": "The, '. (. ., , ).",
      "1.0": "The, '. (. ., , )."
    },
    "cut": {
      "0.0": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).",
      "0.1": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and a",
      "0.2": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for t",
      "0.3": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then r",
      "0.4": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from lef",
      "0.5": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' value",
      "0.6": "Given the root of a binary tree, return the zigzag level order traversal ",
      "0.7": "Given the root of a binary tree, return the zigzag leve",
      "0.8": "Given the root of a binary tree, retu",
      "0.9": "Given the root of ",
      "1.0": ""
    }
  },
  "llm_responses": {
    "google": {
      "keyboard": {
        "0.0": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef zigzagLevelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n    level = 0\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        if level % 2 == 1:\n            current_level.reverse()\n\n        result.append(current_level)\n        level += 1\n\n    return result"
        ],
        "0.1": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef zigzagLevelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n    level = 0\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        if level % 2 == 1:\n            current_level.reverse()\n\n        result.append(current_level)\n        level += 1\n\n    return result"
        ],
        "0.2": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef zigzagLevelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n    level = 0\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        if level % 2 == 1:\n            current_level.reverse()\n\n        result.append(current_level)\n        level += 1\n\n    return result"
        ],
        "0.3": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef zigzagLevelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n    level = 0\n\n    while queue:\n        level_size = len(queue)\n        level_nodes = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            level_nodes.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        if level % 2 == 1:\n            level_nodes.reverse()\n\n        result.append(level_nodes)\n        level += 1\n\n    return result"
        ],
        "0.4": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef zigzagLevelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n    level = 0\n\n    while queue:\n        level_size = len(queue)\n        level_values = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            level_values.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        if level % 2 == 1:\n            level_values.reverse()\n\n        result.append(level_values)\n        level += 1\n\n    return result"
        ],
        "0.5": [
          "def reverse_string_based_on_mode(input_string, mode):\n    \"\"\"\n    Reverses a portion of the input string based on the specified mode.\n\n    Args:\n        input_string: The string to be processed.\n        mode: A string indicating the portion to reverse.  Possible values:\n              'from_left_to_right': Reverses the entire string.\n              'from_right_to_left': Reverses the entire string.\n              'the_first_half': Reverses the first half of the string.\n              'the_second_half': Reverses the second half of the string.\n              'every_other_character': Reverses every other character.\n              'every_third_character': Reverses every third character.\n              'every_fourth_character': Reverses every fourth character.\n              'every_fifth_character': Reverses every fifth character.\n              'every_sixth_character': Reverses every sixth character.\n              'every_seventh_character': Reverses every seventh character.\n              'every_eighth_character': Reverses every eighth character.\n              'every_ninth_character': Reverses every ninth character.\n              'every_tenth_character': Reverses every tenth character.\n              'every_eleventh_character': Reverses every eleventh character.\n              'every_twelfth_character': Reverses every twelfth character.\n              'every_thirteenth_character': Reverses every thirteenth character.\n              'every_fourteenth_character': Reverses every fourteenth character.\n              'every_fifteenth_character': Reverses every fifteenth character.\n              'every_sixteenth_character': Reverses every sixteenth character.\n              'every_seventeenth_character': Reverses every seventeenth character.\n              'every_eighteenth_character': Reverses every eighteenth character.\n              'every_nineteenth_character': Reverses every nineteenth character.\n              'every_twentieth_character': Reverses every twentieth character.\n              'every_twentyfirst_character': Reverses every twentyfirst character.\n              'every_twentysecond_character': Reverses every twentysecond character.\n              'every_twentythird_character': Reverses every twentythird character.\n              'every_twentyfourth_character': Reverses every twentyfourth character.\n              'every_twentyfifth_character': Reverses every twentyfifth character.\n              'every_twentysixth_character': Reverses every twentysixth character.\n              'every_twentyseventh_character': Reverses every twentyseventh character.\n              'every_twentyeighth_character': Reverses every twentyeighth character.\n              'every_twentyninth_character': Reverses every twentyninth character.\n              'every_thirtieth_character': Reverses every thirtieth character.\n              'every_thirtyfirst_character': Reverses every thirtyfirst character.\n              'every_thirtysecond_character': Reverses every thirtysecond character.\n\n    Returns:\n        The modified string.\n    \"\"\"\n\n    if mode == 'from_left_to_right' or mode == 'from_right_to_left':\n        return input_string[::-1]\n    elif mode == 'the_first_half':\n        half_length = len(input_string) // 2\n        first_half = input_string[:half_length]\n        second_half = input_string[half_length:]\n        return first_half[::-1] + second_half\n    elif mode == 'the_second_half':\n        half_length = len(input_string) // 2\n        first_half = input_string[:half_length]\n        second_half = input_string[half_length:]\n        return first_half + second_half[::-1]\n    elif mode == 'every_other_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 2):\n            if i + 1 < len(input_string):\n                result[i], result[i + 1] = result[i + 1], result[i]\n        return \"\".join(result)\n    elif mode == 'every_third_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 3):\n            if i + 2 < len(input_string):\n                result[i], result[i + 2] = result[i + 2], result[i]\n        return \"\".join(result)\n    elif mode == 'every_fourth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 4):\n            if i + 3 < len(input_string):\n                result[i], result[i + 3] = result[i + 3], result[i]\n        return \"\".join(result)\n    elif mode == 'every_fifth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 5):\n            if i + 4 < len(input_string):\n                result[i], result[i + 4] = result[i + 4], result[i]\n        return \"\".join(result)\n    elif mode == 'every_sixth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 6):\n            if i + 5 < len(input_string):\n                result[i], result[i + 5] = result[i + 5], result[i]\n        return \"\".join(result)\n    elif mode == 'every_seventh_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 7):\n            if i + 6 < len(input_string):\n                result[i], result[i + 6] = result[i + 6], result[i]\n        return \"\".join(result)\n    elif mode == 'every_eighth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 8):\n            if i + 7 < len(input_string):\n                result[i], result[i + 7] = result[i + 7], result[i]\n        return \"\".join(result)\n    elif mode == 'every_ninth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 9):\n            if i + 8 < len(input_string):\n                result[i], result[i + 8] = result[i + 8], result[i]\n        return \"\".join(result)\n    elif mode == 'every_tenth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 10):\n            if i + 9 < len(input_string):\n                result[i], result[i + 9] = result[i + 9], result[i]\n        return \"\".join(result)\n    elif mode == 'every_eleventh_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 11):\n            if i + 10 < len(input_string):\n                result[i], result[i + 10] = result[i + 10], result[i]\n        return \"\".join(result)\n    elif mode == 'every_twelfth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 12):\n            if i + 11 < len(input_string):\n                result[i], result[i + 11] = result[i + 11], result[i]\n        return \"\".join(result)\n    elif mode == 'every_thirteenth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 13):\n            if i + 12 < len(input_string):\n                result[i], result[i + 12] = result[i + 12], result[i]\n        return \"\".join(result)\n    elif mode == 'every_fourteenth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 14):\n            if i + 13 < len(input_string):\n                result[i], result[i + 13] = result[i + 13], result[i]\n        return \"\".join(result)\n    elif mode == 'every_fifteenth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 15):\n            if i + 14 < len(input_string):\n                result[i], result[i + 14] = result[i + 14], result[i]\n        return \"\".join(result)\n    elif mode == 'every_sixteenth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 16):\n            if i + 15 < len(input_string):\n                result[i], result[i + 15] = result[i + 15], result[i]\n        return \"\".join(result)\n    elif mode == 'every_seventeenth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 17):\n            if i + 16 < len(input_string):\n                result[i], result[i + 16] = result[i + 16], result[i]\n        return \"\".join(result)\n    elif mode == 'every_eighteenth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 18):\n            if i + 17 < len(input_string):\n                result[i], result[i + 17] = result[i + 17], result[i]\n        return \"\".join(result)\n    elif mode == 'every_nineteenth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 19):\n            if i + 18 < len(input_string):\n                result[i], result[i + 18] = result[i + 18], result[i]\n        return \"\".join(result)\n    elif mode == 'every_twentieth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 20):\n            if i + 19 < len(input_string):\n                result[i], result[i + 19] = result[i + 19], result[i]\n        return \"\".join(result)\n    elif mode == 'every_twentyfirst_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 21):\n            if i + 20 < len(input_string):\n                result[i], result[i + 20] = result[i + 20], result[i]\n        return \"\".join(result)\n    elif mode == 'every_twentysecond_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 22):\n            if i + 21 < len(input_string):\n                result[i], result[i + 21] = result[i + 21], result[i]\n        return \"\".join(result)\n    elif mode == 'every_twentythird_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 23):\n            if i + 22 < len(input_string):\n                result[i], result[i + 22] = result[i + 22], result[i]\n        return \"\".join(result)\n    elif mode == 'every_twentyfourth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 24):\n            if i + 23 < len(input_string):\n                result[i], result[i + 23] = result[i + 23], result[i]\n        return \"\".join(result)\n    elif mode == 'every_twentyfifth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 25):\n            if i + 24 < len(input_string):\n                result[i], result[i + 24] = result[i + 24], result[i]\n        return \"\".join(result)\n    elif mode == 'every_twentysixth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 26):\n            if i + 25 < len(input_string):\n                result[i], result[i + 25] = result[i + 25], result[i]\n        return \"\".join(result)\n    elif mode == 'every_twentyseventh_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 27):\n            if i + 26 < len(input_string):\n                result[i], result[i + 26] = result[i + 26], result[i]\n        return \"\".join(result)\n    elif mode == 'every_twentyeighth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 28):\n            if i + 27 < len(input_string):\n                result[i], result[i + 27] = result[i + 27], result[i]\n        return \"\".join(result)\n    elif mode == 'every_twentyninth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 29):\n            if i + 28 < len(input_string):\n                result[i], result[i + 28] = result[i + 28], result[i]\n        return \"\".join(result)\n    elif mode == 'every_thirtieth_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 30):\n            if i + 29 < len(input_string):\n                result[i], result[i + 29] = result[i + 29], result[i]\n        return \"\".join(result)\n    elif mode == 'every_thirtyfirst_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 31):\n            if i + 30 < len(input_string):\n                result[i], result[i + 30] = result[i + 30], result[i]\n        return \"\".join(result)\n    elif mode == 'every_thirtysecond_character':\n        result = list(input_string)\n        for i in range(0, len(input_string), 32):\n            if i + 31 < len(input_string):\n                result[i], result[i + 31] = result[i + 31], result[i]\n        return \"\".join(result)\n    else:\n        return input_string"
        ],
        "0.6": [
          "def solve():\n    s = input()\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += char\n        elif 'A' <= char <= 'Z':\n            result += char\n        elif '0' <= char <= '9':\n            result += char\n    print(result)\n\nsolve()"
        ],
        "0.7": [
          "import re\n\ndef clean_text(text):\n    \"\"\"\n    Cleans the input text by removing special characters and numbers,\n    and converting it to lowercase.\n\n    Args:\n        text: The input string to clean.\n\n    Returns:\n        A cleaned string with only lowercase letters and spaces.\n    \"\"\"\n    text = re.sub(r'[^a-zA-Z\\s]', '', text)  # Remove special characters and numbers\n    text = text.lower()  # Convert to lowercase\n    return text\n\n# Example usage (replace with your actual input)\ninput_text = \"nid@j the $8o^ of a v&nz3g Yte3, 5e$J$G the AirswY lWfr. K%SFr grxvFtXs/ of its hoC2Z ' Csl trC. (i. e. , e$im ;Sgt to r&BtF, HnFn GOvmt to k$fg for the JFx5 KdvSP and s,6DFJQte V#RDeeH ).\"\ncleaned_text = clean_text(input_text)\nprint(cleaned_text)"
        ],
        "0.8": [
          "import re\nimport random\n\ndef generate_random_string(length):\n    letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    return ''.join(random.choice(letters) for i in range(length))\n\ndef obfuscate_string(input_string):\n    \"\"\"\n    Obfuscates a string by replacing characters with random strings and adding noise.\n    \"\"\"\n    obfuscated_string = \"\"\n    for char in input_string:\n        # Replace each character with a random string\n        replacement = generate_random_string(random.randint(5, 10))\n        obfuscated_string += replacement\n\n        # Add some random noise around the replacement\n        noise_before = generate_random_string(random.randint(0, 3))\n        noise_after = generate_random_string(random.randint(0, 3))\n        obfuscated_string = noise_before + obfuscated_string + noise_after\n\n    # Add some overall noise to the string\n    overall_noise = generate_random_string(random.randint(10, 20))\n    obfuscated_string = overall_noise + obfuscated_string + overall_noise\n\n    return obfuscated_string\n\ndef deobfuscate_string(obfuscated_string, original_string):\n    \"\"\"\n    Attempts to deobfuscate a string based on the original string.\n    This is a simplified example and may not work perfectly for all obfuscations.\n    \"\"\"\n    deobfuscated_string = \"\"\n    index = 0\n    for char in original_string:\n        # Find the replacement string in the obfuscated string\n        match = re.search(r\"[a-zA-Z0-9]*([a-zA-Z0-9]{5,10})[a-zA-Z0-9]*\", obfuscated_string[index:])\n        if match:\n            replacement = match.group(1)\n            deobfuscated_string += char\n            index += obfuscated_string[index:].find(replacement) + len(replacement)\n        else:\n            # If the replacement is not found, return an empty string\n            return \"\"\n\n    return deobfuscated_string\n\ndef process_string(input_string):\n    \"\"\"\n    Applies obfuscation and deobfuscation to the input string.\n    \"\"\"\n    obfuscated = obfuscate_string(input_string)\n    deobfuscated = deobfuscate_string(obfuscated, input_string)\n\n    return obfuscated, deobfuscated\n\nif __name__ == '__main__':\n    example_string = \"This is a test string.\"\n    obfuscated, deobfuscated = process_string(example_string)\n\n    print(\"Original string:\", example_string)\n    print(\"Obfuscated string:\", obfuscated)\n    print(\"Deobfuscated string:\", deobfuscated)"
        ],
        "0.9": [
          "def solve():\n    text = \"v9DfM the Ek9$ of a Fkgq%% 4F#r, 5#YItH the XuHSsv ,SB3O peEr4 4#WG4TDX: of its m9S4c ' gw/jrA. (i. e. , dTih i@gH to $KtTg, fj3b F(hu^ to ?Ft4 for the MWcG .3bdK and xKF4$MX$F Vr$!s3m ).\"\n    \n    result = \"\"\n    for char in text:\n        if 'a' <= char <= 'z':\n            result += char\n        elif 'A' <= char <= 'Z':\n            result += char\n        elif char == ' ':\n            result += char\n        elif char == '.':\n            result += char\n        elif char == ',':\n            result += char\n        elif char == '(':\n            result += char\n        elif char == ')':\n            result += char\n        elif char == '\\'':\n            result += char\n            \n    print(result)\n\nsolve()"
        ],
        "1.0": [
          "def transform_string(s):\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += '.' + char\n        elif 'A' <= char <= 'Z':\n            result += '.' + char.lower()\n        else:\n            result += char\n    return result\n\n# Example usage (replace with your actual input)\ninput_string = \"hKB2M the TI8r of a NuBX$G yDDR, %$$ T#M the A8rxWT ;fFrk *%ss3 gdqgd#zw> of its hiXww ' cAo*3Z.\"\noutput_string = transform_string(input_string)\nprint(output_string)"
        ]
      }
    }
  }
}