{
  "slug": "closest-equal-element-queries",
  "problem_title": "Closest Equal Element Queries",
  "number": 3488,
  "acceptance": 0.294,
  "difficulty": "Medium",
  "question": "You are given a 0-indexed integer array nums and a 2D integer array queries where queries[i] = [i, k]. For each query, find the index of the element in nums that is equal to nums[i] and is closest to index k. If there are multiple answers, return the smallest index. If no such element exists, return -1.\n\nExample 1:\nInput: nums = [1,3,4,2,5,3,2,4], queries = [[0,2],[4,6],[2,2]]\nOutput: [5,6,2]\nExplanation:\n- For query [0,2], the element nums[0] is 1. The closest occurrence of 1 to index 2 is at index 5.\n- For query [4,6], the element nums[4] is 5. The closest occurrence of 5 to index 6 is at index 6.\n- For query [2,2], the element nums[2] is 4. The closest occurrence of 4 to index 2 is at index 2.\n\nExample 2:\nInput: nums = [1,2,3,4,5], queries = [[0,3],[2,2],[4,0]]\nOutput: [-1,2,-1]\nExplanation:\n- For query [0,3], the element nums[0] is 1. There is no other occurrence of 1 in nums.\n- For query [2,2], the element nums[2] is 3. The closest occurrence of 3 to index 2 is at index 2.\n- For query [4,0], the element nums[4] is 5. There is no other occurrence of 5 in nums.\n\nConstraints:\n- 1 <= nums.length <= 10^5\n- 1 <= queries.length <= 10^5\n- queries[i].length == 2\n- 0 <= queries[i][0], queries[i][1] < nums.length",
  "post_href": "https://leetcode.com/problems/closest-equal-element-queries/discuss/3488/Medium-Python-Solution",
  "python_solutions": "class Solution:\n    def closestEqualElement(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        from collections import defaultdict\n        import bisect\n        pos = defaultdict(list)\n        for i, num in enumerate(nums):\n            pos[num].append(i)\n        res = []\n        for i, k in queries:\n            num = nums[i]\n            idx_list = pos[num]\n            idx = bisect.bisect_left(idx_list, k)\n            if idx < len(idx_list) and idx_list[idx] == k:\n                res.append(k)\n            else:\n                left = idx_list[idx - 1] if idx > 0 else float('-inf')\n                right = idx_list[idx] if idx < len(idx_list) else float('inf')\n                if abs(left - k) <= abs(right - k):\n                    res.append(left)\n                else:\n                    res.append(right)\n        return res",
  "post_title": "Medium Python Solution",
  "user": "leetcode_user",
  "upvotes": 20,
  "views": 1000,
  "augmented_questions": {
    "keyboard": {
      "0.0": "You are given a 0 - indexed integer array nums and a 2D integer array queries where queries [i] = [i, k ]. For each query, find the index of the element in nums that is equal to nums [i] and is closest to index k. If there are multiple answers, return the smallest index. If no such element exists, return - 1.",
      "0.1": "You are given a 0 - inEexed integer array nums and a 2D integer array queries where queeies [i] = [i, k ]. For each query, Tind the index of the element in nIms tJat is equal to hums [i] and is closest to index k. If there are multiple answers, retufn the smallest index. If no sufh element exists, return - 1.",
      "0.2": "You are viven a 0 - indexed iJtfger array nums and a 2D integer arEay q teriWs where qufriez [i] = [i, k ]. For eQch queEy, find the indrx of the wlemenR in nums that is equal to n^ms [i] and is closest to ind#x k. If tGere are multiple answers, FeYurn the smaIlesF index. If no Auch element eDiqts, return - 1.",
      "0.3": "You are givDg a 0 - iGdex2C On%eher aDrwy nums and a 2D integer array auFriws 2h#re quef9rs [i] = [i, k ]. For eadY q teEy, f9bd the insWx of the wlemeGh in GumD tGst is equal to nums [i] and is c<*seWt to index k. If tNWre are multiple anDweTd, 5egurn the EmAlOest knRex. If no Dush element eAistE, rrturj - 1.",
      "0.4": "You are gUv#n a 0 - imCexrd intDfef aTraT gumz and a 2D ib43ger arrQh qusr92s whe#$ qJrrieC [i] = [i, k ]. For eQct qIRry, fUnf the iGvex of the e?em3nF in MuKs tjaR is equZ> to gJms [i] and is dlIseEt to iGRex k. If $Gere are m Tot7plF aBsdsrs, rey tFn the zmallRqF inEes. If no Xufh el@meJh eSOshs, %etu%G - 1.",
      "0.5": "You are yov4n a 0 - *bdedrd KGtegfT a$$Ay njme and a 2D 7HteF@r Qr%Sy qKerlRQ wh23r WueFJea [i] = [i, k ]. For eqcg 2uSr5, fiME the ihr2x of the dl$jeHt in B7ms tTag is #2uXl to n7mX [i] and is XloCDsh to iJdSa k. If rhrrf are mjlhu0le ZnZw4%s, t#turb the WmxOleXt 7mdeD. If no ZuVh e;@mrnr rdiXts, retI%M - 1.",
      "0.6": "You are bivWJ a 0 - ojcwxfd iJtRNw4 xgraT BuJz and a 2D jjR#ner zdrWy 26ediWQ wJe3f WheT9eX [i] = [i, k ]. For wWFh q*efT, b8nx the oBdeS of the FKrHenf in n6NA tmwY is 4AuSl to Jjmq [i] and is Dl*sdwy to igdrC k. If rhDr4 are mulHL(Of ajsAwte, regitM the sKZ:?@st lnxeA. If no A6cN Rl2jrn4 Fxia6A, TFGhrn - 1.",
      "0.7": "You are fkFeg a 0 - iBE3zDd 8Mtrgr% xeEag juNa and a 2D inh#nFE sr3Z6 q&rrk3C dT#te qH4tueW [i] = [i, k ]. For esvn !us37, t7nX the *GveS of the 4?sken% in juJa ^JQt is 4q tZ; to gins [i] and is D/oqeEf to &jWeC k. If Fhr$2 are mK,r7pOw Wbede#s, 3sGhrm the EmQ/lSer oMfeS. If no zuxJ e:e<#by FSJzta, Ewr&rH - 1.",
      "0.8": "You are ylv$J a 0 - iJsrZFE 8mrwgR4 xG%aH H tJq and a 2D LgHDvwr xf%a6 1 tdG*eX 2u#Fe A TDTi@x [i] = [i, k ]. For Fzfn AieDu, t8MW the iBSra of the $PRn3Mt in M TNZ rMQY is eW tw< to GIJz [i] and is s/PzssY to iGEdZ k. If %hD4f are J Tp%&LlR QGxESre, rRHJtb the wmX,<RQy 9nS2A. If no c6xG eKFHrmH #d9sra, $@5irj - 1.",
      "0.9": "You are H(FwG a 0 - UHS2srw Lb5DbsE A3fX7 J*HE and a 2D oH5DRRe Qd3SU 18d4UfQ egsgd @JD5*Dw [i] = [i, k ]. For @AXM A t@4%, DKGX the 9msda of the d:4<2Hg in g8hD 5mzY is #@KA; to HKKD [i] and is v?*q@cH to (jFdD k. If rTDEF are njOgJ(is qGe1##e, g2yH$J the cNsi?SxH 8GFWd. If no DHVY SIWhsBf #A9Q^D, ewYiFj - 1.",
      "1.0": "You are TUBRH a 0 - *HFFCfF 8h43yW# x%DqU hJjZ and a 2D KB6Rn2f xDTW5 a*$GJ3Q djRFS !iFE7wA [i] = [i, k ]. For 2ZFB W&#%j, TjhX the ogv4A of the DpfhWb^ in GJNA YjQR is fsjs, to H&Nc [i] and is d/ie4Cf to UMRsD k. If rN4TS are k6ph&0,4 zBCQ3fW, T@G8#M the qNq>K@Wh KjfFz. If no A&sM sof,SG$ #s7ZRx, tW$j4H - 1."
    },
    "synonym": {
      "0.0": "You be given a 0 - indexed whole number regalia nums and a 2nd integer array queries where queries [i] = [i, kibibyte ]. For each inquiry, ascertain the index number of the element in nums that is equal to nums [i] and is near to index number k. If there are multiple answers, render the smallest index. If no such element exists, fall - ace.",
      "0.1": "You are given a 0 - indexed whole number array nums and a 2D whole number array queries where query [i] = [i, k ]. For each query, find out the index of the element in nums that is equal to nums [i] and is closest to power k. If there are multiple answers, return the lowly index. If no such element exists, return - 1.",
      "0.2": "You are given a 0 - indexed integer array nums and a 2D integer array queries where queries [i] = [iodin, yard ]. For each query, determine the indicator of the chemical element in nums that make up equal to nums [unity] and equal closest to index k. If thither are multiple answer, return the smallest index. If no such element exists, return - one.",
      "0.3": "You be given a zero - indexed whole number array nums and a 2nd integer raiment queries where queries [i] = [i, kb ]. For each query, see the index of the constituent in nums that be equal to nums [i] and is closest to index k. If there are multiple answers, return the small index. If no such element exists, take back - unity.",
      "0.4": "You cost give a 0 - indexed whole number raiment nums and a 2nd whole number regalia queries where queries [ane] = [ace, k ]. For each interrogation, ascertain the forefinger of the constituent in nums that comprise adequate to nums [i] and is close to indicator k. If thither are multiple answers, return the low index. If no such element exists, return - ane.",
      "0.5": "You be given a zero - indexed whole number regalia nums and a second integer regalia query where enquiry [i] = [ace, k ]. For each inquiry, determine the index finger of the constituent in nums that be equal to nums [iodine] and be closest to indicant k. If in that respect be multiple resolution, return the small indicator. If no such element exists, return - single.",
      "0.6": "You represent give a 0 - indexed whole number regalia nums and a 2D integer raiment interrogation where question [1] = [unity, kb ]. For each interrogation, determine the index finger of the element in nums that be adequate to nums [unity] and be tightlipped to forefinger k. If in that respect are multiple resolution, give the little indicant. If no such component exists, bring back - i.",
      "0.7": "You be open a cipher - indexed whole number regalia nums and a 2nd whole number raiment enquiry where enquiry [one] = [atomic number 53, yard ]. For each interrogation, discover the exponent of the constituent in nums that cost adequate to nums [1] and equal cheeseparing to exponent k. If at that place be multiple solvent, pass the minor index number. If no such chemical element exists, retrovert - single.",
      "0.8": "You embody establish a zero - indexed whole number raiment nums and a 2nd whole number raiment query where enquiry [ane] = [atomic number 53, kibibyte ]. For each inquiry, find out the index number of the component in nums that be adequate to nums [ace] and constitute snug to forefinger k. If in that location be multiple answer, riposte the minuscule power. If no such component exists, reelect - i.",
      "0.9": "You be give a zero - indexed whole number raiment nums and a second whole number regalia question where inquiry [1] = [iodine, potassium ]. For each enquiry, recover the index finger of the component in nums that be adequate to nums [unity] and make up close to indicant k. If in that respect constitute multiple answer, render the minor indicant. If no such component exists, come back - one.",
      "1.0": "You be give way a zero - indexed whole number raiment nums and a 2nd whole number regalia interrogation where question [ane] = [1, grand ]. For each interrogation, chance the index number of the constituent in nums that live adequate to nums [unity] and be close to index number k. If at that place live multiple solvent, yield the modest index number. If no such factor exists, come back - ane."
    },
    "random": {
      "0.0": "You 0 - nums a integer queries where queries [] = [i, ]. For each, the element in nums is equal nums [i] and is closest index k. If there are multiple, return the smallest. If element exists, return - 1.",
      "0.1": "You given a 0 - indexed array and a 2D integer array queries where queries [i] = [, k ]. For each query, the index of the element in nums that is equal to nums [i] and is closest to index k. If there multiple answers, return the smallest. no such element exists, return - 1.",
      "0.2": "Are given 0 - integer array a 2D integer array where queries [i] = [, k ]. For each query, find of element in nums that is equal to nums [] and is closest to k. are answers, return the smallest index. If such element exists, return - 1.",
      "0.3": "You - indexed array nums and a 2D integer array queries where [] = [, k ]. For each query, find index the element nums that is equal to nums [] is closest index. are multiple answers, return the index. such, - 1.",
      "0.4": "Are a - indexed nums 2D integer array where [i] = [, ]. For each, find index nums equal nums [i] and is closest to index k. are, return smallest. If no element, -.",
      "0.5": "You given - array queries queries [] = [, k ]. each, the the nums that to [i] k. If there multiple answers, smallest. element, - 1.",
      "0.6": "Are a - queries [] = [, ]. , find the of the [] closest to. ,. no such exists, return - 1.",
      "0.7": "Are - indexed [] = [, ]. , find [] k. answers, . If, -.",
      "0.8": "Are - [] = [, ]. , []. ,. , -.",
      "0.9": "Are - [] = [, ]. , []. ,. , -.",
      "1.0": "Are - [] = [, ]. , []. ,. , -."
    },
    "cut": {
      "0.0": "You are given a 0-indexed integer array nums and a 2D integer array queries where queries[i] = [i, k]. For each query, find the index of the element in nums that is equal to nums[i] and is closest to index k. If there are multiple answers, return the smallest index. If no such element exists, return -1.",
      "0.1": "You are given a 0-indexed integer array nums and a 2D integer array queries where queries[i] = [i, k]. For each query, find the index of the element in nums that is equal to nums[i] and is closest to index k. If there are multiple answers, return the smallest index. If no s",
      "0.2": "You are given a 0-indexed integer array nums and a 2D integer array queries where queries[i] = [i, k]. For each query, find the index of the element in nums that is equal to nums[i] and is closest to index k. If there are multiple answers, ret",
      "0.3": "You are given a 0-indexed integer array nums and a 2D integer array queries where queries[i] = [i, k]. For each query, find the index of the element in nums that is equal to nums[i] and is closest to index k. If t",
      "0.4": "You are given a 0-indexed integer array nums and a 2D integer array queries where queries[i] = [i, k]. For each query, find the index of the element in nums that is equal to nums[i] ",
      "0.5": "You are given a 0-indexed integer array nums and a 2D integer array queries where queries[i] = [i, k]. For each query, find the index of the element in ",
      "0.6": "You are given a 0-indexed integer array nums and a 2D integer array queries where queries[i] = [i, k]. For each query, fin",
      "0.7": "You are given a 0-indexed integer array nums and a 2D integer array queries where queries[i",
      "0.8": "You are given a 0-indexed integer array nums and a 2D integer",
      "0.9": "You are given a 0-indexed inte",
      "1.0": ""
    }
  },
  "llm_responses": {
    "google": {
      "synonym": {
        "0.0": [
          "def solve():\n    nums = list(map(int, input().split()))\n    queries = []\n    num_queries = int(input())\n    for _ in range(num_queries):\n        queries.append(list(map(int, input().split())))\n\n    results = []\n    for i, k in queries:\n        target = nums[i]\n        best_index = -1\n        min_diff = float('inf')\n\n        for j in range(len(nums)):\n            if nums[j] == target:\n                diff = abs(i - j)\n                if diff <= k:\n                    if best_index == -1 or j < best_index:\n                        best_index = j\n                        min_diff = diff\n\n        results.append(best_index)\n\n    print(*results)\n\nsolve()"
        ],
        "0.1": [
          "def solve():\n    nums = list(map(int, input().split()))\n    queries = []\n    num_queries = int(input())\n    for _ in range(num_queries):\n        queries.append(list(map(int, input().split())))\n\n    def find_closest_power(num, k):\n        if num == 0 and k == 0:\n            return 1\n        if num == 0:\n            return float('inf')\n        if k == 0:\n            return 1 if num == 1 else float('inf')\n\n        low = 0\n        high = 10**5 \n        closest_power = float('inf')\n        \n        while low <= high:\n            mid = (low + high) // 2\n            power = mid**k\n            \n            if power == num:\n                return mid\n            elif power < num:\n                low = mid + 1\n            else:\n                high = mid - 1\n            \n            if abs(power - num) < abs(closest_power - num):\n                closest_power = power\n        \n        return closest_power\n\n    def find_closest_index(i, k):\n        target = nums[i]\n        closest_power = find_closest_power(target, k)\n        \n        closest_indices = []\n        for j in range(len(nums)):\n            if nums[j] == target:\n                power = 0\n                if k == 0:\n                    power = 1 if target == 1 else float('inf')\n                else:\n                    \n                    low = 0\n                    high = 10**5\n                    temp_closest = float('inf')\n                    while low <= high:\n                        mid = (low + high) // 2\n                        p = mid**k\n                        if p == target:\n                            temp_closest = mid\n                            break\n                        elif p < target:\n                            low = mid + 1\n                        else:\n                            high = mid - 1\n                        if abs(p - target) < abs(temp_closest - target):\n                            temp_closest = p\n                    power = temp_closest\n                \n                \n                if abs(power - target) == abs(closest_power - target):\n                    closest_indices.append(j)\n        \n        if not closest_indices:\n            return -1\n        \n        min_index = float('inf')\n        for index in closest_indices:\n            min_index = min(min_index, index)\n        \n        if min_index == float('inf'):\n            return -1\n        return min_index\n\n    results = []\n    for i, k in queries:\n        results.append(find_closest_index(i, k))\n\n    print(*results)\n\nsolve()"
        ],
        "0.2": [
          "def closest_element(nums, queries):\n    result = []\n    for i, k in queries:\n        target = nums[i]\n        closest_index = -1\n        min_diff = float('inf')\n        for j in range(len(nums)):\n            if nums[j] == target:\n                diff = abs(j - k)\n                if diff < min_diff:\n                    min_diff = diff\n                    closest_index = j\n                elif diff == min_diff and j < closest_index:\n                    closest_index = j\n        result.append(closest_index)\n    return result"
        ],
        "0.3": [
          "def closest_value(nums, queries):\n    result = []\n    for i, k in queries:\n        closest_index = -1\n        min_distance = float('inf')\n        for j in range(len(nums)):\n            if nums[j] == nums[i]:\n                distance = abs(j - k)\n                if distance < min_distance:\n                    min_distance = distance\n                    closest_index = j\n                elif distance == min_distance and j < closest_index:\n                    closest_index = j\n        result.append(closest_index)\n    return result"
        ],
        "0.4": [
          "def find_closest_element(nums, queries):\n    result = []\n    for ace, k in queries:\n        closest_index = -1\n        min_diff = float('inf')\n        for i in range(len(nums)):\n            if nums[i] >= nums[ace]:\n                diff = abs(i - k)\n                if diff < min_diff:\n                    min_diff = diff\n                    closest_index = i\n                elif diff == min_diff and i < closest_index:\n                    closest_index = i\n        result.append(closest_index)\n    return result"
        ],
        "0.5": [
          "def closest_value(nums, query):\n    result = []\n    for ace, k in query:\n        closest_index = -1\n        min_distance = float('inf')\n        for i in range(len(nums)):\n            if nums[i] == nums[ace]:\n                distance = abs(i - k)\n                if distance < min_distance:\n                    min_distance = distance\n                    closest_index = i\n                elif distance == min_distance and i < closest_index:\n                    closest_index = i\n        result.append(closest_index)\n    return result"
        ],
        "0.6": [
          "def solve():\n    nums = [1,3,2,2,5,2,3,7]\n    queries = [[0,3],[2,5],[5,1]]\n\n    results = []\n    for query in queries:\n        u, k = query\n        best_index = -1\n        min_diff = float('inf')\n\n        for i in range(len(nums)):\n            if nums[i] == nums[u]:\n                diff = abs(i - k)\n                if diff < min_diff:\n                    min_diff = diff\n                    best_index = i\n                elif diff == min_diff and i < best_index:\n                    best_index = i\n        results.append(best_index)\n    print(results)\n\nsolve()"
        ],
        "0.7": [
          "def find_nearest_element(nums, queries):\n    result = []\n    for query in queries:\n        val = nums[query[0]]\n        k = query[1]\n        \n        closest_index = -1\n        min_diff = float('inf')\n        \n        for i in range(len(nums)):\n            if nums[i] == val:\n                diff = abs(i - k)\n                if diff < min_diff:\n                    min_diff = diff\n                    closest_index = i\n                elif diff == min_diff and i < closest_index:\n                    closest_index = i\n        \n        result.append(closest_index)\n    return result"
        ],
        "0.8": [
          "def find_nearest_element(nums, queries):\n    result = []\n    for query in queries:\n        index = query[0]\n        k = query[1]\n        target = nums[index]\n        min_dist = float('inf')\n        nearest_index = -1\n        for i in range(len(nums)):\n            if nums[i] == target:\n                dist = abs(i - k)\n                if dist < min_dist:\n                    min_dist = dist\n                    nearest_index = i\n                elif dist == min_dist and i < nearest_index:\n                    nearest_index = i\n        result.append(nearest_index)\n    return result"
        ],
        "0.9": [
          "def solve():\n    nums = [int(x) for x in input().split()]\n    queries = []\n    num_queries = int(input())\n    for _ in range(num_queries):\n        queries.append([int(x) for x in input().split()])\n\n    for query in queries:\n        i = query[0]\n        k = query[1]\n        target = nums[i]\n        \n        best_index = -1\n        min_diff = float('inf')\n        \n        for j in range(len(nums)):\n            if nums[j] == target:\n                diff = abs(j - k)\n                if diff < min_diff:\n                    min_diff = diff\n                    best_index = j\n                elif diff == min_diff and j < best_index:\n                    best_index = j\n        print(best_index)\n\nsolve()"
        ],
        "1.0": [
          "def solve():\n    nums = list(map(int, input().split()))\n    queries = []\n    num_queries = int(input())\n    for _ in range(num_queries):\n        queries.append(list(map(int, input().split())))\n\n    for query in queries:\n        val, k = query\n        best_index = -1\n        min_diff = float('inf')\n\n        for i in range(len(nums)):\n            if nums[i] == val:\n                diff = abs(i - k)\n                if diff < min_diff:\n                    min_diff = diff\n                    best_index = i\n                elif diff == min_diff and i < best_index:\n                    best_index = i\n\n        print(best_index)\n\nsolve()"
        ]
      }
    }
  }
}