{
  "post_href": "https://leetcode.com/problems/binary-tree-level-order-traversal-ii/discuss/359962/Python-recursive-and-iterative",
  "python_solutions": "class Solution:\n    def helper(self, result, depth, node):\n        if not node:\n            return\n        \n        if len(result) < depth:\n            result.append([])\n            \n        result[depth-1].append(node.val)\n        self.helper(result, depth+1, node.left)\n        self.helper(result, depth+1, node.right)\n        \n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\n        if not root:\n            return []\n        \n        result = []\n        depth = 1\n        self.helper(result, depth, root)\n        result.reverse()\n        return result",
  "slug": "binary-tree-level-order-traversal-ii",
  "post_title": "Python recursive and iterative",
  "user": "amchoukir",
  "upvotes": 4,
  "views": 519,
  "problem_title": "binary tree level order traversal ii",
  "number": 107,
  "acceptance": 0.604,
  "difficulty": "Medium",
  "__index_level_0__": 717,
  "question": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n  Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[15,7],[9,20],[3]]\nExample 2:\nInput: root = [1]\nOutput: [[1]]\nExample 3:\nInput: root = []\nOutput: []\n  Constraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-1000 <= Node.val <= 1000",
  "augmented_questions": {
    "keyboard": {
      "0.0": "Given the root of a binary tree, return the bottom - up level order traversal of its nodes ' values. (i. e. , from left to right, level by level from leaf to root ).",
      "0.1": "Given the root of a binary treF, ret trn the bottom - up level orde$ traversal of its n(des ' values. (i. e. , from left to right, level by level fro< leaf to root ).",
      "0.2": "GivRn the root of a binary tree, teturB the bottom - up l3vel ordeF traversal of its noves ' values. (i. e. , froh left to Tight, level by leve: Crom leaf to root ).",
      "0.3": "Given the 4oog of a Vihary g#ee, fetu$n the bottom - up lec2l oTddr 4raDersaI of its nodRQ ' values. (i. e. , fr8N IeDt to right, lWBel by Oev3l from leaf to $8ot ).",
      "0.4": "B9ven the ropG of a NinW#y Gre4, re4u4M the bo5rlm - up pecel ordwt trsfSrszl of its Jod3s ' DaIHes. (i. e. , trPm oefF to 4iggt, levwK by level from leXv to roI5 ).",
      "0.5": "Glv@G the rolh of a bigadt t5se, GF6urn the bkttPH - up leGW: orEf# 54AcersaO of its nId2W ' vskkes. (i. e. , fr*n ler5 to FUghy, Pdvdl by Owbel feoj lDaR to rio6 ).",
      "0.6": "Tiv2B the FI0t of a bkmadg FDes, DeHuGg the got6Ph - up ?eGe; oDfdr %EXgeEzal of its nisfs ' ba: Tez. (i. e. , fE)N Oed^ to r(Vbt, lfBwl by l2v3i fGkJ >esv to d8lt ).",
      "0.7": "RUvRH the f8Pt of a flnZtT hrdD, %Dhu%J the h9t^9< - up I#v@p *3dWF gEXBe$AWl of its g(dWa ' cXli4z. (i. e. , f#Ph .@rt to 5*Ntt, /@gDl by <egfO fgIN peWB to eK8t ).",
      "0.8": "GjDRH the $LLR of a bUJqEU R#W4, ff^Hfn the H(HtKh - up O$feK 8TE4r h%Ac2gca> of its b0d3C ' DSPu2E. (i. e. , VD9h :fr4 to GORhR, :3F2l by psFe/ DfIj ?#sR to ELi% ).",
      "0.9": "ROcDh the Glp4 of a hUGWgj ^Gd2, gRH85H the N)%GPn - up :Rc2, P3WwT gEwcFECQ: of its B0cfC ' BQkKsc. (i. e. , bg*K PdE% to 4(TBh, <#C@/ by I$bS: c%kh ?Dxr to $)95 ).",
      "1.0": "HJc$J the 5Pi4 of a hkMZe& ^5sd, $wF*fB the f9hGkh - up ;rfd> ldrW$ %%Sd35csK of its b8S3c ' cs;JWE. (i. e. , Gg(h ,rTf to tJrT4, ;#d3O by O$bF: TGKh ;SWt to D(l% )."
    },
    "synonym": {
      "0.0": "Give the ascendant of a binary tree, give back the bottom - up level order traversal of its nodes ' values. (ane. due east. , from left to right, stage by level from foliage to theme ).",
      "0.1": "Given the root of a binary tree, return the bottom - up level order traversal of its nodes ' values. (i. tocopherol. , from left to right, degree by level from foliage to root ).",
      "0.2": "Given the root of a binary tree, return the bottom - upwards point order traversal of it nodes ' values. (i. es. , from will to right, level by level from leaf to stem ).",
      "0.3": "Afford the root word of a binary sir herbert beerbohm tree, retort the bottom - up level guild traverse of its node ' value. (i. e. , from left to right, degree by level from foliage to root ).",
      "0.4": "Given the antecedent of a binary sir herbert beerbohm tree, recall the behind - upward level order traverse of information technology node ' values. (one. due east. , from left to right, spirit level by degree from leaf to root ).",
      "0.5": "Pass on the antecedent of a binary sir herbert beerbohm tree, retort the tush - up level ordination traversal of information technology client ' value. (ane. einsteinium. , from leave to correct, stage by horizontal surface from folio to root ).",
      "0.6": "Establish the ascendant of a binary tree, retrovert the rear - upwards layer edict traverse of it thickening ' value. (ane. east. , from leave behind to rectify, stage by degree from leafage to radical ).",
      "0.7": "Render the ancestor of a binary sir herbert beerbohm tree, come back the keister - upwards story ordering traverse of it node ' value. (one. es. , from result to rectify, stage by stage from folio to antecedent ).",
      "0.8": "Afford the source of a binary tree diagram, recall the rear - upwardly grade social club traverse of information technology node ' value. (one. vitamin e. , from exit to rectify, degree by spirit level from folio to root word ).",
      "0.9": "Devote the base of a binary sir herbert beerbohm tree, rejoin the rump - upwards degree rescript traverse of information technology lymph gland ' time value. (one. einsteinium. , from leave behind to correct, story by storey from folio to origin ).",
      "1.0": "Leave the rootage of a binary sir herbert beerbohm tree, give back the merchantman - upward stratum social club traverse of it lymph node ' time value. (1. tocopherol. , from leave to redress, tier by degree from foliage to beginning )."
    },
    "random": {
      "0.0": "The root of a binary tree, return the bottom - level traversal its nodes '. (. ., right, by level from to root ).",
      "0.1": "Given the root of a binary tree, return bottom - up level order traversal its ' values. (i. e. , from left to right, by from leaf to root ).",
      "0.2": "Given the root a binary, return the bottom - up traversal its nodes ' values. (. e. , from left right, level by leaf to root ).",
      "0.3": "The root a tree, return the - up order traversal of nodes '. (i. ., from to right, level by leaf ).",
      "0.4": "The of, - up level traversal of its nodes ' values. (. ., to right, level leaf to root ).",
      "0.5": "The of, the - order of '. (. ., right, level by level to root ).",
      "0.6": "The of, bottom - nodes '. (. ., , level ).",
      "0.7": "The, - '. (. ., , root ).",
      "0.8": "The, - '. (. ., , ).",
      "0.9": "The, - '. (. ., , ).",
      "1.0": "The, - '. (. ., , )."
    },
    "cut": {
      "0.0": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).",
      "0.1": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level fro",
      "0.2": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, le",
      "0.3": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from l",
      "0.4": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' value",
      "0.5": "Given the root of a binary tree, return the bottom-up level order traversal of i",
      "0.6": "Given the root of a binary tree, return the bottom-up level orde",
      "0.7": "Given the root of a binary tree, return the bott",
      "0.8": "Given the root of a binary tree,",
      "0.9": "Given the root o",
      "1.0": ""
    }
  },
  "llm_responses": {
    "google": {
      "synonym": {
        "0.0": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef bottom_up_level_order(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n\n    while queue:\n        level_values = []\n        level_size = len(queue)\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            level_values.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(level_values)\n\n    return result[::-1]"
        ],
        "0.1": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrderBottom(root):\n    if not root:\n        return []\n\n    queue = deque([root])\n    levels = []\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        levels.append(current_level)\n\n    return levels[::-1]"
        ],
        "0.2": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrderBottom(root):\n    if not root:\n        return []\n\n    queue = deque([root])\n    result = []\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(current_level)\n\n    return result[::-1]"
        ],
        "0.3": [
          "from collections import defaultdict, deque\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef bottom_up_level_order(root):\n    if not root:\n        return []\n\n    level_map = defaultdict(list)\n    queue = deque([(root, 0)])  # Node, level\n    max_level = 0\n\n    while queue:\n        node, level = queue.popleft()\n        level_map[level].append(node.value)\n        max_level = max(max_level, level)\n\n        if node.left:\n            queue.append((node.left, level + 1))\n        if node.right:\n            queue.append((node.right, level + 1))\n\n    result = []\n    for level in range(max_level, -1, -1):\n        result.extend(level_map[level])\n\n    return result\n\nif __name__ == '__main__':\n    # Example usage:\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    result = bottom_up_level_order(root)\n    print(result)  # Output: [4, 5, 6, 7, 2, 3, 1]\n\n    root2 = Node(1)\n    root2.left = Node(2)\n    root2.right = Node(3)\n    root2.left.left = Node(4)\n    root2.right.right = Node(5)\n\n    result2 = bottom_up_level_order(root2)\n    print(result2) # Output: [4, 5, 2, 3, 1]\n\n    root3 = None\n    result3 = bottom_up_level_order(root3)\n    print(result3) # Output: []\n\n    root4 = Node(1)\n    result4 = bottom_up_level_order(root4)\n    print(result4) # Output: [1]"
        ],
        "0.4": [
          "from collections import defaultdict, deque\n\nclass Node:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef bottom_up_level_order(root):\n    if not root:\n        return []\n\n    levels = defaultdict(list)\n    queue = deque([(root, 0)])  # Node, level\n    max_level = 0\n\n    while queue:\n        node, level = queue.popleft()\n        levels[level].append(node.val)\n        max_level = max(max_level, level)\n\n        if node.left:\n            queue.append((node.left, level + 1))\n        if node.right:\n            queue.append((node.right, level + 1))\n\n    result = []\n    for level in range(max_level, -1, -1):\n        result.extend(levels[level])\n\n    return result"
        ],
        "0.5": [
          "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef bottom_up_level_order(root):\n    if root is None:\n        return []\n\n    queue = [root]\n    result = []\n\n    while queue:\n        level_size = len(queue)\n        level_values = []\n\n        for _ in range(level_size):\n            node = queue.pop(0)\n            level_values.append(node.data)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.insert(0, level_values)\n\n    return result"
        ],
        "0.6": [
          "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n        self.parent = None\n\ndef reverse_level_order_with_parent(root):\n    if not root:\n        return []\n\n    queue = [root]\n    result = []\n\n    while queue:\n        node = queue.pop(0)\n        result.append(node.value)\n\n        if node.right:\n            node.right.parent = node\n            queue.append(node.right)\n        if node.left:\n            node.left.parent = node\n            queue.append(node.left)\n\n    return result[::-1]\n\ndef build_tree(nodes):\n    \"\"\"Helper function to build a tree from a list of node values.\n    None represents a missing node.  Returns the root node.\n    \"\"\"\n    if not nodes:\n        return None\n\n    root = Node(nodes[0])\n    queue = [root]\n    i = 1\n\n    while queue and i < len(nodes):\n        node = queue.pop(0)\n\n        if nodes[i] is not None:\n            node.left = Node(nodes[i])\n            node.left.parent = node\n            queue.append(node.left)\n        i += 1\n\n        if i < len(nodes) and nodes[i] is not None:\n            node.right = Node(nodes[i])\n            node.right.parent = node\n            queue.append(node.right)\n        i += 1\n\n    return root\n\nif __name__ == '__main__':\n    # Example usage:\n    # Create a sample binary tree\n    #        1\n    #       / \\\n    #      2   3\n    #     / \\   \\\n    #    4   5   6\n\n    tree_nodes = [1, 2, 3, 4, 5, None, 6]\n    root = build_tree(tree_nodes)\n\n    # Perform reverse level order traversal\n    reverse_level_order = reverse_level_order_with_parent(root)\n    print(reverse_level_order)  # Output: [4, 5, 6, 2, 3, 1]\n\n    # Another example\n    tree_nodes2 = [3,9,20,None,None,15,7]\n    root2 = build_tree(tree_nodes2)\n    reverse_level_order2 = reverse_level_order_with_parent(root2)\n    print(reverse_level_order2) # Output: [15, 7, 9, 20, 3]\n\n    tree_nodes3 = [1]\n    root3 = build_tree(tree_nodes3)\n    reverse_level_order3 = reverse_level_order_with_parent(root3)\n    print(reverse_level_order3) # Output: [1]\n\n    tree_nodes4 = []\n    root4 = build_tree(tree_nodes4)\n    reverse_level_order4 = reverse_level_order_with_parent(root4)\n    print(reverse_level_order4) # Output: []"
        ],
        "0.7": [
          "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef reverse_level_order(root):\n    if root is None:\n        return []\n\n    queue = [root]\n    result = []\n\n    while queue:\n        level_size = len(queue)\n        level_values = []\n\n        for _ in range(level_size):\n            node = queue.pop(0)\n            level_values.append(node.value)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(level_values)\n\n    return [val for level in reversed(result) for val in level]\n\nif __name__ == '__main__':\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(reverse_level_order(root))"
        ],
        "0.8": [
          "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef level_order_bottom(root):\n    if not root:\n        return []\n\n    queue = [root]\n    levels = []\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.pop(0)\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        levels.append(current_level)\n\n    return levels[::-1]\n\ndef reverse_level_order(root):\n    if not root:\n        return []\n\n    result = []\n    queue = [root]\n\n    while queue:\n        node = queue.pop(0)\n        result.append(node.val)\n\n        if node.right:\n            queue.append(node.right)\n        if node.left:\n            queue.append(node.left)\n\n    return result[::-1]\n\ndef bottom_up_level_order(root):\n    if not root:\n        return []\n\n    levels = []\n    queue = [(root, 0)]  # Store node and its level\n\n    while queue:\n        node, level = queue.pop(0)\n\n        if len(levels) <= level:\n            levels.append([])\n\n        levels[level].append(node.val)\n\n        if node.left:\n            queue.append((node.left, level + 1))\n        if node.right:\n            queue.append((node.right, level + 1))\n\n    return [level for level in reversed(levels)]\n\nif __name__ == '__main__':\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.right = Node(6)\n\n    result = bottom_up_level_order(root)\n    print(result)"
        ],
        "0.9": [
          "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef bottom_up_level_order(root):\n    if root is None:\n        return []\n\n    queue = [root]\n    level_nodes = []\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.pop(0)\n            current_level.append(node.data)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        level_nodes.append(current_level)\n\n    level_nodes.reverse()\n    result = []\n    for level in level_nodes:\n        result.extend(level)\n    return result\n\nif __name__ == '__main__':\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(bottom_up_level_order(root))"
        ],
        "1.0": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n\n    while queue:\n        level_size = len(queue)\n        current_level = []\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(current_level)\n\n    return result"
        ]
      }
    }
  }
}