{
  "post_href": "https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/discuss/2098804/Python3-Clean-Solution-using-Queue-Level-Order-Traversal",
  "python_solutions": "class Solution:\n    def zigzagLevelOrder(self, root):\n        \n        res = []\n        if not root: return res\n        zigzag = True\n        \n        q = collections.deque()\n        q.append(root)\n        \n        while q:\n            n = len(q)\n            nodesOfThisLevel = []\n            \n            for i in range(n):\n                node = q.popleft()\n                nodesOfThisLevel.append(node.val)\n                \n                if node.left: q.append(node.left)\n                if node.right: q.append(node.right)\n                    \n            if zigzag:\n                res.append(nodesOfThisLevel)\n                zigzag = False\n            else:\n                res.append(nodesOfThisLevel[::-1])\n                zigzag = True\n        \n        return res\n    \n# Time: O(N)\n# Space: O(N)",
  "slug": "binary-tree-zigzag-level-order-traversal",
  "post_title": "[Python3] Clean Solution using Queue Level Order Traversal",
  "user": "samirpaul1",
  "upvotes": 7,
  "views": 240,
  "problem_title": "binary tree zigzag level order traversal",
  "number": 103,
  "acceptance": 0.552,
  "difficulty": "Medium",
  "__index_level_0__": 614,
  "question": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n  Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]\nExample 2:\nInput: root = [1]\nOutput: [[1]]\nExample 3:\nInput: root = []\nOutput: []\n  Constraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-100 <= Node.val <= 100",
  "augmented_questions": {
    "keyboard": {
      "0.0": "Given the root of a binary tree, return the zigzag level order traversal of its nodes ' values. (i. e. , from left to right, then right to left for the next level and alternate between ).",
      "0.1": "Given the root of a binarH tree, return the zigzag level order tragersal of its nodes ' values. (i. e. , froh left to right, tmen right to left for the next level and alternate betwe3n ).",
      "0.2": "Given the $oot of a binary trSe, return the zigzag leve: order traversal of its nodes ' valuwC. (i. e. , from lefF to right, then right to legt for the ndxt leGel and altergQte between ).",
      "0.3": "Given the tooh of a binWru trFF, r$Gurn the ziBAag ,eCel oede5 grXvRrsal of its nodes ' BaluSs. (i. e. , fFim left to rigYG, then rinGt to left for the next oeCel and alternate vFt1een ).",
      "0.4": "TiveM the Tooy of a NinAEy 6reF, $e4ufn the SigxQg lef@l order traversal of its gides ' vwl8Rs. (i. e. , f%o, Isft to f9ght, thwB 4ihht to iegt for the GexG lfCel and zltdrJatD between ).",
      "0.5": "GUfdn the fo)t of a b(nag^ t4eW, rStufg the aKgzan oefei oFd#F t$xcRrsQl of its M0deD ' Gw>ues. (i. e. , g%om lRfF to r&gyF, HheJ #igtF to >efY for the Mex^ kede: and xpGrrnage beywRfg ).",
      "0.6": "G(vSB the t(9t of a buHwrt YDeW, r@6ugM the s9gSat KFv$l KrreG RGav3TsSp of its m8wes ' vaI&$x. (i. e. , dGoh .3Ct to EONht, tu@j rjgUh to :#f$ for the ndZ^ l4cSl and Zl4Wrnx$3 GWt@erG ).",
      "0.7": "nid@j the $8o^ of a v&nz3g Yte3, 5e$J$G the AirswY lWfr. K%SFr grxvFtXs/ of its hoC2Z ' Csl trC. (i. e. , e$im ;Sgt to r&BtF, HnFn GOvmt to k$fg for the JFx5 KdvSP and s,6DFJQte V#RDeeH ).",
      "0.8": "G(c2m the ep(% of a Vibqtu 5DWw, 5d5jgn the xJhssg ,eBF< *DseG 6rqG2Tcxk of its HIdSw ' vw,&#e. (i. e. , Ge*N ;3t4 to 4ibn4, %nFg rkVmy to PsVh for the Hrsf Odfsl and AigrFGa5d f@tESDG ).",
      "0.9": "v9DfM the Ek9$ of a Fkgq%% 4F#r, 5#YItH the XuHSsv ,SB3O peEr4 4#WG4TDX: of its m9S4c ' gw/jrA. (i. e. , dTih i@gH to $KtTg, fj3b F(hu^ to ?Ft4 for the MWcG .3bdK and xKF4$MX$F Vr$!s3m ).",
      "1.0": "hKB2M the TI8r of a NuBX$G yDDR, %$$ T#M the A8rxWT ;fFrk *%ss3 gdqgd#zw> of its hiXww ' cAo*3Z. (i. e. , t%iH :fr5 to FkByy, hnDj GjvYy to .3vH for the jrZR k@GrI and XPff%Jx^W hr^eR#j )."
    },
    "synonym": {
      "0.0": "Gift the root of a binary tree, bring back the zag stratum order traverse of information technology nodes ' values. (i. atomic number 99. , from left to correct, then right to left for the next degree and alternate between ).",
      "0.1": "Given the root of a binary tree, return the zigzag level order traversal of its node ' values. (i. e. , from left to right, then decently to leave for the next level and replacement between ).",
      "0.2": "Given the root of a binary tree, return the zag level order traversal of its nodes ' values. (ane. e. , from depart to right, so in good order to leave for the next level and alternate between ).",
      "0.3": "Collapse the root of a binary sir herbert beerbohm tree, return the zigzag level order traversal of information technology leaf node ' value. (i. e. , from get out to rectify, so mightily to leave behind for the following level and replacement between ).",
      "0.4": "Afford the radical of a binary tree, return the zigzag storey order traversal of information technology nodes ' values. (i. east. , from bequeath to compensate, so flop to left for the side by side horizontal surface and alternate between ).",
      "0.5": "Give the root of a binary tree diagram, repay the zig grade order traverse of information technology node ' value. (ane. e. , from impart to right, and then flop to lead for the following storey and alternate between ).",
      "0.6": "Yield the ascendent of a binary tree diagram, give back the zigzag level holy order traverse of it knob ' economic value. (ane. due east. , from left to correct, and so mighty to give for the succeeding horizontal surface and replacement between ).",
      "0.7": "Ease up the source of a binary tree diagram, recall the zag storey holy order traverse of information technology lymph gland ' note value. (ane. einsteinium. , from give to correct, and then correctly to leave for the following grade and surrogate between ).",
      "0.8": "Render the stem of a binary tree diagram, revert the zag degree ordering traverse of information technology node ' value. (one. es. , from leave to correct, and then flop to give for the adjacent point and surrogate between ).",
      "0.9": "Move over the beginning of a binary sir herbert beerbohm tree, render the zig floor purchase order traverse of information technology node ' value. (one. vitamin e. , from leave to rectify, and so properly to leave for the succeeding degree and surrogate between ).",
      "1.0": "Turn over the source of a binary tree diagram, come back the zig floor decree traverse of it node ' economic value. (one. eastward. , from leave to redress, and then correctly to leave for the succeeding degree and surrogate between )."
    },
    "random": {
      "0.0": "The of tree, return zigzag level order traversal of its nodes ' values. (. ., left to right, right left for and between ).",
      "0.1": "Given the root of a binary tree, return the zigzag level traversal of its nodes ' values. (i. e. , from left to right, right to left for the level alternate ).",
      "0.2": "The root of a binary tree, return the zigzag order traversal its ' values. (i. e. , from left to right, left for the level and between ).",
      "0.3": "Given the of, the order of its '. (i. ., from left to right, then right to for next and alternate between ).",
      "0.4": "The binary tree, zigzag level order traversal ' values. (. ., left right, to the next and alternate between ).",
      "0.5": "Given a tree, the order traversal of '. (i. e. , left, then to ).",
      "0.6": "The, return traversal '. (. ., from to, then and ).",
      "0.7": "The, '. (. ., left, between ).",
      "0.8": "The, '. (. ., , ).",
      "0.9": "The, '. (. ., , ).",
      "1.0": "The, '. (. ., , )."
    },
    "cut": {
      "0.0": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).",
      "0.1": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and a",
      "0.2": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for t",
      "0.3": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then r",
      "0.4": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from lef",
      "0.5": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' value",
      "0.6": "Given the root of a binary tree, return the zigzag level order traversal ",
      "0.7": "Given the root of a binary tree, return the zigzag leve",
      "0.8": "Given the root of a binary tree, retu",
      "0.9": "Given the root of ",
      "1.0": ""
    }
  },
  "llm_responses": {
    "openai": {
      "keyboard": {
        "0.0": [
          "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef zigzagLevelOrder(root):\n    if not root:\n        return []\n    \n    result = []\n    queue = deque([root])\n    left_to_right = True\n    \n    while queue:\n        level_size = len(queue)\n        level_nodes = []\n        \n        for _ in range(level_size):\n            node = queue.popleft()\n            level_nodes.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        \n        if not left_to_right:\n            level_nodes.reverse()\n        \n        result.append(level_nodes)\n        left_to_right = not left_to_right\n    \n    return result"
        ],
        "0.1": [
          "def zigzagLevelOrder(root):\n    if not root:\n        return []\n    \n    result = []\n    current_level = [root]\n    left_to_right = True\n    \n    while current_level:\n        level_values = []\n        next_level = []\n        \n        for node in current_level:\n            level_values.append(node.val)\n            if node.left:\n                next_level.append(node.left)\n            if node.right:\n                next_level.append(node.right)\n        \n        if not left_to_right:\n            level_values.reverse()\n        \n        result.append(level_values)\n        current_level = next_level\n        left_to_right = not left_to_right\n    \n    return result"
        ],
        "0.2": [
          "def zigzagLevelOrder(root):\n    if not root:\n        return []\n    \n    result = []\n    current_level = [root]\n    left_to_right = True\n    \n    while current_level:\n        level_values = []\n        next_level = []\n        \n        for node in current_level:\n            level_values.append(node.val)\n            if node.left:\n                next_level.append(node.left)\n            if node.right:\n                next_level.append(node.right)\n        \n        if not left_to_right:\n            level_values.reverse()\n        \n        result.append(level_values)\n        current_level = next_level\n        left_to_right = not left_to_right\n    \n    return result"
        ],
        "0.3": [
          "def zigzagLevelOrder(root):\n    if not root:\n        return []\n    \n    result = []\n    current_level = [root]\n    left_to_right = True\n    \n    while current_level:\n        level_values = []\n        next_level = []\n        \n        for node in current_level:\n            level_values.append(node.val)\n            if node.left:\n                next_level.append(node.left)\n            if node.right:\n                next_level.append(node.right)\n        \n        if not left_to_right:\n            level_values.reverse()\n        \n        result.append(level_values)\n        current_level = next_level\n        left_to_right = not left_to_right\n    \n    return result"
        ],
        "0.4": [
          "class TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef zigzag_level_order_traversal(root):\n    if not root:\n        return []\n\n    result = []\n    current_level = [root]\n    left_to_right = True\n\n    while current_level:\n        level_values = []\n        next_level = []\n\n        for node in current_level:\n            level_values.append(node.value)\n            if node.left:\n                next_level.append(node.left)\n            if node.right:\n                next_level.append(node.right)\n\n        if not left_to_right:\n            level_values.reverse()\n\n        result.append(level_values)\n        current_level = next_level\n        left_to_right = not left_to_right\n\n    return result"
        ],
        "0.5": [
          "def rearrange_string(s):\n    # Count the frequency of each character\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Create a list of characters sorted by frequency and then lexicographically\n    sorted_chars = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n\n    # Build the rearranged string\n    rearranged = []\n    for char, count in sorted_chars:\n        rearranged.append(char * count)\n\n    return ''.join(rearranged)\n\n# Example usage\ninput_string = \"aaabbc\"\noutput_string = rearrange_string(input_string)\nprint(output_string)"
        ],
        "0.6": [
          "def calculate_movement(vSB, t):\n    # Define the movement parameters\n    movement = {\n        'up': vSB[1] + t,\n        'down': vSB[1] - t,\n        'left': vSB[0] - t,\n        'right': vSB[0] + t\n    }\n    return movement\n\n# Example usage\nvSB = (5, 5)  # Starting position (x, y)\nt = 3  # Time or distance to move\nresult = calculate_movement(vSB, t)\nprint(result)"
        ],
        "0.7": [
          "def process_data(input_string):\n    # Clean the input string by removing unwanted characters\n    cleaned_string = ''.join(filter(str.isalnum, input_string))\n    \n    # Perform some operations on the cleaned string\n    result = cleaned_string[::-1]  # Reverse the cleaned string as an example\n    \n    return result\n\ninput_data = \"nid@j the $8o^ of a v&nz3g Yte3, 5e$J$G the AirswY lWfr. K%SFr grxvFtXs/ of its hoC2Z ' Csl trC.\"\noutput = process_data(input_data)\nprint(output)"
        ],
        "0.8": [
          "def calculate_vibration_percentage(data):\n    # Assuming data is a list of tuples (frequency, amplitude)\n    total_amplitude = sum(amplitude for frequency, amplitude in data)\n    vibration_percentage = [(frequency, (amplitude / total_amplitude) * 100) for frequency, amplitude in data]\n    return vibration_percentage\n\ndef main():\n    # Example data: list of (frequency, amplitude)\n    vibration_data = [(100, 5), (200, 15), (300, 10)]\n    result = calculate_vibration_percentage(vibration_data)\n    for frequency, percentage in result:\n        print(f\"Frequency: {frequency} Hz, Vibration Percentage: {percentage:.2f}%\")\n\nif __name__ == \"__main__\":\n    main()"
        ],
        "0.9": [
          "def process_string(input_string):\n    # Remove special characters and split into words\n    words = ''.join(e for e in input_string if e.isalnum() or e.isspace()).split()\n    \n    # Process words (example: convert to uppercase)\n    processed_words = [word.upper() for word in words]\n    \n    return processed_words\n\ninput_string = \"v9DfM the Ek9$ of a Fkgq%% 4F#r, 5#YItH the XuHSsv ,SB3O peEr4 4#WG4TDX: of its m9S4c ' gw/jrA. (i. e. , dTih i@gH to $KtTg, fj3b F(hu^ to ?Ft4 for the MWcG .3bdK and xKF4$MX$F Vr$!s3m ).\"\noutput = process_string(input_string)\nprint(output)"
        ],
        "1.0": [
          "def transform_string(input_string):\n    transformation_map = {\n        'h': 'H', 'K': 'k', 'B': 'b', '2': '2', 'M': 'm',\n        't': 'T', 'I': 'i', '8': '8', 'r': 'R', 'N': 'n',\n        'u': 'U', 'B': 'b', 'X': 'x', '$': '$', 'G': 'g',\n        'y': 'Y', 'D': 'd', 'D': 'd', 'R': 'r', '%': '%',\n        'T': 't', '#': '#', 'M': 'm', 'a': 'A', '8': '8',\n        'r': 'R', 'x': 'X', 'W': 'w', 't': 'T', ';': ';',\n        'f': 'F', 'F': 'f', 'k': 'K', ' ': ' ', '*': '*',\n        '%': '%', 's': 'S', '3': '3', 'g': 'G', 'd': 'D',\n        'q': 'Q', 'g': 'G', 'd': 'D', '#': '#', 'z': 'Z',\n        'w': 'W', '>': '>', 'o': 'O', 'f': 'F', 'i': 'I',\n        '.': '.', 'e': 'E', 'c': 'C', 'A': 'a', 'o': 'O',\n        '*': '*', '3': '3', 'Z': 'z', '(': '(', 'i': 'I',\n        '.': '.', 'e': 'E', ',': ',', 't': 'T', '%': '%',\n        'i': 'I', 'H': 'h', ':': ':', 'f': 'F', 'r': 'R',\n        '5': '5', 't': 'T', 'F': 'f', 'k': 'K', 'B': 'b',\n        'y': 'Y', 'h': 'H', 'n': 'N', 'D': 'd', 'j': 'J',\n        'G': 'g', 'j': 'J', 'v': 'V', 'Y': 'y', 'y': 'Y',\n        '3': '3', 'v': 'V', 'H': 'h', 'f': 'F', 'o': 'O',\n        'r': 'R', 't': 'T', 'h': 'H', 'e': 'E', ' ': ' ',\n        'j': 'J', 'r': 'R', 'Z': 'z', 'R': 'r', 'k': 'K',\n        '@': '@', 'G': 'g', 'r': 'R', 'I': 'i', ' ': ' ',\n        'X': 'x', 'P': 'p', 'f': 'F', 'f': 'F', '%': '%',\n        'J': 'j', 'x': 'X', '^': '^', 'W': 'w', ' ': ' ',\n        'h': 'H', 'r': 'R', '^': '^', 'e': 'E', 'R': 'r',\n        '#': '#', 'j': 'J'\n    }\n    \n    transformed_string = ''.join(transformation_map.get(char, char) for char in input_string)\n    return transformed_string\n\ninput_string = \"hKB2M the TI8r of a NuBX$G yDDR, %$$ T#M the A8rxWT ;fFrk *%ss3 gdqgd#zw> of its hiXww ' cAo*3Z. (i. e. , t%iH :fr5 to FkByy, hnDj GjvYy to .3vH for the jrZR k@GrI and XPff%Jx^W hr^eR#j ).\"\noutput_string = transform_string(input_string)\nprint(output_string)"
        ]
      }
    }
  }
}