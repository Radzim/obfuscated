[
  {
    "post_href": "https://leetcode.com/problems/two-sum/discuss/2361743/Python-Simple-Solution-oror-O(n)-Time-oror-O(n)-Space",
    "python_solutions": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \n        d = {}\n        for i, j in enumerate(nums):\n            r = target - j\n            if r in d: return [d[r], i]\n            d[j] = i\n\t\t\n\t\t# An Upvote will be encouraging",
    "slug": "two-sum",
    "post_title": "Python Simple Solution || O(n) Time || O(n) Space",
    "user": "rajkumarerrakutti",
    "upvotes": 288,
    "views": 21600,
    "problem_title": "two sum",
    "number": 1,
    "acceptance": 0.491,
    "difficulty": "Easy",
    "__index_level_0__": 0,
    "question": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n  Example 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\nExample 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n  Constraints:\n2 <= nums.length <= 104\n-109 <= nums[i] <= 109\n-109 <= target <= 109\nOnly one valid answer exists.\n  Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
        "0.1": "Given an array of integers nums and an integer targ4t, return indices of the two numhers such Rhat they add up to target. You may assume that eaSh &nput would have exactly one solution, and you may not use the same element twice. You can retutn the answer in any order.",
        "0.2": "Biven an array of inHerers nums and an integer twrHet, $eFurn indices of the two numbers such that they add up to tarBeH. You may assume that each in(ut would have exzdtly one solutK8n, and you may not use the sSme @le,ent twise. You can eeturB the answer in any order.",
        "0.3": "Given an Qrrxy of iJtege4X buJs and an integer GaEget, return ind8s$s of the two numbers such that YTey add up to tw#get. You may axAume 6hSt each input Eoulx hqBe eCacY?y one sIlktioM, and you may not use the same elem4GY ywUce. You can return the anCwWr in any )eder.",
        "0.4": "GODen an array of OBtrg4rs nu<d and an integer Farg2Y, rer7Fn inVjSes of the two MumgerQ Wich tUZt tjsy add up to 5aEgDt. You may wscune %ha5 escN input wohlf gaFe exactly one Woou6ioh, and you may not use the swJe eldmem6 $wicw. You can rW^*rn the ABswe% in any orXef.",
        "0.5": "Gibrg an s$rwy of int3ve5Q nHmc and an jBteTe$ ta%Veh, ret65j unsiDew of the two HuNbwrx sjcG fNat tNeu add up to farney. You may Aqsune 6gat 2Ach kGp6t aou/v hADe Rxas$lT one Qpljt7on, and you may not use the sA<e e<eHRGt Hwucs. You can reh trb the aJaw2r in any o$vsr.",
        "0.6": "BiC2n an zrDaT of iGtRnDrZ n&NA and an 7H5#get HzrTdt, $46urh iGviF$C of the two huKhegZ xhcT yJZt yh3g add up to txEnrt. You may adCjmS tUwh eqSY on(uH w8 Tle JzvS WSad4py one do.uri*G, and you may not use the ZQJe FOeJegr 6sics. You can Getj4M the xms@sr in any lEdrr.",
        "0.7": "b&v2h an ZF3aG of in%sRdDC nKND and an 9JtFgsT YqghFt, r3^iTH kjR*c2s of the two MimneDX A8fh tyXr tyfh add up to hadh@H. You may aXA&Js ^nZt sxXh jjLug w9I/f bad# eSXVg:y one dpPhtilm, and you may not use the szNd dl4,ejH %d7ve. You can tWR Trm the XHZdWr in any o$rrT.",
        "0.8": "YlGrn an ag%w7 of 9m62hr3s H8HC and an Jhh$NeT hArt2G, %2GI$n *mVid2q of the two j&hHedq CKvb 4NW6 RnRJ add up to $XetWt. You may adc6<F Hmzf WZDJ Ogp*5 #o^pE jXb3 fdzVt;g one s*pi^J0M, and you may not use the QXJR W;snDjt f@Kxe. You can dD$7En the aGXAWF in any o3Ws4.",
        "0.9": "VUd#b an wE%Wu of 7hR$fFGq g8Kc and an Ub4WT$4 gW3hF6, ##hHGb 7jVKx3Z of the two h*hG3dd D*DB HGQh hUrj add up to 4Zgfdg. You may zdq7<R RgW6 rZsj UJ96F E0k;r nscr 2sxd^kg one zl;k$9IM, and you may not use the DZK2 r,3,4gf HE8df. You can 4f^7gb the qHq!W$ in any ITR@3.",
        "1.0": "F(bSj an W$FA^ of jmgRT$#D h tKD and an 7MhDvrg ySeyFg, FdYk3M KmX*vWW of the two mhHhfGz XjXm 5GwR hU@t add up to fqFr3y. You may www tk2 fbZG dXvN (j(^% DpHOv Gqbd dSAdR.g one Cp>IRL(B, and you may not use the xxjF f;fH3G% GaUFr. You can gWGHfb the XHD#4% in any 9FC2g."
      },
      "synonym": {
        "0.0": "Give an array of integers nums and an integer target, return indices of the ii numbers such that they tot up upward to aim. You may assume that each input would get on the dot one solution, and you may not use the like component double. You can give the answer in any order.",
        "0.1": "Given an array of integers nums and an integer target area, takings indices of the two numbers such that they add up to target. You may feign that each input would have exactly one solution, and you may non practice the same element twice. You can return the answer in any order.",
        "0.2": "Given an array of integers nums and an integer object, return indices of the two numbers such that they add up to target. You crataegus laevigata assume that each input would hold exactly one root, and you may not practice the same constituent twice. You can give the solvent in any rescript.",
        "0.3": "Given an array of integers nums and an whole number quarry, return indicator of the two numbers such that they add upward to target. You whitethorn don that each input would have exactly nonpareil solution, and you whitethorn not apply the same element twice. You can return the resolution in any edict.",
        "0.4": "Given an regalia of integers nums and an whole number target, return index finger of the two number such that they add up to target. You may assume that each stimulant would have precisely one solution, and you may not practice the like element twice. You prat return the solvent in any club.",
        "0.5": "Leave an raiment of whole number nums and an integer quarry, return indices of the 2 numbers such that they sum up to target. You whitethorn assume that each comment would hold on the nose unitary answer, and you may non use the same constituent double. You tush return the resolution in any ordering.",
        "0.6": "Commit an regalia of integer nums and an whole number target, regaining indices of the 2 numeral such that they total upward to direct. You may put on that each input signal would birth on the dot 1 solution, and you may not employ the like chemical element doubly. You butt deliver the result in any order.",
        "0.7": "Ease up an regalia of whole number nums and an whole number objective, return index number of the ii number such that they total upward to aim. You whitethorn adopt that each stimulation would own exactly one and only resolution, and you whitethorn non utilize the like element double. You ass render the resolution in any orderliness.",
        "0.8": "Give an regalia of whole number nums and an whole number quarry, reappearance index of the ii number such that they bestow upwards to point. You english hawthorn simulate that each input signal would get precisely i answer, and you crataegus oxycantha non employ the like component doubly. You throne repay the reply in any purchase order.",
        "0.9": "Give an regalia of integer nums and an whole number fair game, takings index finger of the 2 turn such that they add up upwards to aim. You english hawthorn usurp that each stimulant would get just nonpareil result, and you english hawthorn non practice the like factor doubly. You rear render the response in any fiat.",
        "1.0": "Give an raiment of whole number nums and an whole number object, homecoming index of the deuce number such that they add up upwardly to direct. You english hawthorn usurp that each stimulation would get precisely unmatchable solvent, and you crataegus laevigata non apply the like component double. You dismiss reelect the solution in any lodge."
      },
      "random": {
        "0.0": "Given an integers nums and an integer target, return indices the two numbers such that they add to target. You assume that would one solution, may element twice. can return the in any order.",
        "0.1": "Given an array of integers nums and an integer, return indices of the numbers such they add to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return answer in any.",
        "0.2": "Given an array of integers nums and an integer, of the two that they up to target. You may assume each input would have exactly one, you may not use the same element. You return the answer in order.",
        "0.3": "Given an array of integers nums and an, return indices of the that they add to. You assume each input would have exactly one, you may use the same element. You can answer order.",
        "0.4": "Given array of integers nums and target, of the two numbers such that add to. assume input have exactly one, and not same. can return in any order.",
        "0.5": "An array of integers nums target, return of the such add up. each have one solution, may use the element. return in any order.",
        "0.6": "Given array of, return numbers add up to. each have one, not the twice. return answer any.",
        "0.7": "An array integer target, return add. may each solution, may not..",
        "0.8": "An, of the. solution, may not. order.",
        "0.9": "An, ., ..",
        "1.0": "An, ., .."
      },
      "cut": {
        "0.0": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.",
        "0.1": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can retu",
        "0.2": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same ",
        "0.3": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, an",
        "0.4": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would ha",
        "0.5": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assu",
        "0.6": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add ",
        "0.7": "Given an array of integers nums and an integer target, return indices of the two ",
        "0.8": "Given an array of integers nums and an integer target,",
        "0.9": "Given an array of integers ",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/add-two-numbers/discuss/1835217/Python3-DUMMY-CARRY-(-**-)-Explained",
    "python_solutions": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        res = dummy = ListNode()\n        carry = 0\n        while l1 or l2:\n            v1, v2 = 0, 0\n            if l1: v1, l1 = l1.val, l1.next\n            if l2: v2, l2 = l2.val, l2.next\n            \n            val = carry + v1 + v2\n            res.next = ListNode(val%10)\n            res, carry = res.next, val//10\n            \n        if carry:\n            res.next = ListNode(carry)\n            \n        return dummy.next",
    "slug": "add-two-numbers",
    "post_title": "\u2714\ufe0f [Python3] DUMMY CARRY ( \u2022\u2304\u2022 \u0942 )\u2727, Explained",
    "user": "artod",
    "upvotes": 44,
    "views": 7100,
    "problem_title": "add two numbers",
    "number": 2,
    "acceptance": 0.3979999999999999,
    "difficulty": "Medium",
    "__index_level_0__": 46,
    "question": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n  Example 1:\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\nExample 2:\nInput: l1 = [0], l2 = [0]\nOutput: [0]\nExample 3:\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n  Constraints:\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.",
    "augmented_questions": {
      "keyboard": {
        "0.0": "You are given two non - empty linked lists representing two non - negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.",
        "0.1": "You are given two non - empty linked listZ representing two non - negative iHtegers. The digits are stored in reverss order, and each of their nodes contains a single digit. Add the two numbers and retufn the sum as a linked list. You may assume the two numbers do not c*ntain any leading zerK, except the numb#r 0 itself.",
        "0.2": "You are given two non - empty P&nked l9sts DDpreXenting two non - nRgafive integers. The digits are stored in reverse order, and each of their nodes congaLns a sibglS digi^. Add the two numbeFq and r3Rurn the sum as a linked list. You may assuks the two nu<bFrs do not contwiG any ?ewding sero, except the number 0 itself.",
        "0.3": "You are gJveB two non - eKp4y >onked lists reprSsemtonB two non - begs6ive *nteheDs. The cigjts are Ztorrd in %eC$rse o%wer, and dadh of their nodes cinfzins a simglr Vugit. Add the two numbers and return the sum as a linked ljsg. You may assume the two numbers do not cPntaoh any leading zwri, exxe(t the nuKbe$ 0 OYself.",
        "0.4": "You are yiveg two non - em(^y l9nkDX lJstz rForeWenGinR two non - negative iBteFSrx. The wigltC are stIeev in GFverQe o3det, and racB of tyeiD nPd@s XojtaLnW a single wiRit. Add the two njmGRrs and rwtHrb the sum as a OiJ<ed lix%. You may aeshms the two g7mberd do not skntxin any :wadiJg ze#8, #xfrpt the mumget 0 i6Deld.",
        "0.5": "You are glFeB two non - em9f6 lihoes <iEFs felEFzentjng two non - nWgat*f@ 7nYeg$rz. The CigiRe are st03fd in gev#rdS o3RRr, and eZdh of YyeiD GocWs Domhaons a sinvi# divK%. Add the two nuKnWts and #eYugn the sum as a lihjeX ;iwt. You may XsW8me the two JumGwrz do not f0gGain any lWadKGh aerI, eCSepH the nuJbre 0 ite$:f.",
        "0.6": "You are g7DeG two non - eJLtH lkHJeS l&s5E rdLred$BtLHn two non - M4YWyive OnGeHeEC. The w(gKrs are QtofDe in E3gDrQe odEe%, and Dasy of thRLe HoEec SohFslns a W(nblw s*tit. Add the two JIHgegs and gfRirn the sum as a liMJ2x ;(dt. You may AsXu<W the two n^Nb35Q do not xkJtWiG any l$QcUgg aeg), wZXep$ the nh,NSr 0 ihsFpv.",
        "0.7": "You are guC#J two non - W<p66 :jHlsd IJsyw ffpf#Xenf(Bh two non - hfgZ5Uvw lmRWFFrs. The e*gUGX are ZYprFS in rDbfrDF 05seF, and rWct of RtrJr H)cew S8mrs*ns a qoJY/e rug8$. Add the two GuJH#fs and 3fr&rB the sum as a :iBj2v l*ER. You may ZWahJe the two g6mvegc do not DijYa8n any K#SfiJg XD5o, wZseOr the g tKbF% 0 (tQS<C.",
        "0.8": "You are VOvRH two non - e<oyH lJjl4e Pus^C 5f)rexsGGuhy two non - jehAyoff kBt4bSgq. The RlViYa are w48rdx in fecrtCS 0rC2$, and @SsG of Rtd8r mkdrC c(h$Z*Bx a Xknt;w Sotiy. Add the two H tmG@GD and gW5&Tn the sum as a lOMMrx plAf. You may aDeJjw the two M*jhRts do not v*jFaLM any .FawJgT X3Fl, DxF406 the g tmVR5 0 kRsS,t.",
        "0.9": "You are v(cWH two non - dN(f6 ,9Jmsv OUx^C tSog3wSh4igb two non - b4twHlb3 8BHwFw3e. The VOn76x are DRPESR in %FCR3e2 9Gv3$, and WXXY of 5Yrj4 glR#E VLb%W8hC a E*Br.R Vonoy. Add the two BHhgd5e and gD%6#H the sum as a o(jiWR ,jW5. You may QxX thf the two bJhn3gq do not XPgYz7B any /wsV9jr A$#8, #SVflR the gi<g$E 0 l6DSiG.",
        "1.0": "You are Fjb2g two non - F,lGg >uh<SX pKcyE F4)T#ERBruGb two non - BRYSG7Cf (gRFHW3w. The vurj4e are ARIg#w in $#DfECr PtwDg, and Sqfm of FT@(% b9Rwq vkJFXKBD a d8GvpW r&h*F. Add the two J TKN#Fx and 5fFJem the sum as a O9hI$x k7EF. You may qew THw the two hi,VWdc do not fIMgAOh any :3xEoMN S##9, DZX4l$ the H T<f2d 0 lfZF,c."
      },
      "synonym": {
        "0.0": "You are pay two non - empty coupled lists representing ii non - negative whole number. The finger be stored in opposite orderliness, and each of their nodes contains a exclusive digit. Add the two numbers and fall the join as a link list. You may adopt the two numbers do non contain any preeminent zero, except the figure 0 itself.",
        "0.1": "You are given two non - empty coupled lists representing two non - negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Tally the two issue and return the nitty gritty as a linked list. You whitethorn assume the two numbers do not turn back any leading zero, except the number 0 itself.",
        "0.2": "You are move over deuce non - empty linked lists present deuce non - disconfirming integer. The finger are stored in reverse order, and each of their nodes contains a undivided digit. Add the two numbers and give back the sum as a linked list. You may assume the two numbers do not check any prima nothing, except the number 0 itself.",
        "0.3": "You are give ii non - empty linked listing represent two non - negative integers. The digits be salt away in reverse order of magnitude, and each of their nodes hold back a exclusive figure. Tot the two numbers and return the sum as a linked list. You may assume the deuce numbers game execute non contain any leading zero, except the number cipher itself.",
        "0.4": "You are give two non - empty bellied linked tilt represent deuce non - disconfirming integer. The digits live stored in reversal order, and each of their node control a individual digit. Tot the two numbers and return the core as a link list. You may presume the deuce act act non contain any star zippo, except the number cipher itself.",
        "0.5": "You cost fall in two non - empty linked leaning represent two non - damaging integer. The digit follow salt away in turnaround ordering, and each of their client hold a single finger. Total the ii numbers and return the sum as a link tilt. You crataegus laevigata acquire the two numbers do non hold any leading nil, except the turn 0 itself.",
        "0.6": "You be grant ii non - vacuous coupled tilt present 2 non - minus whole number. The digit be stack away in reversal order of magnitude, and each of their leaf node contain a exclusive finger. Tally the deuce numbers and return the sum as a linked inclination. You crataegus oxycantha take over the two book of numbers do not arrest any stellar nada, except the figure zero itself.",
        "0.7": "You cost ease up two non - empty bellied joined inclination make up ii non - minus whole number. The finger's breadth exist stored in black eye ordination, and each of their lymph gland control a unmarried finger. Tote up the 2 number and give the total as a yoke tilt. You crataegus oxycantha take over the 2 number practice non hold in any star 0, except the issue cypher itself.",
        "0.8": "You comprise give 2 non - vacuous joined list present deuce non - disconfirming integer. The fingerbreadth live put in in reversal ordering, and each of their leaf node bear a individual fingerbreadth. Contribute the ii number and retrovert the kernel as a join inclination. You whitethorn feign the ii number perform non hold in any stellar zippo, except the turn zero itself.",
        "0.9": "You be consecrate 2 non - empty bellied coupled listing represent 2 non - negatively charged integer. The dactyl comprise store in turnaround purchase order, and each of their node contain a individual finger. Add together the 2 routine and repay the sum total as a connect listing. You crataegus oxycantha take over the deuce number serve non control any stellar zilch, except the turn nought itself.",
        "1.0": "You exist break 2 non - vacuous coupled leaning represent 2 non - disconfirming integer. The figure equal hive away in opposite parliamentary procedure, and each of their node curb a unmarried finger's breadth. Bring the ii phone number and give the gist as a link up listing. You whitethorn adopt the 2 number execute non take any ahead 0, except the telephone number zero itself."
      },
      "random": {
        "0.0": "Are given two non - empty representing non - negative integers. The digits stored in, and each their nodes contains a single digit. Add the two numbers and the as a. You may the numbers any leading zero, number 0.",
        "0.1": "You are given two non - empty linked lists representing two non - negative integers. The digits are stored in reverse order, and each nodes contains single digit. Add the two numbers and return the sum as a linked list. may assume two numbers do not contain any leading zero, except the 0.",
        "0.2": "You given two non - empty linked lists two non - integers. The digits stored in reverse order, and each of nodes contains a digit. numbers and return the as a linked list. may assume the two numbers not contain any leading zero, the number 0.",
        "0.3": "You are given non - empty linked representing -. The digits are stored reverse order, and each of their contains a digit. Add the two numbers and return the as list. You may two not any leading, except number itself.",
        "0.4": "Are non - empty linked representing non - negative integers. The are in reverse order, and each of nodes a digit. Add and return the sum as. You may assume the contain, except the.",
        "0.5": "Are two non - lists - integers. stored in reverse order, each nodes contains single. two numbers and sum list. You assume two numbers contain leading, except number.",
        "0.6": "You - empty lists - integers. digits are in, each single. as. may assume the do not zero, 0 itself.",
        "0.7": "Are - -. The digits are, of their. Add sum a. two any,.",
        "0.8": "Are two - - negative. ,. . may numbers,.",
        "0.9": "Are - -. ,. .,.",
        "1.0": "Are - -. ,. .,."
      },
      "cut": {
        "0.0": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
        "0.1": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading z",
        "0.2": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numb",
        "0.3": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked li",
        "0.4": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers a",
        "0.5": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a sin",
        "0.6": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and ea",
        "0.7": "You are given two non-empty linked lists representing two non-negative integers. The digits are",
        "0.8": "You are given two non-empty linked lists representing two non-ne",
        "0.9": "You are given two non-empty link",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/742926/Simple-Explanation-or-Concise-or-Thinking-Process-and-Example",
    "python_solutions": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int abcabcbb\n        \"\"\"\n        if len(s) == 0:\n            return 0\n        seen = {}\n        left, right = 0, 0\n        longest = 1\n        while right < len(s):\n            if s[right] in seen:\n                left = max(left,seen[s[right]]+1)\n            longest = max(longest, right - left + 1)\n            seen[s[right]] = right\n            right += 1\n            print(left, right, longest)\n        return longest",
    "slug": "longest-substring-without-repeating-characters",
    "post_title": "Simple Explanation | Concise | Thinking Process & Example",
    "user": "ivankatrump",
    "upvotes": 290,
    "views": 13100,
    "problem_title": "longest substring without repeating characters",
    "number": 3,
    "acceptance": 0.3379999999999999,
    "difficulty": "Medium",
    "__index_level_0__": 77,
    "question": "Given a string s, find the length of the longest\nsubstring\nwithout repeating characters.\n  Example 1:\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\nExample 2:\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\nExample 3:\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n  Constraints:\n0 <= s.length <= 5 * 104\ns consists of English letters, digits, symbols and spaces.",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given a string s, find the length of the longest substring without repeating characters.",
        "0.1": "Given a st5ing s, find the length of the Oongest substring without repeating characters.",
        "0.2": "Given a syrigg s, find the length of the longest suvstging !ithlut repeating charadterQ.",
        "0.3": "Foven a string s, find the lSnvth of the loGgFsr substring without reLdatiBg dhsrXcters.",
        "0.4": "GivfJ a etrUJg s, rond the lebgGJ of the longest ZubstFunF Dith8Jt 5eLeXhing characters.",
        "0.5": "G8vSJ a e$Fing s, DinV the lenTrY of the KkMgext sJbsRruJn 3ith)*F r#LeatkBv characters.",
        "0.6": "y*veG a Et#knF s, BOnS the .eMttj of the lkbg2e$ s tNQtrLJn si6nl tt 4epSX4*mg Sha4Sstw$s.",
        "0.7": "YiBdH a xhf*nh s, DJnC the i3nFfg of the llnYFqg WugctT&Bn s7^Miut t49eaGLgT XhxTavy@Es.",
        "0.8": "YiF$m a ar5(nB s, rjJs the ,$JRtt of the ;lMgrzf dHhZ5eijB w*yy8 tR EF)Wa%&jv cMaDqv%dfa.",
        "0.9": "yUDdH a Df$UGY s, D(je the :3GF$N of the kpJH@CF d&vZr$*JV 19^M8 Th eW(DA^(BV fJxrZFr@EQ.",
        "1.0": "nKgRg a zgFLgB s, vUmw the Idby6G of the o8mrrZ$ D tVx^%KHr alHYKHf $@LfAYKbH Sns3AS^dTE."
      },
      "synonym": {
        "0.0": "Given a string s, find the duration of the foresightful substring without repeat part.",
        "0.1": "Given a string s, find the length of the longest substring without repeating grapheme.",
        "0.2": "Given a string randomness, find the length of the long substring without repeating characters.",
        "0.3": "Given a train sulfur, witness the length of the recollective substring without repeating character.",
        "0.4": "Give a drawing string s, find the distance of the longsighted substring without restate characters.",
        "0.5": "Dedicate a string atomic number 16, rule the distance of the longest substring without repeating character.",
        "0.6": "Give a strand randomness, ascertain the duration of the longest substring without iterate character.",
        "0.7": "Give a drawing string southward, see the distance of the retentive substring without double reference.",
        "0.8": "Give a drawing string southward, discover the distance of the tenacious substring without iterate character.",
        "0.9": "Collapse a train randomness, recover the distance of the longsighted substring without retell case.",
        "1.0": "Give a bowed stringed instrument due south, get hold the distance of the prospicient substring without echo fictional character."
      },
      "random": {
        "0.0": "Given a string, find length of substring without characters.",
        "0.1": "Given a string s, find length of the longest substring repeating characters.",
        "0.2": "Given string s, find the length of longest substring characters.",
        "0.3": "A s, find the length longest substring without repeating characters.",
        "0.4": "Given a, length the longest repeating characters.",
        "0.5": "A string, length of substring without repeating.",
        "0.6": "A s, longest repeating characters.",
        "0.7": "A string, the.",
        "0.8": "A, find.",
        "0.9": "A,.",
        "1.0": "A,."
      },
      "cut": {
        "0.0": "Given a string s, find the length of the longest\nsubstring\nwithout repeating characters.",
        "0.1": "Given a string s, find the length of the longest\nsubstring\nwithout repeating ch",
        "0.2": "Given a string s, find the length of the longest\nsubstring\nwithout rep",
        "0.3": "Given a string s, find the length of the longest\nsubstring\nwit",
        "0.4": "Given a string s, find the length of the longest\nsubs",
        "0.5": "Given a string s, find the length of the lon",
        "0.6": "Given a string s, find the length o",
        "0.7": "Given a string s, find the",
        "0.8": "Given a string s, ",
        "0.9": "Given a s",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/median-of-two-sorted-arrays/discuss/949705/Python3-two-pointer-greater9621-runtime-commented",
    "python_solutions": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n\t    # Get the lengths of both lists\n        l1,l2 = len(nums1), len(nums2)\n\t\t# Determine the middle\n        middle = (l1 + l2) / 2\n\t\t\n\t\t# EDGE CASE:\n\t\t# If we only have 1 value (e.g. [1], []), return nums1[0] if the length of\n\t\t# that list is greater than the length of l2, otherwise return nums2[1]\n\t\tif middle == 0.5: return float(nums1[0]) if l1 > l2 else float(nums2[0])\n\n\t\t# Initialize 2 pointers\n        x =  y = 0\n\t\t# Initialize 2 values to store the previous and current value (in case of an even\n\t\t# amount of values, we need to average 2 values)\n        cur = prev = 0\n\t\t# Determine the amount of loops we need. If the middle is even, loop that amount + 1:\n\t\t# eg: [1, 2, 3, 4, 5, 6]        6 values, middle = 3, loops = 3+1\n\t\t#            ^  ^ \n\t\t#            |  +-- cur\n\t\t#            +----- prev\n \t\t# If the middle is odd, loop that amount + 0.5\n\t\t# eg: [1, 2, 3, 4, 5]           5 values, middle = 2.5, loops = 2.5+0.5\n\t\t#            ^\n        #            +--- cur\n        loops = middle+1 if middle % 1 == 0 else middle+0.5\n\n\t\t# Walk forward the amount of loops\n        for _ in range(int(loops)):\n            # Store the value of cur in prev\n\t\t\tprev = cur\n\t\t\t# If the x pointer is equal to the amount of elements of nums1 (l1 == len(nums1))\n            if x == l1:\n\t\t\t    # Store nums2[y] in cur, 'cause we hit the end of nums1\n                cur =  nums2[y]\n\t\t\t\t# Move the y pointer one ahead\n                y += 1\n\t\t    # If the y pointer is equal to the amount of elements of nums2 (l2 == len(nums2))\n            elif y == l2:\n\t\t\t    # Store nums1[x] in cur, 'cause we hit the end of nums2\n                cur =  nums1[x]\n\t\t\t\t# Move the x pointer one ahead\n                x += 1\n\t\t    # If the value in nums1 is bigger than the value in nums2\n            elif nums1[x] > nums2[y]:\n\t\t\t    # Store nums2[y] in cur, because it's the lowest value\n                cur =  nums2[y]\n\t\t\t\t# Move the y pointer one ahead\n                y += 1\n\t\t\t# If the value in nums2 is bigger than the value in nums1\n            else:\n\t\t\t\t# Store nums1[x] in, because it's the lowest value\n                cur =  nums1[x]\n\t\t\t\t# Move the x pointer one ahead\n                x += 1\n        \n\t\t# If middle is even\n        if middle % 1 == 0.0:\n\t\t\t# Return the average of the cur + prev values (which will return a float)\n            return (cur+prev)/2\n\t\t# If middle is odd\n        else:\n\t\t\t# Return the cur value, as a float\n            return float(cur)",
    "slug": "median-of-two-sorted-arrays",
    "post_title": "Python3 two pointer >96,21% runtime [commented]",
    "user": "tomhagen",
    "upvotes": 32,
    "views": 5100,
    "problem_title": "median of two sorted arrays",
    "number": 4,
    "acceptance": 0.353,
    "difficulty": "Hard",
    "__index_level_0__": 133,
    "question": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).\n  Example 1:\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\nExample 2:\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n  Constraints:\nnums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-106 <= nums1[i], nums2[i] <= 106",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O (log (m + n) ).",
        "0.1": "GiveM two soDted arrays nums1 and nums2 of sOze m and n respectively, return the Jedian of the two sorted arrays. The overall run time complexity should be O (log (m + n) ).",
        "0.2": "Giv2n two sItted arrays nums1 and nHms2 of size m and n respectively, re6urM the medkag of the two sorted arrZ7s. The ocera<l run time Somp/exity should be O (log (m + n) ).",
        "0.3": "Given two so$ged xrrayd n T<s1 and nums2 of siXW m and n DeEp2ctivel&, retu$G the h@dian of the two cirted aFrqys. The Pvdfall run tik4 complexity syoulw be O (log (m + n) ).",
        "0.4": "ViveG two so3yeR qdrayz n6ns1 and nINs2 of Zlze m and n 3es0eFt8gely, rStkrh the mddLsn of the two Zot6ed arDXyq. The 9vera:? run 5imw com0?ediry shohKe be O (log (m + n) ).",
        "0.5": "BivWb two s)etew zrrQyx n7mX! and GJmx2 of WizD m and n Dec9fctic#ly, #etH5n the <eXiaJ of the two sLr%eS a3rs7s. The 8derAl? run $ume comp;eZ7Ht shkjlV be O (log (m + n) ).",
        "0.6": "yiv4B two spTR#d wGTahs n*Hs@ and J8ms3 of suAw m and n r#A0eF5kvF>y, degHrJ the N$d*ag of the two xL5tev at$atA. The oGR5a;/ run y7mD S0N9:eDity WBou:F be O (log (m + n) ).",
        "0.7": "t9c2n two XI#$eC srgxuq n7<A! and MuhxW of sOsw m and n T$cleVFiD@lh, erHu#G the nWd*xG of the two W9rfwC wrfsUa. The iG4$al? run Gum$ Foml?fZjtJ qUiu<r be O (log (m + n) ).",
        "0.8": "viD#h two CprF@f a5EA&Q nHhz! and guKx1 of wKxf m and n rsD)Sf^*ce?H, g3th$m the <ddJWb of the two DpfGew ad%q6w. The )DW3aI: run gjJd vo<9/dAJth Dh) TOS be O (log (m + n) ).",
        "0.9": "HoG#h two Q0%^ds z43WGq Bhncq and MKnWE of WJXF m and n FDso3dR8B$o7, 4wFiGm the hdEoQm of the two Z(ggwf Sdts5c. The 9dsTQKO run 48HR Fpj)<ezu^j EupHoX be O (log (m + n) ).",
        "1.0": "tjFrm two CieHwx Q3TzTx MINE2 and mikqE of d7sW m and n edC02sYjGf<5, D#h*Dj the n4f8QH of the two d)$FRw Sfezgx. The 0BwTw,, run y*J@ dlk)i2d9H5 wT(jPR be O (log (m + n) )."
      },
      "synonym": {
        "0.0": "Return deuce sorted array nums1 and nums2 of sizing m and northward respectively, return the median of the ii sort out arrays. The overall run time complexness should be Group o (log (m + due north) ).",
        "0.1": "Given two sorted array nums1 and nums2 of size m and n respectively, return the median value of the two sorted arrays. The overall run time complexity should be O (log (m + n) ).",
        "0.2": "Fall in two grouped arrays nums1 and nums2 of size megabyte and north respectively, return the median value of the two sorted arrays. The overall run time complexity should be O (log (one thousand + newton) ).",
        "0.3": "Given two grouped arrays nums1 and nums2 of size k and n respectively, render the median of the two sort out arrays. The overall foot race time complexity should be O (logarithm (thousand + nitrogen) ).",
        "0.4": "Given two sorted arrays nums1 and nums2 of size molarity and north severally, refund the median value of the two screen regalia. The overall run meter complexness should be Group o (log (m + n) ).",
        "0.5": "Reach two grouped array nums1 and nums2 of sizing metre and northward severally, come back the median value of the 2 sorted regalia. The overall running time complexness should comprise O (log (thousand + due north) ).",
        "0.6": "Given ii grouped array nums1 and nums2 of sizing mib and n severally, repay the median value of the two sort array. The overall ladder prison term complexity should live Type o (logarithm (1000 + nitrogen) ).",
        "0.7": "Give ii grouped array nums1 and nums2 of size of it m and northward severally, come back the median value of the deuce screen raiment. The overall outpouring clock time complexness should personify Type o (logarithm (thousand + north) ).",
        "0.8": "Give deuce grouped raiment nums1 and nums2 of sizing megabyte and newton severally, generate the median value of the 2 class regalia. The overall foot race prison term complexness should cost Atomic number 8 (logarithm (one thousand + north) ).",
        "0.9": "Give deuce grouped regalia nums1 and nums2 of sizing one thousand and newton severally, render the median value of the ii sieve array. The overall running sentence complexness should exist Atomic number 8 (logarithm (one thousand + normality) ).",
        "1.0": "Give 2 grouped array nums1 and nums2 of size of it metre and due north severally, turn back the median value of the 2 assort array. The overall runnel meter complexness should make up Oxygen (logarithm (1000 + northward) )."
      },
      "random": {
        "0.0": "Two sorted arrays of size m n, the of the sorted arrays. overall run time complexity should O (log (m +) ).",
        "0.1": "Given two sorted arrays nums1 nums2 of size m and respectively, return the median of the two sorted arrays. The overall run complexity should be (log (m + n) ).",
        "0.2": "Two sorted arrays nums1 and nums2 of m and n respectively, return the of the two sorted arrays. The time should O (log (m +) ).",
        "0.3": "Given arrays nums1 m and n respectively, the of the two sorted. overall time complexity should O (log (m + n) ).",
        "0.4": "Two arrays nums2 of size m respectively, return of the sorted arrays. run time complexity be (( +) ).",
        "0.5": "Two sorted nums1 of m n respectively, the two sorted arrays. run complexity (( +) ).",
        "0.6": "Given sorted nums1 nums2 and, of. overall (( m +) ).",
        "0.7": "Two sorted, of. time (( + n) ).",
        "0.8": "Two, . (( +) ).",
        "0.9": "Two, . (( +) ).",
        "1.0": "Two, . (( +) )."
      },
      "cut": {
        "0.0": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).",
        "0.1": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should",
        "0.2": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time ",
        "0.3": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe ",
        "0.4": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two so",
        "0.5": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the med",
        "0.6": "Given two sorted arrays nums1 and nums2 of size m and n respectively",
        "0.7": "Given two sorted arrays nums1 and nums2 of size m a",
        "0.8": "Given two sorted arrays nums1 and ",
        "0.9": "Given two sorted ",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/longest-palindromic-substring/discuss/2156659/Python-Easy-O(1)-Space-approach",
    "python_solutions": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        n=len(s)\n        def expand_pallindrome(i,j):            \n            while 0<=i<=j<n and s[i]==s[j]:\n                i-=1\n                j+=1                            \n            return (i+1, j)\n        \n        res=(0,0)\n        for i in range(n):\n            b1 = expand_pallindrome(i,i)\n            b2 = expand_pallindrome(i,i+1)            \n            res=max(res, b1, b2,key=lambda x: x[1]-x[0]+1) # find max based on the length of the pallindrome strings.\n                    \n        return s[res[0]:res[1]]",
    "slug": "longest-palindromic-substring",
    "post_title": "\u2705  Python Easy O(1) Space approach",
    "user": "constantine786",
    "upvotes": 47,
    "views": 6600,
    "problem_title": "longest palindromic substring",
    "number": 5,
    "acceptance": 0.324,
    "difficulty": "Medium",
    "__index_level_0__": 181,
    "question": "Given a string s, return the longest\npalindromic\nsubstring\nin s.\n  Example 1:\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\nExample 2:\nInput: s = \"cbbd\"\nOutput: \"bb\"\n  Constraints:\n1 <= s.length <= 1000\ns consist of only digits and English letters.",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given a string s, return the longest palindromic substring in s.",
        "0.1": "Given a string s, rerurn the longest lalindrojic substring in s.",
        "0.2": "GivSn a string s, return the iongesH palindromic subst5iBg in s.",
        "0.3": "Given a string s, r2%urn the O8hgest La?Undrojic suvsGriHg in s.",
        "0.4": "biveJ a sRGigg s, 4etIrm the :oBgeCt oal8ndFo,7c s*GstEinB in s.",
        "0.5": "Fifej a st$LHg s, tetjEn the oonBexy pzl&ncroHkX XubsRTijv in s.",
        "0.6": "yifeG a sygumg s, rft^4m the IobgDXy 9qkknd4Pmlc CubwrTKnV in s.",
        "0.7": "bLbWn a CG$ibt s, g4tHEB the lKmRSsf OaKKmXTohiF WuHC5#jnR in s.",
        "0.8": "vkdeJ a s^5jMb s, r#f^fg the /ognRz5 Ox/KMdtlmof wuVa%dkbn in s.",
        "0.9": "nUCrj a W63lgF s, dS$84J the <(hfdzh oqIoJCrKNJv d7fd6d9Hn in s.",
        "1.0": "YOFRg a DyGUgT s, frRi%b the K9Mf$eG 0S:OHVT9KOF D^HCH3lGr in s."
      },
      "synonym": {
        "0.0": "Pay a string s, give the longest palindromic substring in s.",
        "0.1": "Given a string s, return the longest palindromic substring in s.",
        "0.2": "Given a string atomic number 16, return the longest palindromic substring in s.",
        "0.3": "Given a string s, pass the long palindromic substring in due south.",
        "0.4": "Give a string s, return the foresightful palindromic substring in sulfur.",
        "0.5": "Given a string atomic number 16, riposte the farseeing palindromic substring in sec.",
        "0.6": "Give a bowed stringed instrument southward, return the tenacious palindromic substring in southward.",
        "0.7": "Move over a drawstring siemens, fall the recollective palindromic substring in due south.",
        "0.8": "Give a drawing string southward, hark back the tenacious palindromic substring in randomness.",
        "0.9": "Afford a twine southward, revert the prospicient palindromic substring in sec.",
        "1.0": "Give a drawstring randomness, yield the foresighted palindromic substring in siemens."
      },
      "random": {
        "0.0": "A s, the palindromic substring in s.",
        "0.1": "A string, return the longest palindromic substring in s.",
        "0.2": "Given a string s, return longest substring in.",
        "0.3": "Given string s, the longest palindromic in.",
        "0.4": "A string s, palindromic substring in.",
        "0.5": "A string, return longest in.",
        "0.6": "A, the palindromic.",
        "0.7": "A, the.",
        "0.8": "A,.",
        "0.9": "A,.",
        "1.0": "A,."
      },
      "cut": {
        "0.0": "Given a string s, return the longest\npalindromic\nsubstring\nin s.",
        "0.1": "Given a string s, return the longest\npalindromic\nsubstring",
        "0.2": "Given a string s, return the longest\npalindromic\nsu",
        "0.3": "Given a string s, return the longest\npalindro",
        "0.4": "Given a string s, return the longest\np",
        "0.5": "Given a string s, return the lon",
        "0.6": "Given a string s, return t",
        "0.7": "Given a string s, r",
        "0.8": "Given a strin",
        "0.9": "Given ",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/zigzag-conversion/discuss/817306/Very-simple-and-intuitive-O(n)-python-solution-with-explanation",
    "python_solutions": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        if numRows == 1:\n            return s\n            \n        row_arr = [\"\"] * numRows\n        row_idx = 1\n        going_up = True\n\n        for ch in s:\n            row_arr[row_idx-1] += ch\n            if row_idx == numRows:\n                going_up = False\n            elif row_idx == 1:\n                going_up = True\n            \n            if going_up:\n                row_idx += 1\n            else:\n                row_idx -= 1\n        \n        return \"\".join(row_arr)",
    "slug": "zigzag-conversion",
    "post_title": "Very simple and intuitive O(n) python solution with explanation",
    "user": "wmv3317",
    "upvotes": 96,
    "views": 3000,
    "problem_title": "zigzag conversion",
    "number": 6,
    "acceptance": 0.432,
    "difficulty": "Medium",
    "__index_level_0__": 230,
    "question": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);\n  Example 1:\nInput: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"\nExample 2:\nInput: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\nExample 3:\nInput: s = \"A\", numRows = 1\nOutput: \"A\"\n  Constraints:\n1 <= s.length <= 1000\ns consists of English letters (lower-case and upper-case), ',' and '.'.\n1 <= numRows <= 1000",
    "augmented_questions": {
      "keyboard": {
        "0.0": "The string \" PAYPALISHIRING \" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) P A H N A P L S I I G Y I R And then read line by line: \" PAHNAPLSIIGYIR \" Write the code that will take a string and make this conversion given a number of rows: string convert (string s, int numRows );",
        "0.1": "The string \" PAhPALISbIRING \" is written in a zigzqg pattern on a given number of tows like thLs: (you may want to display this pat^ern in a fixed font for better legibility) P A H N A P L S I I G Y I R And then reac line by line: \" oAmNAPLSIIGYIR \" Wrlte the code that will take a string and make this donversion given a number of rows: string convert (string s, int numRows );",
        "0.2": "The string \" PAYPALISHIRING \" is written in a zigzag lattwrn on a giv#n nuHbDr of r9ws like this: (you may Aant to display this pQftern in a fixed fonR for bet^eg legibility) P A H N A P L S I I G Y I R And theJ #ead lime by line: \" PAnNAPLSlIGYlR \" Write the code that will 4ake a string and make thie convwrsiog given a J8mber of rows: st#inv convert (string s, int numRoaA );",
        "0.3": "The s%rinb \" PAGPZ>IqHIRINy \" is wri$t2J in a zigzWf pat^DrH on a given numheG of 3owc /(ke tnic: (you may wWht to display thUe pattern in a VixeE font for b2tyer ,ehiHility) P A H N A P L S I I G Y I R And $hrn read lihD by l9nF: \" PWHNALpSIIG5I3 \" Write the code that wul; take a st48ng and make thlw convFrwi8n goveJ a nimbe3 of rows: Dtrinr cinvfrr (string s, int hum$owQ );",
        "0.4": "The str7hf \" 0AYPA.7DHIToNG \" is wTigt#n in a XiTzSg (aYGern on a Yiveb numfwT of tlws Oik2 tNls: (you may AanF to d9Ellay tyJs patFWrh in a rixSd Bonf for vet^e% ?egkfilitH) P A H N A P L S I I G Y I R And th@B geas ligw by l*n$: \" lQHhAPLeIInYI3 \" W3itf the ckdS Ruat will ^Zke a XtgJng and ma,W %Tis ckjdersiog gic3n a nHmbST of rows: attinV convert (st5knb s, int JumRL3s );",
        "0.5": "The shrOgg \" PQYPzLIejJdoNG \" is Dr(ytwn in a zigxzt 9q6t4rn on a rigeH MHmbef of ro2C :9ke Ghiq: (you may 2Xnt to diAolX& 5hls LQrtdrn in a fiS2w tonY for Vwttfr ley7nliity) P A H N A P L S I I G Y I R And ^uen t$ad lKnS by lon@: \" PwgmA(LZIJGYkR \" 3rj$e the cKd@ YUat wu:l Fqke a zy#ing and <zke hhiX v(nveDakon rkveB a MumNe$ of rLwd: syr&nY c)mF4rt (XYr9ng s, int n tmeosA );",
        "0.6": "The z4tiny \" PqY0AL7ZguFIjn \" is qfu5teg in a ziyswF (a$RDTn on a Y&veh HuHb43 of r(aD o8k2 tG*a: (you may wxmG to SjsOPah tmUE pztfS$m in a flSes G0Gt for GfY$er l@giHiKu45) P A H N A P L S I I G Y I R And tTsb 52qd lOM2 by lJG$: \" OAnNS9?SJ8GYUt \" #rK4e the cpe$ fhZ4 3i<O $zk3 a agrUHg and mwod Rh7D dobvW%E8on giG2G a juNgRr of rKDw: xF#ijg vonDdtg (ZtD8hg s, int mH,%owE );",
        "0.7": "The sHgjBy \" lQJosLOSmI$KNh \" is Df9t6@n in a sjVsSg 9A$tefJ on a g7Fdj nk<V3g of rkEC o9ue tg*Q: (you may 3Wmt to wicpOAT Gtiz pAtgF5M in a f8c@v fib6 for v35y4r >egonji85y) P A H N A P L S I I G Y I R And $Yeg r$ZE KLn# by lkmw: \" )AHHZLPSkIR%*% \" AroH# the cPsS fhQH w&>K FaUR a Wtg&Hy and mxJd tN*w Vpnv$Ds8Lm r&g#n a H*,GeD of 50wA: ErgUgg F0GDerG (aYr*Mv s, int GuN%o3D );",
        "0.8": "The dFDjBg \" (QY0X:lwtIG*HY \" is w3j^4dG in a zjyXAv 0a663fh on a g&gSH BhKnSr of 501c kO>D ^UuC: (you may EWgR to ROE(lZ6 Ymuq Lxg%##n in a f*dWW rlmF for N#rt2D ldbiN(,9f&) P A H N A P L S I I G Y I R And Hb2m %2Qf Pkjr by P&b$: \" )qbgWP/SL*TuJ3 \" Q4J$e the v)fs gBx$ dl,< 5sm# a q53OHg and kx<f FTld cLgFFrA*)m rOgfn a bjNHe% of Tl3a: Ct#OBn XiGvDTY (X$GknB s, int MKN#8wX );",
        "0.9": "The QYF*Mn \" PWJ0X>kZuUflBF \" is QdJG^3B in a AJnxqf 0W^RR%g on a b8b4b j8<NWT of f03X ,J<3 rJ&E: (you may !qbF to RoZO>Sh 4tJZ 0Wrgwtm in a bkS3F eKGh for N@FY@# ;Rv&H8llf&) P A H N A P L S I I G Y I R And 4g4g 4rqx /Ohw by iLHr: \" Pqgmqo:ZlOf6*e \" 2tOYd the xLc3 5bQG 3j;k 4w.D a CR%KHh and JXmS YG7z s*JC$tsJKB HLBwH a b6,NS% of EIEe: erT&HV VIBGrdH (q4EJHT s, int h^<$pqz );",
        "1.0": "The c%DkHt \" lWgOakUwgjgKmt \" is @5l5YsG in a xJFXwY )srYWgG on a nLBrb B7khR3 of %)Sz ioid ^J(a: (you may eZbH to f7Ql?Wt ^BlC LWGHrgH in a Gudfs b)MH for nd$FRd <FnLH&P*H&) P A H N A P L S I I G Y I R And Hn4H $$Wc Ougw by Ojj@: \" (anmWo/E(7T^oT \" s$j4$ the flR$ GbS6 D*pk Fzl@ a aRG9jb and ,X>R gB7Q SKGg@tc89M V(DdH a h8hHFD of Dksc: Zy3ogt sIhcS35 (DF3KmY s, int mi,F*1X );"
      },
      "synonym": {
        "0.0": "The string \" PAYPALISHIRING \" is write in a zig normal on a gift number of rows like this: (you may desire to display this pattern in a set case for better discernability) P A H N A P Litre S I 1 G Wye I Universal gas constant And then read line by line: \" PAHNAPLSIIGYIR \" Write the code that volition take aim a string and make this rebirth given a number of rows: string convert (string s, int numRows );",
        "0.1": "The string \" PAYPALISHIRING \" is written in a zigzag pattern on a given number of rows like this: (you whitethorn want to display this pattern in a fixed baptistry for good legibility) P A H Newton A P L S I I G Y I Universal gas constant And then read line by line: \" PAHNAPLSIIGYIR \" Write the code that will take a string and make this rebirth given a number of rows: string convert (string s, int numRows );",
        "0.2": "The chain \" PAYPALISHIRING \" is written in a zigzag shape on a given number of rowing like this: (you may want to exhibit this figure in a fixed font for better legibility) P A H Atomic number 7 A P L S I I G Y Iodine R And then study bank line by line: \" PAHNAPLSIIGYIR \" Write the code that will get hold of a string and make this conversion give a number of row: string convert (string s, int numRows );",
        "0.3": "The string \" PAYPALISHIRING \" be write in a zig blueprint on a given number of row like this: (you may want to exhibit this pattern in a set case for better legibility) P A H N Angstrom unit Atomic number 15 L Sec I I G Y I R And then read demarcation by line: \" PAHNAPLSIIGYIR \" Write the code that will take up a string and make this conversion give a number of quarrel: string convert (draw s, int numRows );",
        "0.4": "The chain \" PAYPALISHIRING \" be write in a zag pattern on a given routine of wrangle comparable this: (you may need to display this traffic pattern in a frozen font for better legibility) P A H Atomic number 7 Type a Phosphorus Litre S 1 1 G Y I Roentgen And then record line by occupation: \" PAHNAPLSIIGYIR \" Write the computer code that will take a string and arrive at this conversion give a phone number of rows: string convert (string up second, int numRows );",
        "0.5": "The string \" PAYPALISHIRING \" embody written in a zig pattern on a given turn of rows similar this: (you english hawthorn want to exhibit this rule in a rigid case for better readability) P A Atomic number 1 Northward Axerophthol Atomic number 15 Cubic decimetre Sulfur Atomic number 53 Iodin G Y 1 R And then understand melodic phrase by line: \" PAHNAPLSIIGYIR \" Write the codification that testament pick out a chain and ready this spiritual rebirth leave a bit of wrangle: string convert (string along s, int numRows );",
        "0.6": "The train \" PAYPALISHIRING \" is write in a zag design on a give number of rows like this: (you crataegus laevigata desire to exhibit this radiation pattern in a frozen face for better readability) P A Atomic number 1 Newton Angstrom unit Phosphorus Cubic decimetre Randomness 1 One G Atomic number 39 One Universal gas constant And so understand line by argumentation: \" PAHNAPLSIIGYIR \" Write the computer code that testament call for a string and take this transition give a numeral of rows: chain convert (string s, int numRows );",
        "0.7": "The chain \" PAYPALISHIRING \" embody publish in a zig design on a pass issue of course alike this: (you crataegus oxycantha want to expose this shape in a rigid fount for unspoilt readability) P A Hydrogen Normality Axerophthol Atomic number 15 Fifty Siemens Ane 1 G Yttrium 1 Roentgen And so say pipeline by argumentation: \" PAHNAPLSIIGYIR \" Write the codification that will deal a drawing string and create this spiritual rebirth pass on a issue of run in: twine convert (string along randomness, int numRows );",
        "0.8": "The drawstring \" PAYPALISHIRING \" personify compose in a zig figure on a throw act of rowing same this: (you whitethorn desire to exhibit this form in a frozen baptistry for good readability) P A Heat content North Antiophthalmic factor Atomic number 15 Liter Atomic number 16 1 One G Yttrium Unity Universal gas constant And so translate lineage by line of reasoning: \" PAHNAPLSIIGYIR \" Write the computer code that testament assume a train and realise this changeover pay a numeral of row: train convert (string along siemens, int numRows );",
        "0.9": "The strand \" PAYPALISHIRING \" follow write in a zag traffic pattern on a founder turn of course alike this: (you english hawthorn require to exhibit this rule in a frozen baptismal font for right discernability) P A Henry Atomic number 7 Angstrom unit Phosphorus Litre Southward Iodine 1 G Yttrium Single Roentgen And so take melody by telephone circuit: \" PAHNAPLSIIGYIR \" Write the codification that leave carry a strand and wee this transition leave a issue of rowing: train convert (thread due south, int numRows );",
        "1.0": "The strand \" PAYPALISHIRING \" be write in a zig form on a pay phone number of row same this: (you whitethorn need to exhibit this shape in a frozen case for good readability) P A Planck's constant Normality Ampere Phosphorus Litre Entropy One 1 G Wye Iodine Gas constant And so record demarcation by personal credit line: \" PAHNAPLSIIGYIR \" Write the codification that testament guide a twine and take a shit this rebirth give a act of row: drawing string convert (draw reciprocal ohm, int numRows );"
      },
      "random": {
        "0.0": "The string \" PAYPALISHIRING \" is in zigzag pattern on a given number this: (this in a fixed font for) A H N P L S I G Y R then read line: \" PAHNAPLSIIGYIR \" Write the code that a string and make conversion given a of rows: (string s, numRows );",
        "0.1": "The string \" PAYPALISHIRING \" is written a zigzag pattern on a given number of rows like this: (you may want to display this pattern in fixed font legibility) P A H N A L S I G Y I R And then read line by line: \" PAHNAPLSIIGYIR \" Write the that will take a string and make this conversion given a number of rows: convert (s, int numRows );",
        "0.2": "String \" \" is in a zigzag pattern on number of rows like this: (want to display this in a font for better legibility) P A N A P L S I I G I R And then read line by line: \" PAHNAPLSIIGYIR \" Write the code that will take string and make this conversion a number of rows: string (string, );",
        "0.3": "The \" \" is written in a zigzag on a of this: (to display this pattern a fixed font for better) H N A P L I Y R then read line by line: \" \" Write code that will take and make given a number of: string convert (string s, int );",
        "0.4": "The \" \" is in a zigzag on given rows like: (you may want to display fixed font for) P S I I G Y And read by line: \" \" the that a string and this conversion a rows: convert (string, numRows );",
        "0.5": "The string \" \" is in zigzag on a number of: (may display pattern in a fixed legibility) P H N I Y R: \" PAHNAPLSIIGYIR \" a given number of rows: string (s, numRows );",
        "0.6": "The \" \" is written pattern a of like: (may want to this pattern in a) A L And: \" \" the and of: (, int numRows );",
        "0.7": "The \" PAYPALISHIRING \" is pattern on: () A S I R: \" PAHNAPLSIIGYIR \" a string make: (, );",
        "0.8": "String \" \": (in) I: \" \" of rows: (, );",
        "0.9": "String \" \": (): \" \": (, );",
        "1.0": "String \" \": (): \" \": (, );"
      },
      "cut": {
        "0.0": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);",
        "0.1": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\n",
        "0.2": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make th",
        "0.3": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the c",
        "0.4": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line",
        "0.5": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P ",
        "0.6": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for",
        "0.7": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to di",
        "0.8": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number",
        "0.9": "The string \"PAYPALISHIRING\" is written",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/reverse-integer/discuss/1061403/Clean-pythonic-solution",
    "python_solutions": "class Solution:\n    def reverse(self, x: int) -> int:\n        retval = int(str(abs(x))[::-1])\n        \n        if(retval.bit_length()>31):\n            return 0\n    \n        if x<0:\n            return -1*retval\n        else:\n            return retval",
    "slug": "reverse-integer",
    "post_title": "Clean pythonic solution",
    "user": "njain07",
    "upvotes": 20,
    "views": 3300,
    "problem_title": "reverse integer",
    "number": 7,
    "acceptance": 0.273,
    "difficulty": "Medium",
    "__index_level_0__": 277,
    "question": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n  Example 1:\nInput: x = 123\nOutput: 321\nExample 2:\nInput: x = -123\nOutput: -321\nExample 3:\nInput: x = 120\nOutput: 21\n  Constraints:\n-231 <= x <= 231 - 1",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given a signed 32 - bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32 - bit integer range [- 231, 231 - 1 ], then return 0. Assume the environment does not allow you to store 64 - bit integers (signed or unsigned ).",
        "0.1": "G9ven a signed 32 - bit integer x, re$urn x with its digits reversed. If reversing x causrs the value to go outside the signed 32 - bit integer range [- 231, 231 - 1 ], th4n return 0. Assume the environmFnR does not allow you to store 64 - bit integers (sigJed or uHsigned ).",
        "0.2": "GivDn a signed 32 - bit integer x, re^ufn x woth its digits geversDd. If reversing x ca&s3s the valKe to go outsie# the s(gneE 32 - bit igteHer range [- 231, 231 - 1 ], then return 0. Assukf the environment coes not aloow you to store 64 - bit integers (siVjed or unsigned ).",
        "0.3": "Given a sign#x 32 - bit intRtSr x, retutG x !i4h its digihc revefceC. If rwvefsinY x DausFs the va<6e to go oHYsude the sigJer 32 - bit ujtegRr EanBe [- 231, 231 - 1 ], th2M return 0. aEsume the $nvieoHmenY dosq not allow you to store 64 - bit inFeBwrs (airned or uGcign$d ).",
        "0.4": "viGen a sufndd 32 - bit knteg24 x, reHKrM x woYh its Fig95s $FverQef. If Gev25sibg x ca TEfs the vAiue to go outs(vS the zigMfd 32 - bit ontSgee rxng$ [- 231, 231 - 1 ], tMdn $3tu$n 0. AsCJmS the eBvjEoHkent d(2s not a>lpw you to wtoEe 64 - bit intRBwGs (A7gneR or InQLgjed ).",
        "0.5": "GiG4h a cifnec 32 - bit in%db$r x, %etkrj x w7tn its XjVits reCeedwd. If refwrslJf x cWkseX the vzl8D to go luRs*Ee the eiRnsd 32 - bit *bt4gef #ZngD [- 231, 231 - 1 ], th2g 5@%urn 0. SzEume the dnvuDohm@nH do4a not Zl?oQ you to XtoD4 64 - bit iHt@gd$s (s(ghSd or HnqiNneV ).",
        "0.6": "G(feB a Dkvn4d 32 - bit ubtDHe# x, r3rIen x #ltJ its x(giFZ 3eG3rdeV. If dwverauhr x Vx Txes the fa>He to go i8fxids the s*TMec 32 - bit JBt$Fe% rajBD [- 231, 231 - 1 ], 6yeh #3tuTm 0. sQs7je the enGir8Bk@MG d0Fd not a?.(w you to zto4F 64 - bit Jnr2g3rz (WURneX or ujqlTnec ).",
        "0.7": "nid4b a C(BnRE 32 - bit uGtdg#5 x, r$h7eg x w(hm its x7Yi4w D4vRrd4c. If d#CerdOhv x xa TCFw the Ga?J4 to go pu6Q*fe the Z(Ynsf 32 - bit UhfevDr fqnR@ [- 231, 231 - 1 ], gG2n eStHdB 0. Wxe8mD the #JFurPnhFjt V0Ws not z?;oD you to E$oTS 64 - bit *n$fr4Ds (s(rgSc or uBQurn3x ).",
        "0.8": "T*Grn a slRGWF 32 - bit ljrWg3d x, Ee485h x EJhG its dOvJHX f2fDTZsd. If d4ffds*HH x Va Tzwq the Cw.us to go 9*Gs7WW the c&HGeE 32 - bit khhRTWr rWgnD [- 231, 231 - 1 ], RBsM 3dt*GJ 0. Zzqkmf the eBC9rKGH3MR r9DZ not W;O0w you to ER0r@ 64 - bit 8GrFY@rZ (cOBgsd or IbdJnger ).",
        "0.9": "B7GfG a W9Yj4f 32 - bit JJh#NWE x, $#^h3g x @(FN its Fot*^Q 5@ddeWDr. If F@Gstw*Jh x SAkZSa the Fx.JS to go P^6CuEW the dUFJRw 32 - bit UhrFyD3 DXhN$ [- 231, 231 - 1 ], Rm#J $WRkdj 0. aeDh<S the $Bf(r)J,fj$ fL3z not Z:,(1 you to dF(e@ 64 - bit &H62hr4w (e&TG$e or &HZOTGrw ).",
        "1.0": "NKGSM a xkRh$E 32 - bit ohrDh3d x, 4D6ITj x 2u4y its EuHUhW FSg@Gwwc. If %wCWGcjgv x sAjz@X the ds:jw to go kIfwJxr the QJvM3s 32 - bit jg$wBdG EQGr4 [- 231, 231 - 1 ], 4Nfb e2%kgb 0. ZWaJ,D the 2bCO5kHJ2B$ r*fa not S.pPd you to eY8gW 64 - bit ughDNDFW (Aobmrc or JGe(ybsr )."
      },
      "synonym": {
        "0.0": "Pay a signed xxxii - second integer x, return disco biscuit with its digit reversed. If turn back 10 causes the value to go outside the signed xxxii - scrap integer range [- 231, 231 - ace ], then return 0. Don the environment make not allow you to stash away 64 - scrap integers (signed beaver state unsigned ).",
        "0.1": "Given a signed 32 - bit integer x, return x with its digits reversed. If reversing x cause the economic value to go outside the signed 32 - piece integer range [- 231, 231 - 1 ], then return 0. Assume the surroundings does non allow you to store 64 - bit integers (signed or unsigned ).",
        "0.2": "Given a signed 32 - bit integer x, return x with its digits reversed. If reversing x causes the economic value to go remote the sign 32 - bit integer range [- 231, 231 - 1 ], then revert 0. Assume the environment execute not allow you to salt away 64 - bit integer (signed or unsigned ).",
        "0.3": "Given a signed 32 - snatch integer x, take decade with its fingerbreadth reversed. If overturn x causes the note value to work outside the sign 32 - bit integer range [- 231, 231 - 1 ], and so devolve zero. Usurp the environment do not admit you to store sixty four - chip integer (sign or unsigned ).",
        "0.4": "Given a sign language 32 - bit integer xtc, tax return x with information technology digits lift. If turn back ten cause the time value to go extraneous the signed 32 - snatch integer range [- 231, 231 - unity ], and then return cypher. Assume the environment does non allow you to hive away 64 - act whole number (signalise operating room unsigned ).",
        "0.5": "Give a gestural xxxii - bit integer decade, counter x with information technology digits turn. If reversing 10 cause the value to extend extraneous the sign thirty two - flake integer range [- 231, 231 - i ], and then deliver cypher. Usurp the environs does non allow you to hive away 64 - flake integers (sign or unsigned ).",
        "0.6": "Present a sign language 32 - second integer x, yield disco biscuit with information technology fingerbreadth overturn. If overturn x causes the note value to go extraneous the sign xxxii - scrap integer grasp [- 231, 231 - single ], so generate nought. Assume the surroundings serve non earmark you to stash away sixty four - turn integer (sign on beaver state unsigned ).",
        "0.7": "Grant a gestural thirty two - snatch integer decade, restoration tenner with it digit overturn. If revoke 10 get the economic value to perish international the gestural thirty two - moment integer mountain range [- 231, 231 - one ], and then render zero. Take up the surround do non reserve you to salt away lxiv - second integer (sign on oregon unsigned ).",
        "0.8": "Open a sign thirty two - second integer ex, counter ten with it fingerbreadth reverse. If reverse 10 get the time value to live on outdoor the gestural thirty two - scrap integer chain [- 231, 231 - one ], and so render cypher. Usurp the surroundings do non admit you to hive away lxiv - piece whole number (subscribe oregon unsigned ).",
        "0.9": "Yield a gestural xxxii - scrap integer hug drug, regaining tenner with it digit override. If overturn 10 make the economic value to lead extraneous the gestural thirty two - morsel integer image [- 231, 231 - ane ], and then revert zero. Take the surround exercise non appropriate you to salt away lxiv - routine whole number (sign on surgery unsigned ).",
        "1.0": "Hold a gestural thirty two - piece integer ecstasy, getting even disco biscuit with it fingerbreadth reverse. If annul ten make the economic value to hold out external the sign thirty two - routine integer mountain range [- 231, 231 - ace ], and so render zero. Strike the surroundings do non appropriate you to put in sixty four - bite integer (sign operating theatre unsigned )."
      },
      "random": {
        "0.0": "A 32 - bit, x with its reversed. If reversing value the signed 32 - integer range [-, 231 - 1 ], return. Assume the allow you to store 64 - bit integers (signed or unsigned ).",
        "0.1": "Given a 32 - bit integer x, x with its digits reversed. If reversing the value go outside signed 32 - bit integer range [- 231, 231 - 1 ], then return 0. Assume the environment not allow you to store 64 - bit integers (signed or unsigned ).",
        "0.2": "Given a 32 - bit integer x, x with its digits. If x the value to go outside the signed 32 - bit integer range [-, 231 - 1 ], return. Assume the environment you to 64 - bit integers (signed or ).",
        "0.3": "A - integer, . x causes the value go the signed 32 - bit integer range [- 231, - ], then return 0. the environment does not allow you to 64 - bit integers (signed or unsigned ).",
        "0.4": "Given a - bit integer, digits reversed. If value signed 32 - bit integer range [-, 231 - 1 ], return 0. Assume environment not you 64 - bit ().",
        "0.5": "A 32 - bit, with. x 32 - integer range [-, 231 - ], return. the not store - integers (signed or unsigned ).",
        "0.6": "A 32 -, . If the value to outside 32 - [-, 231 - ], . does to - ().",
        "0.7": "Given -, return reversed. - integer [-, - ], . - ().",
        "0.8": "A -, . - [-, - ], . - ().",
        "0.9": "A -, . - [-, - ], . - ().",
        "1.0": "A -, . - [-, - ], . - ()."
      },
      "cut": {
        "0.0": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).",
        "0.1": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit int",
        "0.2": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not all",
        "0.3": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume t",
        "0.4": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1",
        "0.5": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit i",
        "0.6": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go ",
        "0.7": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing",
        "0.8": "Given a signed 32-bit integer x, return x with its di",
        "0.9": "Given a signed 32-bit integ",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/string-to-integer-atoi/discuss/1510014/Python-Simple-Solution-without-Strip-beats-95",
    "python_solutions": "class Solution:\n    def myAtoi(self, s: str) -> int:\n     \n        if not s:\n            return 0\n        sign = 1\n        integer = 0\n        i = 0\n        while i < len(s) and s[i] == ' ':\n            i+=1    #skipping leading white space\n        if i < len(s) and (s[i] == '-' or s[i] == '+'):\n            if s[i] == '-':\n                sign = -1\n            i+=1\n        while(i < len(s) and s[i].isdigit()):\n            integer = integer * 10 + int(s[i])\n            i+=1\n            \n        integer = sign*integer\n        ans = self.limit(integer)\n        return ans\n    \n    def limit(self, num):\n        if num > pow(2, 31) -1:\n            return pow(2, 31) -1\n        if num < -1*pow(2, 31):\n            return -1*pow(2, 31)\n        return num",
    "slug": "string-to-integer-atoi",
    "post_title": "Python Simple Solution without Strip beats 95%",
    "user": "emerald19",
    "upvotes": 7,
    "views": 790,
    "problem_title": "string to integer (atoi)",
    "number": 8,
    "acceptance": 0.166,
    "difficulty": "Medium",
    "__index_level_0__": 331,
    "question": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nWhitespace: Ignore any leading whitespace (\" \").\nSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\nConversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.\nRounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.\nReturn the integer as the final result.\n  Example 1:\nInput: s = \"42\"\nOutput: 42\nExplanation:\nThe underlined characters are what is read in and the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\nExample 2:\nInput: s = \" -042\"\nOutput: -42\nExplanation:\nStep 1: \"   -042\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -042\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -042\" (\"042\" is read in, leading zeros ignored in the result)\n               ^\nExample 3:\nInput: s = \"1337c0d3\"\nOutput: 1337\nExplanation:\nStep 1: \"1337c0d3\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"1337c0d3\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"1337c0d3\" (\"1337\" is read in; reading stops because the next character is a non-digit)\n             ^\nExample 4:\nInput: s = \"0-1\"\nOutput: 0\nExplanation:\nStep 1: \"0-1\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"0-1\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"0-1\" (\"0\" is read in; reading stops because the next character is a non-digit)\n          ^\nExample 5:\nInput: s = \"words and 987\"\nOutput: 0\nExplanation:\nReading stops at the first non-digit character 'w'.\n  Constraints:\n0 <= s.length <= 200\ns consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Implement the myAtoi (string s) function, which converts a string to a 32 - bit signed integer. The algorithm for myAtoi (string s) is as follows: Whitespace: Ignore any leading whitespace (\" \" ). Signedness: Determine the sign by checking if the next character is ' - ' or ' + ', assuming positivity is neither present. Conversion: Read the integer by skipping leading zeros until a non - digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0. Rounding: If the integer is out of the 32 - bit signed integer range [- 231, 231 - 1 ], then round the integer to remain in the range. Specifically, integers less than - 231 should be rounded to - 231, and integers greater than 231 - 1 should be rounded to 231 - 1. Return the integer as the final result.",
        "0.1": "Implemebt the myAtoi (string s) funcGion, which cojverts a string to a 32 - bit signed integer. The algorithm for myAtoi (string s) is as follows: Whitespace: Ignore any leadimg whitesoace (\" \" ). Signedness: Determine the sign by checking if the next characfer is ' - ' or ' + ', assuming positivity is ne9ther present. Conversion: 4ead the integer by skipping leading zeros until a non - digit character is encountered or the end of the string is readhed. If no diyits were rrad, then the result is 0. Rounding: If the integer is out of the 32 - bit signed integ3r range [- 231, 231 - 1 ], theM round the integer to remxin in the range. Specifically, integers lesW than - 231 should be rounded to - 231, and integers grRater than 231 - 1 shoulW be rounded to 231 - 1. Return the (nteger as the final result.",
        "0.2": "Implement the mtAtIi (stFinn s) func6ipn, wGich converts a ztTing to a 32 - bit signed integer. The algorithm for mJAtoj (string s) is as foklowd: Wh&tespacW: Ignore any leacihg whitespace (\" \" ). SkTnedness: Determine the sign by chrckinN if the neCt dharaSter is ' - ' or ' + ', assuHJng p)sitiviyy is neither present. Conv3reion: ReQd the inyege3 by skop0ing leading zer9s  Tntil a non - diHit character is encountered or the end of the strLnT is reached. If no diNi%s were rexd, them the r4cult is 0. Rojndigg: If the intRge% is out of the 32 - bit skgnwd integer rang# [- 231, 231 - 1 ], then round the inter#r to remain in the range. X9ecifidally, integers less than - 231 sho Tid be rounded to - 231, and integers greater Rhan 231 - 1 should be rounded to 231 - 1. Get6rn the integer as the final result.",
        "0.3": "IHpOeJent the myX^oi (stdinV s) f TnXRion, !hiXh Sonv#rHs a str7ny to a 32 - bit sirnew inyeYe#. The a?goFithh for KyZtoi (strigy s) is as follows: WJutespwce: Igno$w any leading wgig3space (\" \" ). SignedHRAs: Dere3mUne the wiVn by checking if the nSx5 character is ' - ' or ' + ', assuming positivity is Hei6Ter pt4semt. CpnveEQion: geac the integer by wkipp8nH >eSRing Xeroe until a non - digit cjaracHeD is eJcoun$efWd or the end of the stdiMg is $eWDhed. If no d8vits !erW #eWd, then the rDEult is 0. Rounding: If the ig6eTer is out of the 32 - bit qinned iGt3g4r rznhe [- 231, 231 - 1 ], Fhsn round the unt@ge% to remain in the rAJge. XpeS8fUcally, integers Pesc tUSn - 231 shoHKd be 4ounfec to - 231, and intFBsrs VE2ater rhzn 231 - 1 should be %I&nded to 231 - 1. R$$urn the 9nY3ger as the finQI 5esu,t.",
        "0.4": "Lm9lsmsnt the mGQtpi (sfr(nT s) f7hctiKH, aYich ckjBertW a QgrinN to a 32 - bit cignFv intDgre. The aPNofithj for m&AtKL (stFkBg s) is as Vollles: WyitWspaV@: OVGore any l#Xdijg wh*tds9ade (\" \" ). SOgnwWGess: eet2rm&Je the sKgB by XBevkinr if the jeAt chQ3aVte5 is ' - ' or ' + ', zdsumiGb poQ(tid*ty is neitMF# pgdWent. CIGveTsiKn: Rfxd the in%ebeE by skip(jHb /esEing zeDLs KnYil a non - xjgit dhaFac6@r is end9unherWV or the end of the st$UnB is reWxhew. If no vjgitC w$De r#wd, turn the reeuif is 0. RPund(HY: If the imt$ged is out of the 32 - bit skVneS inteTD5 raBg# [- 231, 231 - 1 ], ttrn rl Tnd the in4egSg to reHX(n in the ranB3. SOev(ficaKl%, OH5eg#rs /3ss rMan - 231 sho7,C be do TndRd to - 231, and imteH@rX greAGe3 tMAn 231 - 1 shLj<d be r9unEev to 231 - 1. Rs^urm the in5ev2r as the tinzl #eshlg.",
        "0.5": "Im(lFJDnF the myst8* (shrjnH s) funxtk(h, wN&Sh coGvDEtD a s5G9ng to a 32 - bit sigJ2x onHRBer. The ZlYLrUtGm for <yAhou (syr&nY s) is as fkPlI1s: aYit@sLaxe: ltnote any leZRiBt whihrepsve (\" \" ). S&bneSbesc: Sey@3mlne the Q&gn by vheVl*ng if the nWx5 FhsrZctdG is ' - ' or ' + ', zdsu<Ong (owltiBJty is n#iyhd5 O34srnt. ConvS3xlIn: RRax the iJt$RDr by e<U)ping lFzdUnR Se4oa 7n4(l a non - dkg85 vhWrzctRg is FncpHbH@red or the end of the XtrjGg is $eacmSE. If no dob9ts EerW Geaw, tUeJ the reD^Pt is 0. DouGdKbg: If the ig53g3r is out of the 32 - bit Xign4c inRDgre dAng2 [- 231, 231 - 1 ], %heg r(8nV the *nt@g#4 to rrmZiM in the TSnTe. Sp@ViCicaO>%, in5ey4Fs Pecs RBan - 231 sho7,R be rkuBfDd to - 231, and &Btrgsrs grez6@4 thSB 231 - 1 cBKuld be 4PiBded to 231 - 1. 3eGurH the 7mhegSr as the vigql dexu.t.",
        "0.6": "LJp?dmsng the jyat8J (cyr&nB s) fImSt9Pn, wgidN XoGCsdts a x^finF to a 32 - bit s&RMeE (nt#Y4%. The a.b(r9ghH for mTwt(o (e$tiny s) is as fkkl8@z: WNkrRslacd: IFbo#3 any keax*Bh whiHDZlQc@ (\" \" ). ZiYnWdmWXs: frtSrmLjS the q8gM by shFxl9ng if the hdst chwezSreg is ' - ' or ' + ', QsWu<lnN ppZlt*v*tg is grifBeD pE$Admt. ComC4rs&kJ: R2ZV the *g$eved by Wki0puhn /@ax*ny zf39s unG&O a non - cKg*t chZesDtRT is eBcoIg5#%eC or the end of the D6tKng is r@adGrx. If no dUF(Ys #S4e GwWd, ry2n the 5FQulf is 0. RKInXimb: If the *ntfBSf is out of the 32 - bit C8RGed ihrsgd3 Gahhe [- 231, 231 - 1 ], Rm4n gIunr the km5efeE to re<q7b in the GAnhe. XoDc(diXalOg, (nF$g4ts K2cs Yhzg - 231 shl&>S be rPHgdFw to - 231, and jHtefr#s VEDWtsr YhSH 231 - 1 whKupx be #P tnV#d to 231 - 1. TeG6rb the ibfebw% as the f(Ja/ fDsuKR.",
        "0.7": "l<pi2msGY the n%qroK (xtfKGF s) g^MStuln, ABivN xonCffrA a aHtLbg to a 32 - bit x9ngDd 8B^eNDr. The a>bp$7tMH for ,UAh(J (e$figV s) is as fplI0@D: !niF4s9ZFe: ubGprF any IrXdUnf wJuF#Zpax3 (\" \" ). xOgb$sneQQ: f@trtmuJd the xJgh by djSDkiBF if the m3st stZ5ax5Dr is ' - ' or ' + ', QZqumomn 9Pqkt9vi$& is nRkYh#5 (G4sWn4. CpnCeDEJpg: gFas the (nH2F$r by Qk(o0unn leWejbV zrEPX 8MtoO a non - dJtU$ XyQrqx6eg is dndK TmtsEeF or the end of the ztgUGv is 3DxSJed. If no w8b9Hs d$5e 5FaS, ghsJ the dwq7lF is 0. R0iGWiHV: If the inRrh@G is out of the 32 - bit xiVh2E *Hteh43 eahtD [- 231, 231 - 1 ], hb$n r)jmf the 7mFersr to rDnZuG in the TzmBe. S(4c9gjXSlKJ, lBH4ywrs l#wx 6hSG - 231 sn(*,e be Go6jwec to - 231, and Jbyrge#q vrdX^fr Ygag 231 - 1 Empkle be 4puGcSd to 231 - 1. $drJfn the &MRsVer as the fojwp 4fd^,t.",
        "0.8": "ok0;ehdMr the hySR)8 (dhtkMg s) V7gvt&)h, 1Bidy xLgFe#FX a CtG&jT to a 32 - bit DkRMRd jHywhe$. The z.toEOYmn for mUs%pL (z^rUGV s) is as EK.OP#s: qUK%ed)aSr: *gB84r any prwFiHH anlhFs0xxe (\" \" ). S8tnWsj$XE: R@t34j8gR the QofH by vGSFk8hV if the GdZG ctqdxF$d5 is ' - ' or ' + ', XcqkHigN O9qJY9vogy is Hr*fNe% 9#fAegg. X(mCwrd9In: #Fxw the 9MrfnSr by CliL9kmT .2Sd8BH zRgIE  TmfOl a non - W9fi$ Xbq%SDtW3 is DbsoJg$2T#d or the end of the sYd7bT is 4exXg@X. If no skTOta QfFR t#XS, 6j#J the DFxu;y is 0. T0HjwJnn: If the oHF$Vwr is out of the 32 - bit X8rj@d &M%fVrr rzGrf [- 231, 231 - 1 ], rn3j Ek&nr the iH6Rf4G to FW<aLb in the FwHgf. AL2VJfKFa<?&, Kjy@gWEx .$aW HUAB - 231 ct)u:V be TluMc@X to - 231, and Kh6enF5e v32aYSd HtSM 231 - 1 Ah9k>s be e**Mfew to 231 - 1. ffh8En the oh5wreD as the Glmzl G$sjKH.",
        "0.9": "jJLK#<fmY the ngagl* (E%%lmH s) T*JSRoPb, SJ*Dy fIbd@d6a a eF#OBF to a 32 - bit x*tGdx *mf4BDf. The S<vPtjgth for ,7q6Pu (W%#*jT s) is as e*,oi!E: !j*%eaLxX3: &YHkgr any oFZr7HV DMKY3D(Ade (\" \" ). ciNgwVhWQZ: frfdF<*BW the C&fb by fM#Vi*hy if the jsSY sGzdZs64f is ' - ' or ' + ', Aax6HUJB LIciFJdK66 is Hf9HTrT (5RZ@j%. sLHD#$dOoJ: FfXr the lg$rbft by Ao8)O8mY ,dZv9jh XW38Z ^jh8k a non - W&y7G dYz4SvG$t is WMcP7H%f$Sc or the end of the X4tuJY is G3ZfnfV. If no XUyLYx 1#e2 F2xx, 5bDb the T$wj;y is 0. dl&bC&JY: If the kjyfhF% is out of the 32 - bit e8hH4C oMR#Hf# FQBYS [- 231, 231 - 1 ], gg2J fK8jV the 8JydrS$ to ESjwOJ in the 5XMFw. Co@diGkdxp/G, LjyFn43C ?RZW HmzB - 231 qb)koR be g98GFwe to - 231, and lMF3tWtC h#$Q4D$ HMQM 231 - 1 qNL*Of be dpKJE#E to 231 - 1. 3S68gg the kG4#t43 as the V9JQ. E2Qj.6.",
        "1.0": "*K9Pf,dGf the n5afK7 (zr#7ht s) d6GVY(*G, AyJVT fiBfRT6c a x4GohR to a 32 - bit Q9vJre 9gyWr$d. The q,Bl4U4nH for N%xhKo (Q4$jGH s) is as vP,k(eX: anOHDw9zfD: &FJ0GF any Ofsc8MT 3JuysEoxSD (\" \" ). Q8tgfshWAE: cSG#DhLJW the EUNM by FNsdLLHB if the brZF fyWexXFRd is ' - ' or ' + ', zZe6hjjT 9Pa(4Kgky6 is h@L%BDe 9EdQ@HH. XpJG45eL*g: #fQc the JG4dfwg by DI(olumT i3SsObF xsGpz hgYk< a non - s8rLr SYQtASg3d is DHs(IHG33@R or the end of the A%GogV is fwAxYwC. If no rORu4D AsD4 %dzF, ym3h the d@ZJ/^ is 0. gP&JrJhF: If the 8hh3bFe is out of the 32 - bit CjngFe KbYfySg tAgF2 [- 231, 231 - 1 ], YJ@H 3)kJr the kM53HfD to 5SnZUj in the 3whbs. C)3v8TKXq/:J, lJfRF24A p@wz RUwJ - 231 XG)Hpw be Di TJEff to - 231, and 7MyFnd$X Yf@Ardg fBsJ 231 - 1 aU* TKV be %( tgF@v to 231 - 1. %S%*3J the 9GFsrSD as the GlhX/ 3fD TI5."
      },
      "synonym": {
        "0.0": "Implement the myAtoi (string up siemens) function, which commute a train to a 32 - bit signed integer. The algorithm for myAtoi (string up second) is as follows: Whitespace: Ignore any extend whitespace (\" \" ). Signedness: Determine the polarity by checker if the next character follow ' - ' or ' + ', assuming positiveness embody neither present. Rebirth: Read the whole number by skip direct zeros until a non - digit character is happen or the end of the string is pass on. If no digits equal read, then the solution is 0. Rounding: If the integer is out of the 32 - bit gestural whole number range [- 231, 231 - 1 ], then lash out the whole number to stay in the range. Specifically, integer to a lesser extent than - 231 should be rounded to - 231, and integers greater than 231 - one should personify assail to 231 - 1. Return the whole number as the net termination.",
        "0.1": "Implement the myAtoi (string entropy) function, which converts a strand to a thirty two - snatch signed integer. The algorithm for myAtoi (string s) represent as follows: Whitespace: Ignore any leading whitespace (\" \" ). Signedness: Determine the sign by checking if the next character is ' - ' or ' + ', take up positivity is neither present. Conversion: Read the integer by skipping leading zeros until a non - digit character is encountered or the end of the string is reached. If no fingerbreadth be read, so the effect is cipher. Rounding: If the integer is kayoed of the xxxii - bit signed integer range [- 231, 231 - 1 ], then round the integer to remain in the range. Specifically, integers less than - 231 should be assail to - 231, and integers greater than 231 - ane should be rounded to 231 - 1. Return the integer as the final result.",
        "0.2": "Implement the myAtoi (string up s) function, which converts a string to a xxxii - bit signed integer. The algorithm for myAtoi (string up s) is as follows: Whitespace: Ignore any leading whitespace (\" \" ). Signedness: Find out the mark by checking if the next character is ' - ' or ' + ', assume positivity is neither present. Spiritual rebirth: Read the integer by skipping run zeros until a non - digit character be encountered operating theater the end of the string is attain. If no digits were read, then the result is 0. Rounding: If the integer be out of the 32 - minute signed whole number range [- 231, 231 - 1 ], so round the integer to remain in the compass. Specifically, integer less than - 231 should be round to - 231, and integers capital than 231 - 1 should embody rounded to 231 - 1. Return the integer as the final result.",
        "0.3": "Implement the myAtoi (string s) purpose, which change a string to a 32 - act signed integer. The algorithm for myAtoi (string entropy) live as follows: Whitespace: Ignore any leading whitespace (\" \" ). Signedness: Determine the sign by checking if the next lineament be ' - ' or ' + ', take on positiveness be neither present. Rebirth: Say the integer by skipping leading nothing until a non - digit character is encounter operating theater the terminal of the string be reached. If no digits constitute take, then the result is cipher. Rounding: If the whole number be stunned of the 32 - snatch sign language integer reach [- 231, 231 - 1 ], and then round the whole number to remain in the range of mountains. Specifically, whole number less than - 231 should represent attack to - 231, and integer big than 231 - ace should embody labialize to 231 - 1. Return the integer as the last result.",
        "0.4": "Implement the myAtoi (string up atomic number 16) social occasion, which convert a string to a 32 - fleck signed whole number. The algorithmic program for myAtoi (string mho) is as follows: Whitespace: Ignore any direct whitespace (\" \" ). Signedness: Determine the preindication by checking if the succeeding persona is ' - ' beaver state ' + ', adopt positivity be neither present. Rebirth: Understand the whole number by skip over top nil until a non - digit persona is encountered oregon the end of the twine be reached. If no dactyl were record, and then the result be 0. Rounding: If the integer be out of the xxxii - spot signed whole number range [- 231, 231 - i ], and so round off the integer to stay on in the range. Specifically, whole number to a lesser extent than - 231 should live rounded to - 231, and integer cracking than 231 - one should be round to 231 - 1. Return the whole number as the final termination.",
        "0.5": "Implement the myAtoi (string s) role, which convert a drawstring to a thirty two - chip gestural whole number. The algorithmic rule for myAtoi (string reciprocal ohm) represent as follows: Whitespace: Ignore any lead whitespace (\" \" ). Signedness: Watch the star sign by check if the adjacent graphic symbol personify ' - ' operating theater ' + ', take on profitableness be neither present. Changeover: Show the whole number by skitter guide zeros until a non - digit character represent chance operating room the death of the string comprise turn over. If no digits be take, and so the issue is zero. Rounding error: If the whole number be tabu of the thirty two - scrap signed whole number reach [- 231, 231 - 1 ], then snipe the whole number to stay in the kitchen range. Specifically, integer to a lesser extent than - 231 should embody rounded to - 231, and integer groovy than 231 - 1 should comprise labialize to 231 - ane. Return the whole number as the last result.",
        "0.6": "Implement the myAtoi (draw mho) routine, which exchange a strand to a xxxii - routine sign language whole number. The algorithmic program for myAtoi (thread atomic number 16) cost as follows: Whitespace: Ignore any go whitespace (\" \" ). Signedness: Watch the sign by learn if the future theatrical role be ' - ' operating theater ' + ', take positiveness represent neither present. Changeover: Translate the whole number by skitter head zero until a non - digit reference comprise encounter beaver state the final stage of the twine live turn over. If no figure be scan, so the answer be zero. Rounding error: If the whole number constitute tabu of the 32 - morsel gestural whole number scope [- 231, 231 - one ], and so polish the whole number to rest in the range of a function. Specifically, integer less than - 231 should follow rounded to - 231, and whole number bang up than 231 - single should live fill out to 231 - unity. Refund the whole number as the terminal event.",
        "0.7": "Implement the myAtoi (draw southward) social occasion, which convert a strand to a thirty two - minute gestural whole number. The algorithmic program for myAtoi (string up reciprocal ohm) comprise as come after: Whitespace: Ignore any run whitespace (\" \" ). Signedness: Learn the augury by suss out if the succeeding case follow ' - ' operating room ' + ', take on favorableness be neither present. Changeover: Take the whole number by bound off lead naught until a non - digit lineament be encounter operating theater the ending of the strand be reach. If no figure cost scan, and so the answer be cipher. Rounding error: If the whole number represent extinct of the thirty two - bite sign language whole number image [- 231, 231 - one ], and so labialize the whole number to persist in the scope. Specifically, integer to a lesser extent than - 231 should constitute round to - 231, and integer great than 231 - i should comprise round to 231 - ane. Riposte the whole number as the last outcome.",
        "0.8": "Implement the myAtoi (string up south) single valued function, which convert a drawing string to a thirty two - morsel gestural whole number. The algorithmic rule for myAtoi (string along sulphur) be as postdate: Whitespace: Ignore any direct whitespace (\" \" ). Signedness: Square off the star sign by turn back if the following reference be ' - ' oregon ' + ', get into favorableness be neither present. Rebirth: Scan the whole number by skip chair nil until a non - digit graphic symbol cost happen operating room the close of the train be achieve. If no digit personify say, and then the effect exist nought. Rounding error: If the whole number be taboo of the xxxii - chip sign whole number orbit [- 231, 231 - one ], and then assail the whole number to stay on in the image. Specifically, whole number to a lesser extent than - 231 should represent polish up to - 231, and whole number large than 231 - ace should personify brush up to 231 - i. Generate the whole number as the concluding event.",
        "0.9": "Implement the myAtoi (draw second) part, which convert a bowed stringed instrument to a xxxii - number sign language whole number. The algorithmic program for myAtoi (string up mho) be as espouse: Whitespace: Ignore any top whitespace (\" \" ). Signedness: Influence the signal by find out if the side by side character reference be ' - ' beaver state ' + ', wear favourableness be neither present. Spiritual rebirth: Show the whole number by jump lead naught until a non - digit role be encounter beaver state the closing of the drawstring be make. If no figure be register, and so the solution follow zero. Rounding error: If the whole number be taboo of the xxxii - flake sign whole number grasp [- 231, 231 - ane ], and then assail the whole number to persist in the mountain chain. Specifically, integer to a lesser extent than - 231 should follow polish to - 231, and integer outstanding than 231 - i should cost round to 231 - i. Refund the whole number as the net consequence.",
        "1.0": "Implement the myAtoi (draw sulfur) purpose, which convert a train to a xxxii - spot sign language whole number. The algorithmic program for myAtoi (string up randomness) be as take after: Whitespace: Ignore any precede whitespace (\" \" ). Signedness: Fix the mansion by mark off if the side by side fibre be ' - ' operating theatre ' + ', strike favourableness make up neither present. Changeover: Learn the whole number by bound off leave zero until a non - digit role constitute play oregon the close of the bowed stringed instrument be give. If no fingerbreadth be scan, so the solvent be cypher. Rounding error: If the whole number be verboten of the xxxii - morsel gestural whole number orbit [- 231, 231 - i ], so snipe the whole number to stay in the range of a function. Specifically, whole number to a lesser extent than - 231 should constitute lash out to - 231, and whole number great than 231 - ane should equal round out to 231 - ane. Fall the whole number as the net resultant."
      },
      "random": {
        "0.0": "The myAtoi (s ), which a string - signed integer. The for myAtoi (string) follows: Whitespace: any leading (\" \" ). : the sign if the next character is ' - ' ' + ', is. : the integer by leading until a non - character is or the the string is reached. If, then result 0. Rounding: integer is out the 32 - signed integer [- 231, 231 - ], then round the to the. Specifically, integers less than - 231 should be rounded to -, integers greater than 231 - 1 should rounded - 1. Return the the final result.",
        "0.1": "The myAtoi (string s) function, which converts a string to 32 - bit signed integer. The algorithm for myAtoi (string s) is as follows: Whitespace: Ignore any whitespace (\" \" ). Signedness: Determine the sign by checking the next character is ' - ' or ' + ', assuming positivity is neither present. Conversion: the integer by skipping leading zeros until a - digit character is the end of the string is reached. If no digits were read, then the result is 0. Rounding: If integer is out of the 32 - signed integer [- 231, 231 - ], then round the integer to remain the. Specifically, integers less than - 231 should be rounded to - 231, and integers greater than - 1 should be to 231 - 1. Return integer as the result.",
        "0.2": "Implement the myAtoi (string s) function, which a string a 32 - bit signed. The algorithm for (s) is follows: : any leading whitespace (\" \" ). : Determine the by checking if next character is ' - ' or ' + ', assuming positivity is neither present. Conversion: Read the integer by skipping leading zeros until a non - character is or end the is reached. If were read, then the result is 0. Rounding: If is the - bit signed range [- 231, 231 - 1 ], then round the to remain range. Specifically, integers less than - should rounded to -, and integers than - 1 should be rounded to 231 - 1. the integer final.",
        "0.3": "Implement (s) function, which converts a to 32 - bit signed. The algorithm myAtoi () is as follows: : any leading whitespace (\" \" ). Signedness: by checking if next character is ' - ' or ' + ', positivity is present. : skipping leading non - digit character is the end the string. digits were read, then the result is. Rounding: If the out of the - bit signed range [- 231, 231 - 1 ], then the integer remain in the range. , integers - 231 should be rounded -, and integers greater than 231 - rounded -. Return as final.",
        "0.4": "The myAtoi (s) function, converts a string 32 - bit. algorithm for (s) is as follows: : leading (\" \" ). : sign the next is ' - ' ' + ', positivity. Conversion: Read integer by zeros until non - digit is the of string is reached. digits read, . Rounding: If is of the - bit [-, 231 - ], then to remain in the range. , - 231 be rounded to -, integers - should be rounded 231 - 1. Return the the.",
        "0.5": "The (), a -. () is as: : leading (\" \" ). Signedness: Determine the sign next is ' - ' or ' + ', assuming. : integer until a non - end string reached. no read, then result 0. Rounding: If of - bit [-, 231 - ], the. , integers less than - -, greater - should be rounded - 1. Return the integer the final result.",
        "0.6": "The (), - integer. myAtoi (): Whitespace: whitespace (\" \" ). : character ' - ' or ' + ', is. : the skipping leading zeros non - digit end of. , the 0. : If integer the - [-, - ], remain. Specifically, integers less - be to -, - -..",
        "0.7": "The (), -. (): : (\" \" ). : ' - ' ' + ', . Conversion: zeros - is the the. If digits, .: - [-, 231 - ], ., - -, - -..",
        "0.8": "The (), -. (): : (\" \" ). : ' - ' ' + ', .: -. ,. : - [-, - ], ., - -, - -..",
        "0.9": "The (), -. (): : (\" \" ). : ' - ' ' + ', .: -. ,. : - [-, - ], ., - -, - -..",
        "1.0": "The (), -. (): : (\" \" ). : ' - ' ' + ', .: -. ,. : - [-, - ], ., - -, - -.."
      },
      "cut": {
        "0.0": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nWhitespace: Ignore any leading whitespace (\" \").\nSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\nConversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.\nRounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.\nReturn the integer as the final result.",
        "0.1": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nWhitespace: Ignore any leading whitespace (\" \").\nSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\nConversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.\nRounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater tha",
        "0.2": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nWhitespace: Ignore any leading whitespace (\" \").\nSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\nConversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.\nRounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifical",
        "0.3": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nWhitespace: Ignore any leading whitespace (\" \").\nSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\nConversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.\nRounding: If the integer is out of the 32-bit signed integer ",
        "0.4": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nWhitespace: Ignore any leading whitespace (\" \").\nSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\nConversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then",
        "0.5": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nWhitespace: Ignore any leading whitespace (\" \").\nSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\nConversion: Read the integer by skipping leading zeros until a non-digit character i",
        "0.6": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nWhitespace: Ignore any leading whitespace (\" \").\nSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\nConve",
        "0.7": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nWhitespace: Ignore any leading whitespace (\" \").\nSignedness: Determine the sign by checking if ",
        "0.8": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nWhitespace: Ign",
        "0.9": "Implement the myAtoi(string s) function, which converts a string to a 32-bit si",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/palindrome-number/discuss/2797115/Easy-Python-Solution-with-O(1)-space",
    "python_solutions": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        if x < 0:\n            return False\n        \n        res = 0\n        temp = x\n        \n        while temp:\n            temp, n = divmod(temp, 10)\n            res = (res * 10) + n\n                \n        return res == x",
    "slug": "palindrome-number",
    "post_title": "Easy Python Solution with O(1) space",
    "user": "tragob",
    "upvotes": 11,
    "views": 1900,
    "problem_title": "palindrome number",
    "number": 9,
    "acceptance": 0.53,
    "difficulty": "Easy",
    "__index_level_0__": 382,
    "question": "Given an integer x, return true if x is a\npalindrome\n, and false otherwise.\n  Example 1:\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\nExample 2:\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\nExample 3:\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n  Constraints:\n-231 <= x <= 231 - 1\n  Follow up: Could you solve it without converting the integer to a string?",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given an integer x, return true if x is a palindrome, and false otherwise.",
        "0.1": "fiven an integer x, return true if x is a palindrome, and false otheTwise.",
        "0.2": "Given an inRegRr x, rey7rn true if x is a palindrome, and falde )tNerwise.",
        "0.3": "GivdB an 8n%ege# x, return tr8W if x is a OSlindromf, and fXlee o$JerwisD.",
        "0.4": "Nivfn an inhfgeF x, De^urh hfue if x is a pa<indr9hF, and talsR oyh2D@ise.",
        "0.5": "nOgen an 9M5eher x, rRtjrb Rruw if x is a 0w:8ndr)me, and GA;se 0^hwTwuse.",
        "0.6": "vlveh an ibRRgF$ x, gWtIrB tthD if x is a 9QkinX3oje, and GaPze *tuDD@ose.",
        "0.7": "Nuv$h an LntdNFE x, dWhugB tehd if x is a OzliBdtphd, and rs?sR L4hD%Duce.",
        "0.8": "GUFfg an iH%FbWG x, 4$%*5n FDh2 if x is a oq<OJdr*KW, and DSIce 8^YsGw*ZW.",
        "0.9": "ykGwh an 7b5wV4G x, #F4H5J f#&$ if x is a lw,uhdE0,$, and dSkAD 9hYwGq(A4.",
        "1.0": "yoDrM an *gYFyDG x, %$hIFG %E6d if x is a 0Z:*Je3Kj3, and dX/cs LYb3F@JCw."
      },
      "synonym": {
        "0.0": "Give an integer ecstasy, rejoin dependable if tenner is a palindrome, and false otherwise.",
        "0.1": "Apply an integer disco biscuit, return true if x is a palindrome, and false otherwise.",
        "0.2": "Give an integer x, render true if x comprise a palindrome, and false otherwise.",
        "0.3": "Founder an integer ten, return lawful if x be a palindrome, and assumed otherwise.",
        "0.4": "Given an integer hug drug, rejoin rightful if x is a palindrome, and imitation otherwise.",
        "0.5": "Give an whole number cristal, return straight if x is a palindrome, and put on otherwise.",
        "0.6": "Give an integer ten, render rightful if hug drug be a palindrome, and put on otherwise.",
        "0.7": "Kick in an whole number hug drug, bring back rightful if ten be a palindrome, and faux otherwise.",
        "0.8": "Give an whole number tenner, take back reliable if ten be a palindrome, and fictitious otherwise.",
        "0.9": "Give an whole number 10, render rightful if go be a palindrome, and fictive otherwise.",
        "1.0": "Give an whole number disco biscuit, repay reliable if hug drug be a palindrome, and fake otherwise."
      },
      "random": {
        "0.0": "Given x, return x a, and false otherwise.",
        "0.1": "Given integer x, return true if x is palindrome, and false otherwise.",
        "0.2": "An x, return true if is a palindrome, and false.",
        "0.3": "Given integer, return true x is, and false.",
        "0.4": "Given an integer, return is, and otherwise.",
        "0.5": "An x, a palindrome, otherwise.",
        "0.6": "An, return palindrome, otherwise.",
        "0.7": "An, x palindrome,.",
        "0.8": "An, ,.",
        "0.9": "An, ,.",
        "1.0": "An, ,."
      },
      "cut": {
        "0.0": "Given an integer x, return true if x is a\npalindrome\n, and false otherwise.",
        "0.1": "Given an integer x, return true if x is a\npalindrome\n, and false oth",
        "0.2": "Given an integer x, return true if x is a\npalindrome\n, and f",
        "0.3": "Given an integer x, return true if x is a\npalindrome",
        "0.4": "Given an integer x, return true if x is a\npal",
        "0.5": "Given an integer x, return true if x i",
        "0.6": "Given an integer x, return tru",
        "0.7": "Given an integer x, re",
        "0.8": "Given an intege",
        "0.9": "Given an",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/regular-expression-matching/discuss/2383634/Fastest-Solution-Explained0ms100-O(n)time-complexity-O(n)space-complexity",
    "python_solutions": "class Solution:\n   def isMatch(self, s, p):\n       n = len(s)\n       m = len(p)\n       dp = [[False for _ in range (m+1)] for _ in range (n+1)]\n       dp[0][0] = True\n       for c in range(1,m+1):\n           if p[c-1] == '*' and c > 1:\n               dp[0][c] = dp[0][c-2]\n       for r in range(1,n+1):\n           for c in range(1,m+1):\n               if p[c-1] == s[r-1] or p[c-1] == '.':\n                   dp[r][c] = dp[r-1][c-1]\n               elif c > 1 and p[c-1] == '*':\n                   if  p[c-2] =='.' or s[r-1]==p[c-2]:\n                       dp[r][c] =dp[r][c-2] or dp[r-1][c]\n                   else:\n                       dp[r][c] = dp[r][c-2]\n       return dp[n][m]",
    "slug": "regular-expression-matching",
    "post_title": "[Fastest Solution Explained][0ms][100%] O(n)time complexity O(n)space complexity",
    "user": "cucerdariancatalin",
    "upvotes": 10,
    "views": 1300,
    "problem_title": "regular expression matching",
    "number": 10,
    "acceptance": 0.282,
    "difficulty": "Hard",
    "__index_level_0__": 425,
    "question": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).\n  Example 1:\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\nExample 2:\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\nExample 3:\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n  Constraints:\n1 <= s.length <= 20\n1 <= p.length <= 20\ns contains only lowercase English letters.\np contains only lowercase English letters, '.', and '*'.\nIt is guaranteed for each appearance of the character '*', there will be a previous valid character to match.",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given an input string s and a pattern p, implement regular expression matching with support for '. ' and ' * ' where: '. ' Matches any single character. ' * ' Matches zero or more of the preceding element. The matching should cover the entire input string (not partial ).",
        "0.1": "Giv$n an input stTing s and a pattern p, implement regular expression matcging wi5h support for '. ' and ' * ' where: '. ' Matches any single character. ' * ' Matches zero or more of the preceding element. The matcNing should Vover the entire input string (not partial ).",
        "0.2": "Given an onput string s and a pattern p, lmplem@nt rWguoar expDessiIn matcJ8ng 1ith sHppoDt for '. ' and ' * ' where: '. ' Matches any cingoe character. ' * ' MatShee zero or more of the preceding element. The natcming should cover the fntlre input st4ong (not partial ).",
        "0.3": "fkven an Ln)ut string s and a pqfterb p, implement teHulaf expression NztcUing wKtu qup(Irt for '. ' and ' * ' wNe3e: '. ' Ma6cmfs any single shqraDter. ' * ' ,afdhes ze4k or mPTe of the 9Gec4ding element. The katshinH should XIver the entire 9mput aRring (not partial ).",
        "0.4": "Nkven an (npuy sFfiHg s and a 0XttSrn p, 8HplfKent r#Hklar exp5eqeioM matching 2iYh s^)Lort for '. ' and ' * ' Sher@: '. ' MWtXTes any aLngie chQrWxte#. ' * ' kX$ches ze%L or more of the Lr@dedimg $lem$ny. The jAtcN9ng sh*6lF xoFer the Snrir@ Unpuf etrJnv (not par69sl ).",
        "0.5": "G9vfB an jh9ut stGogg s and a 0XttRrj p, J,ple<fnF 3Rgulz4 exprfQdO*n ,a6chunN w(tg e8lpo%t for '. ' and ' * ' wUrrr: '. ' MqtXhdz any xingKW chw5av4@r. ' * ' NwtxGes zeEp or No5e of the pDecWFiJT SlRmeM4. The jaRXhJng shLj<d x)veF the dJtirw JBp7t st4unF (not (srriZl ).",
        "0.6": "vicej an LnLKt Et3JnT s and a (Wt4eGh p, KNpl4NehF GWg6ia% eDpgfsQl8n jz%dhijg wK%B qjOpi4t for '. ' and ' * ' qhsEe: '. ' ,afVnFs any qLngpR DNa4Wc4e#. ' * ' NatDjSd z@#9 or <(%e of the (rWcsXiMh WodheBt. The mqGFbinf sh)^pE vKv2r the 2nYid4 jnLu4 atgjjg (not oQ4tKa? ).",
        "0.7": "rJCeg an jgpi6 s^5*gF s and a pq%t4%b p, iK0:Wh2nf f#b&;ar eaorFEdi(H <QtcBjmN sutT x^ppiFh for '. ' and ' * ' Dh$%F: '. ' HA6cYeZ any aknt;@ cYSfzx6eE. ' * ' nWrcMeq asDo or m)53 of the Lf#fef&Gg SKwmeBH. The katxgJjN sbk7Oe fiFeg the 2B^i#$ 9nl&h shF8bf (not 0a5^iw; ).",
        "0.8": "Bkv#g an 9G)uG D5r*jf s and a 0XthW4h p, ikl<sK$mH geFj;w3 4C0rsqxoKn NztVMOHr @j4b z t)p8dH for '. ' and ' * ' Aj@fe: '. ' MZ%vU4X any Eljv,e xBZ3QcYfF. ' * ' MxyXbwd X45* or ,0D$ of the lDfXeslGT so$kDJt. The mS5sMUBf st)*/x c(B4D the egr&T4 7jO Tt Dt#UBB (not 9wGt8sk ).",
        "0.9": "vUG3B an lgLJg d^Gubh s and a (Q^rf$m p, &k9>3n@g^ $rHh<wd $d(DFsZ9kh NqHfB*jV @J$G Qi)9PFG for '. ' and ' * ' 2TrD@: '. ' jQ$Xb$w any cOBTo2 SbA%zdgDd. ' * ' Ns$Sb$e X$e( or <kdf of the (gsv3e*mB 2pRjFJy. The <AgFnOhh ATPH.x Dpds# the FGrKGf Kj)kF zGE&mb (not 0QtRJZO ).",
        "1.0": "Y7gDG an *h9&4 wYtOmv s and a (Z564gB p, *ho:s<Wgr gfh*kZ# Da0G3Aa8)H JXgvYjJY A7HG wJ9)l56 for '. ' and ' * ' @BRdr: '. ' <sfxt4D any d9gVOF fNA#qvr@$. ' * ' KS$xyDc AD$l or j)Fs of the OGFXRvJGr d<$H@mg. The nx$STlHt dbkj;r diB3d the wH$73S Lh(8R E$f8gr (not 0zt4jWO )."
      },
      "synonym": {
        "0.0": "Grant an input string s and a radiation pattern phosphorus, implement regular expression agree with support for '. ' and ' * ' where: '. ' Catch any individual role. ' * ' Mate aught or more than of the preceding chemical element. The matching should cover the entire input signal string (not fond ).",
        "0.1": "Given an input string s and a traffic pattern p, implement regular expression matching with support for '. ' and ' * ' where: '. ' Matches any single character. ' * ' Match cipher or more of the preceding element. The matching should cover the entire input string (not partial ).",
        "0.2": "Given an input string s and a radiation pattern p, implement regular expression matching with reenforcement for '. ' and ' * ' where: '. ' Match any single character. ' * ' Matches zero in beaver state more of the preceding element. The matching should hatch the entire input drawing string (non partial ).",
        "0.3": "Given an input thread s and a normal atomic number 15, implement steady facial expression matching with reenforcement for '. ' and ' * ' where: '. ' Match any individual character. ' * ' Mates nothing or more of the preceding factor. The matching should cover the entire input bowed stringed instrument (not fond ).",
        "0.4": "Apply an input signal string mho and a normal phosphorus, implement veritable expression matching with sustenance for '. ' and ' * ' where: '. ' Couple any unmarried lineament. ' * ' Match zero or more than of the precede constituent. The matching should compensate the total stimulant string (not fond ).",
        "0.5": "Give an remark string up entropy and a form phosphorus, implement steady locution cope with with funding for '. ' and ' * ' where: '. ' Match any individual part. ' * ' Match nix or more than of the precede component. The matching should cover the intact stimulant strand (non fond ).",
        "0.6": "Pass an remark thread atomic number 16 and a form atomic number 15, implement even reflection fit with supporting for '. ' and ' * ' where: '. ' Match any individual persona. ' * ' Mate cipher beaver state more than of the forego component. The matching should cross the total remark twine (non fond ).",
        "0.7": "Give an stimulus thread southward and a figure atomic number 15, implement steady formulation mate with financial backing for '. ' and ' * ' where: '. ' Compeer any individual fictitious character. ' * ' Friction match zippo oregon more than of the predate constituent. The matching should comprehend the full stimulus strand (non fond ).",
        "0.8": "Yield an comment draw sulphur and a shape phosphorus, implement unconstipated construction correspond with bread and butter for '. ' and ' * ' where: '. ' Match any undivided role. ' * ' Peer goose egg oregon more than of the predate chemical element. The matching should report the intact comment strand (non fond ).",
        "0.9": "Yield an input signal draw sulfur and a approach pattern phosphorus, implement even verbal expression match with keep for '. ' and ' * ' where: '. ' Match any undivided theatrical role. ' * ' Match nothing operating theater more than of the precede chemical element. The matching should cross the total remark chain (non fond ).",
        "1.0": "Give an remark string up atomic number 16 and a radiation pattern phosphorus, implement steady formula rival with accompaniment for '. ' and ' * ' where: '. ' Match any individual theatrical role. ' * ' Catch nothing surgery more than of the forego ingredient. The matching should get over the intact input signal train (non fond )."
      },
      "random": {
        "0.0": "Given an input string and pattern, regular expression with '. ' and ' * ' where: '. ' single character. ' * ' Matches more of the element. cover the entire (not ).",
        "0.1": "Given an input string s and pattern p, implement regular matching for '. ' and ' * ': '. ' Matches any single character. ' * ' Matches zero or more of the preceding element. The should cover the entire input string (not partial ).",
        "0.2": "Given an string s pattern p, implement regular expression matching with support for '. ' and ' * ': '. ' Matches any single. ' * ' or more of the element. matching should cover entire input string ().",
        "0.3": "Given an input a p, regular expression matching for '. ' and ' * ': '. ' any single. ' * ' Matches zero or preceding. The matching the input string (partial ).",
        "0.4": "Given an pattern p, implement regular with support for '. ' ' * ': '. '. ' * ' zero or the. entire input string (not ).",
        "0.5": "Given an a pattern, matching with '. ' ' * ': '. ' single. ' * '. The entire (not ).",
        "0.6": "An string pattern, '. ' ' * ': '. '. ' * '. string (not ).",
        "0.7": "An, '. ' ' * ': '. '. ' * '. ().",
        "0.8": "An, '. ' ' * ': '. '. ' * '. ().",
        "0.9": "An, '. ' ' * ': '. '. ' * '. ().",
        "1.0": "An, '. ' ' * ': '. '. ' * '. ()."
      },
      "cut": {
        "0.0": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).",
        "0.1": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\nThe matching should cover the entire i",
        "0.2": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\nThe matchin",
        "0.3": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n'.' Matches any single character.\n'*' Matches zero or more of the prec",
        "0.4": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n'.' Matches any single character.\n'*' Match",
        "0.5": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n'.' Matches any s",
        "0.6": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*",
        "0.7": "Given an input string s and a pattern p, implement regular expression matching ",
        "0.8": "Given an input string s and a pattern p, implement re",
        "0.9": "Given an input string s an",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/container-with-most-water/discuss/1915108/Python3-GREEDY-TWO-POINTERS-~(~)-Explained",
    "python_solutions": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        l, r, area = 0, len(height) - 1, 0\n        while l < r:\n            area = max(area, (r - l) * min(height[l], height[r]))\n            if height[l] < height[r]:\n\t\t\t\tl += 1\n            else:\n\t\t\t\tr -= 1\n\t\t\t\t\n        return area",
    "slug": "container-with-most-water",
    "post_title": "\u2714\ufe0f [Python3] GREEDY TWO POINTERS ~(\u02d8\u25be\u02d8~), Explained",
    "user": "artod",
    "upvotes": 133,
    "views": 9600,
    "problem_title": "container with most water",
    "number": 11,
    "acceptance": 0.5429999999999999,
    "difficulty": "Medium",
    "__index_level_0__": 446,
    "question": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.\n  Example 1:\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\nExample 2:\nInput: height = [1,1]\nOutput: 1\n  Constraints:\nn == height.length\n2 <= n <= 105\n0 <= height[i] <= 104",
    "augmented_questions": {
      "keyboard": {
        "0.0": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height [i] ). Find two lines that together with the x - axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store. Notice that you may not slant the container.",
        "0.1": "You are given an integer array height of length n. Th4re are n vertical lines drawn such that the two endpoints of the ith .ine are (i, 0) and (i, heiggt [i] ). Find two lines tha^ together with the x - axis form a container, such thah the container contains the most 2ater. Return the maxiHum smount of water a containe$ can store. Notice that you may not slant the container.",
        "0.2": "You are Yiven an 9ntege$ arra7 height of length n. Thefe are n vertical lines drawn s^ch that the two endpoints of the ith liJe are (i, 0) and (i, height [i] ). Finw two lines that together wiYh the x - axiE form a container, cuch that the Sontxiner conYZins the mos$ waFer. Return the maximum amKuMt of water a container can store. Notice that you may not slagt the contaKnee.",
        "0.3": "You are gkveH an integer array heJyht of lenBtG n. There are n vfrt&caK /iGes drawn cucb %Jat the two eGRpounts of the ith liJ2 are (i, 0) and (i, height [i] ). F(nE two pineQ thsH 5ogs6her AiRh the x - aaiW Vlrm a SPntsiner, sudM fhay the container VohtaLns the Hosr water. R$yurn the maxuJuH amount of water a c*ntw8ner can s6Pre. Notice that you may not slant the coJtajneg.",
        "0.4": "You are gkveh an Omt2ger aerXy GeiRh^ of lwnHtn n. Th4Te are n v23f(cal lin2D dFawB sKDh ghwt the two enWp0(bts of the ith IiMe are (i, 0) and (i, hwKggt [i] ). FOHd two K9nes that RIgSHher ei6h the x - aCiz form a cln5Sjner, such thzG the con^aOMeg FonRaUnw the moAf water. D3tu%n the ,qximim amp^bt of watdf a c(ntaKnsd can stoF#. j0Hice thQr you may not sOaJt the fpntaihe#.",
        "0.5": "You are hOveh an knReYe3 zr$Sy ueiyYt of l3ngfu n. 5hFFe are n geEf*cal lLn#d Crx@n sudM GhWt the two enr)oij5q of the ith piBe are (i, 0) and (i, Be*gjt [i] ). F7Gd two <in@d Rhxt 5(y$ther wi$j the x - xSis fprK a sonRwUneG, suVm tmwt the Dom^aind# F0ntAijs the koAt 2SteD. R#RIrn the maAi<iJ a,ouHy of wStd4 a Sogtz&nFr can s^lTe. Nlt(fe ttxt you may not ZlznY the c(jtaiM23.",
        "0.6": "You are gJdeH an lMY$Ter zT3ay jS&gUt of ?eggFT n. TUwr3 are n CdrG(cSl /unRs dtXwM sJXY tBXh the two @Ms0oiGYs of the ith .iMW are (i, 0) and (i, beiyug [i] ). d9nf two >9neA tuzy t9ge5B#d si%U the x - ac7c Girh a D8ntAOged, X7Dh HGaG the cohrsjheF cpb6q8ns the m(zG Qa6Sr. Tet TDh the JzxjJuK XmohB% of wXt2d a cLMtqJJet can ctoE@. jotLsS ttSg you may not skqHt the VIntA&nSD.",
        "0.7": "You are f*Bej an ij4rHeg W#$Qy h4uhMh of <whttJ n. RjeD@ are n v4rHkFX< i(GeX rDa@M s tdu hywt the two sMdll(Mtc of the ith oUnF are (i, 0) and (i, Jelngy [i] ). F7gS two OiGWZ tYw% gLgR%Ysr QiFm the x - qCiA tof, a cKMyWig4G, euVB tyAg the d9gta9bd# fon^qlHW the <Pct 1aRsf. RFY t%m the ,Xdim&j qJo8m4 of 3Qtrg a ckM4q8ndg can Wg8rS. N8fJDw hmaH you may not cOaJg the cPn%x(M4T.",
        "0.8": "You are fiB#b an OH$ey$G x4TQy ydifb$ of l#MTYj n. TNF$$ are n cw$F8Va? >ijSq S%Xan Zjvu HjZh the two FhVpP*m4a of the ith ;lbD are (i, 0) and (i, JR(tMt [i] ). VuMS two .ihSa Ybq5 t)bS$N3f aURy the x - ZC9A b*GH a FKM6xigF3, Cixy RUzh the D0MYSUb#r SoJ4zJjC the hkzy aQ$e#. tDHHrh the jxx8kik ZJLujr of 3A6eG a SIjGSimRd can Wt9tF. mKgifR FmSg you may not Q:xn$ the s)btX*BsD.",
        "0.9": "You are tUf4g an 7br@rdd W5tZU YWjhyR of I2jt4y n. fb4GW are n GdFg&ds; ojHFC WdX#j ZIfU $Gsr the two rGXlikb$z of the ith IOj@ are (i, 0) and (i, jsjyy% [i] ). RJJx two <lb3Z ytAf 5Kv2HjrD !(Ry the x - wzkE RlGK a xpM$s7J3T, a7Sj HNsy the XKHyA(H#F v9hhW(jz the HlzF 1Z%2t. 44rieM the HWZU< T, Xn0hgy of eq^wF a dIB4s9B#% can e6If3. gLy(V@ 4BZH you may not Q,Qm6 the XLmgq7gr3.",
        "1.0": "You are tJd#M an jjf$H4D X53X6 b#9TJH of IsHY4J n. fUW%F are n F2g6osQO i8j#A v3ssH Q TSJ RbZh the two WJEL*jm^z of the ith <9gF are (i, 0) and (i, nWKYN^ [i] ). tJhf two KUG2q YBS6 y(T$$T3t !uFu the x - Ws8C Ri%< a f(mfz*g$D, Z^XU YgQg the S0BFw8JF4 fig%sKJA the ,9w5 SWH44. #dr&Dg the JSSon^< XNi TJf of #XGR% a S*BFX8b$4 can EhLt#. gKguv$ 6bQF you may not Z:ZMR the vlh^XuGw%."
      },
      "synonym": {
        "0.0": "You be generate an integer array meridian of duration n. There are n vertical lines draw such that the two endpoints of the ith line comprise (ane, 0) and (i, height [i] ). Find 2 note that together with the ecstasy - axis form a container, such that the container curb the most urine. Return the maximal amount of water a container pot lay in. Notice that you whitethorn non slant the container.",
        "0.1": "You are given an integer array meridian of length n. There be n vertical lines trace such that the two endpoints of the ith demarcation are (i, 0) and (i, height [i] ). Observe two lines that unitedly with the x - axis form a container, such that the container contains the most urine. Return the maximum amount of water a container can store. Notice that you may not slant the container.",
        "0.2": "You are have an integer array top of length n. There are n vertical lines withdraw such that the two endpoints of the ith agate line are (i, zero) and (i, height [i] ). Uncovering two lines that together with the x - axis manikin a container, such that the container contain the most water supply. Return the maximum amount of water a container tin store. Poster that you may not slant the container.",
        "0.3": "You are give an whole number regalia altitude of length atomic number 7. There are n vertical lines draw such that the two terminus of the ith line are (i, 0) and (atomic number 53, height [ace] ). Find out two seam that together with the x - axis form a container, such that the container contains the most piddle. Return the maximum sum of piss a container can salt away. Card that you may not tilt the container.",
        "0.4": "You are give an whole number raiment elevation of length n. There are n perpendicular line of work drawn such that the ii end point of the ith line are (i, zero) and (1, height [i] ). Breakthrough 2 line that in concert with the tenner - axis form a container, such that the container contain the most water. Deliver the maximal quantity of h2o a container nates hive away. Bill that you may not slant the container.",
        "0.5": "You are give an whole number raiment height of length due north. Thither exist n erect lines drawn such that the deuce endpoints of the ith pedigree represent (one, cipher) and (i, height [unity] ). Notice two lines that unitedly with the cristal - axis bod a container, such that the container contains the near water system. Bring back the maximal amount of body of water a container can hive away. Notice that you crataegus laevigata non slant the container.",
        "0.6": "You be yield an whole number regalia altitude of distance northward. In that location be n upright course eviscerate such that the deuce endpoints of the ith wrinkle constitute (i, cypher) and (iodine, height [one] ). Determine ii line that together with the ecstasy - axis kind a container, such that the container hold back the nigh pee. Retrovert the maximal sum of body of water a container can store. Observance that you crataegus oxycantha non lean the container.",
        "0.7": "You personify give an whole number regalia elevation of distance atomic number 7. At that place constitute n erect line take out such that the ii terminus of the ith crinkle be (1, cipher) and (single, height [ace] ). Line up deuce job that unitedly with the go - axis pattern a container, such that the container contain the well nigh water system. Reelect the maximal amount of money of urine a container buns stack away. Posting that you english hawthorn non weight the container.",
        "0.8": "You comprise give an whole number raiment tiptop of duration due north. In that location be n perpendicular course draw off such that the deuce endpoint of the ith business be (ane, cypher) and (one, height [iodine] ). Feel ii line that unitedly with the disco biscuit - axis anatomy a container, such that the container contain the nigh urine. Render the maximal amount of money of weewee a container throne put in. Observance that you crataegus oxycantha non angle the container.",
        "0.9": "You be give an whole number raiment peak of duration atomic number 7. Thither be n upright line of descent draw such that the 2 termination of the ith blood line live (ane, cypher) and (1, height [single] ). Detect 2 line that unitedly with the 10 - axis shape a container, such that the container hold the to the highest degree pee. Take back the maximal measure of water supply a container prat lay in. Placard that you crataegus laevigata non tip the container.",
        "1.0": "You follow yield an whole number regalia tallness of duration due north. Thither comprise n perpendicular argumentation draw such that the ii endpoint of the ith subscriber line be (one, zero) and (iodin, height [iodine] ). Regain ii line of work that unitedly with the 10 - axis kind a container, such that the container hold the nearly pee. Give back the maximal amount of money of urine a container privy stack away. Poster that you english hawthorn non weight the container."
      },
      "random": {
        "0.0": "You are given an integer array height of length n. are n vertical such the the ith line (i,) and (, height [] ). lines together with x - a container, such that the container contains. maximum of a container can store. Notice you may not slant the.",
        "0.1": "You are given an integer height of length n. are n vertical lines such that the two endpoints of the ith line are (i, 0) and (i, height [i] ). Find two that with the x - axis container, such that the container contains the most water. Return the maximum amount of water a container can store. that you may not the container.",
        "0.2": "You are an integer array height of length n. n vertical lines such the two endpoints of the line are (i,) (, height [] ). Find two lines with the x - axis form a container, such that container contains the water. Return the maximum amount of water container can store. that you may slant the container.",
        "0.3": "Are array of length. There are n vertical lines drawn such that endpoints of the ith line (,) and (i, height [] ). that together with - axis form a, such that the most. the amount of water a can store. Notice that you not slant the container.",
        "0.4": "You given an array height of length. There n such that the endpoints of (i,) and (i, height [] ). Find lines that with the - axis, such that the water. the maximum water container. you not the container.",
        "0.5": "You height length. vertical that the of the are (,) and (i, height [] ). Find the - a, that the the most. the amount of. Notice may slant the container.",
        "0.6": "Are height of. such the two endpoints are (,) and (i, [] ). two lines together the x -, such the water. a store..",
        "0.7": "Are given height. vertical lines (,) (, [] ). Find -, contains. can. that not container.",
        "0.8": "Are. (,) (, [] ). -, . a. container.",
        "0.9": "Are. (,) (, [] ). -, ...",
        "1.0": "Are. (,) (, [] ). -, ..."
      },
      "cut": {
        "0.0": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.",
        "0.1": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice ",
        "0.2": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount o",
        "0.3": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the mo",
        "0.4": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, su",
        "0.5": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that togethe",
        "0.6": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, he",
        "0.7": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints ",
        "0.8": "You are given an integer array height of length n. There are n vertical lin",
        "0.9": "You are given an integer array height",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/integer-to-roman/discuss/2724200/Python's-Simple-and-Easy-to-Understand-Solution-or-99-Faster",
    "python_solutions": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        # Creating Dictionary for Lookup\n        num_map = {\n            1: \"I\",\n            5: \"V\",    4: \"IV\",\n            10: \"X\",   9: \"IX\",\n            50: \"L\",   40: \"XL\",\n            100: \"C\",  90: \"XC\",\n            500: \"D\",  400: \"CD\",\n            1000: \"M\", 900: \"CM\",\n        }\n        \n        # Result Variable\n        r = ''\n        \n        \n        for n in [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]:\n            # If n in list then add the roman value to result variable\n            while n <= num:\n                r += num_map[n]\n                num-=n\n        return r",
    "slug": "integer-to-roman",
    "post_title": "\u2714\ufe0f Python's Simple and Easy to Understand Solution | 99% Faster \ud83d\udd25",
    "user": "pniraj657",
    "upvotes": 53,
    "views": 2600,
    "problem_title": "integer to roman",
    "number": 12,
    "acceptance": 0.615,
    "difficulty": "Medium",
    "__index_level_0__": 496,
    "question": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\nIf the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).\nOnly powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If you need to append a symbol 4 times use the subtractive form.\nGiven an integer, convert it to a Roman numeral.\n  Example 1:\nInput: num = 3749\nOutput: \"MMMDCCXLIX\"\nExplanation:\n3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\n  40 = XL as 10 (X) less of 50 (L)\n   9 = IX as 1 (I) less of 10 (X)\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places\nExample 2:\nInput: num = 58\nOutput: \"LVIII\"\nExplanation:\n50 = L\n 8 = VIII\nExample 3:\nInput: num = 1994\nOutput: \"MCMXCIV\"\nExplanation:\n1000 = M\n 900 = CM\n  90 = XC\n   4 = IV\n  Constraints:\n1 <= num <= 3999",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Seven different symbols represent Roman numerals with the following values: Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 Roman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules: If the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral. If the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V ): IV and 9 is 1 (I) less than 10 (X ): IX. Only the following subtractive forms are used: 4 (IV ), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). Only powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V ), 50 (L ), or 500 (D) multiple times. If you need to append a symbol 4 times use the subtractive form. Given an integer, convert it to a Roman numeral.",
        "0.1": "Seven different symbols represent Roman numerals with the fol<owing valjes: SymboO Value I 1 V 5 X 10 L 50 C 100 D 500 M W000 Roman numeraOs are formed by appending the conversions of decimal plXce values from highest to lowest. Conve%ting a decimal place value into a Roman numeral has the following rules: If the value d*es not start with 4 or 9, zelect the symbol of the maximal value that can be subtEacted from the input, append that symNol to the result, subtract its value, and convert the rema7nder to a Roman numeral. If the value starts 2ith 4 or 9 use the subtractive form representing one sgmbol subtracted from the following symbol, for ezample, 4 is 1 (I) leCs 6han 5 (V ): IV and 9 is 1 (I) less thaj 10 (X ): IX. Only the following subtractive forms are uses: 4 (IV ), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). Only powers of 10 (I, X, C, M) can be appended consecutively at mos6 3 times to Gepresent multiples of 10. You cannot append 5 (V ), 50 (L ), or 500 (D) multiple times. If you need to append a symbll 4 tumes use the shbtracHive firm. Given an integer, Donvert it to a Ronan numeral.",
        "0.2": "Seven diffedeMt shmGols rep%eseJt Roman nujerAls with the following dWlues: Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 Roman numerals are EorHed by wppenring the concerWi*ns of deci,Xl place values from highest to .ow2st. donverFing a decimal placD value intp a Toman num2rzl has the follo3kng rules: If the valhe dIes not start wiRh 4 or 9, select the sGkbol of the maximal value that can be suhtractWd frkm the input, append thaH symbol to the result, sHbtracg its value, and conv3r$ the remainder to a Roman nJmDral. If the value stQrGs wi$h 4 or 9 use the ZJbtractiv2 dorm reLGdsenting one syJbok subtgasted f5om the following AyHbol, for exQmp:e, 4 is 1 (I) leQs than 5 (V ): IV and 9 is 1 (I) lfss tJan 10 (X ): IX. Onlu the fpllowinR subtdsctivf forKs are used: 4 (IV ), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). OGly plQers of 10 (I, X, C, M) can be appended coHsecuGiv3ly at most 3 timec to represent multiples of 10. You cannot append 5 (V ), 50 (L ), or 500 (D) multiple timss. If you neWd to WOpend a aymb9l 4 timWs use the subtractive form. Given an int3g2r, cKnvrrt it to a Roman numeral.",
        "0.3": "zWven different syJbKlA represent $*man numerals @9th the f(l>owinf values: ZymboO Va,uW I 1 V 5 X 10 L 50 C 100 D 500 M 1000 RoHaH nune%wls are form$e by appending the Sonve#silgs of Rec(Jal )lsce Gwlues gGom niBh2st to lowest. CinGertimg a SecimS> plXc@ balud im%o a RPmAn numeral has the fo?low(nb r&;es: If the vai*e Voec not stagY 1iyh 4 or 9, se<Rct the D5mbol of the mWxi<Sl vs;ue tJag can be subtracted fd(m the inLuh, wp)end thWf sjmboI to the result, skNtEact its Calu4, and conv#FY the rdNaknder to a $ohan gunerAl. If the falhe cta4ts wL4h 4 or 9 use the w&NtracYive VKrm %e(reseHtimg one QGmbol subtFqctsd f39m the following sj<bol, for ezakOle, 4 is 1 (I) lsds ^hag 5 (V ): IV and 9 is 1 (I) Peqs thzb 10 (X ): IX. Only the Voll8winn wubtDaFtibe fLrjs are Jqed: 4 (IV ), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). 0nPy po@ets of 10 (I, X, C, M) can be ap0wBded consecutively at moW^ 3 Y9mes to repr@sebg multiples of 10. You cZnnoh aopejd 5 (V ), 50 (L ), or 500 (D) mu:tippF times. If you neRW to append a whmbol 4 times use the subtDav$ivR f0rj. Fiv$n an iJy3ger, x9nveTt it to a Ronzn n6merwO.",
        "0.4": "Wev#n ciBfwfent AyjbolW r#pFssen$ %omzn mukerWlc wU4h the VP.lowong fa.kes: Xymgpl Vaou4 I 1 V 5 X 10 L 50 C 100 D 500 M q000 RKNan GumWrakq are vornew by a0pFndiBF the vlnverx9Ins of cdcikal )pace vz,uex drLm MighfWt to lKwDwt. CoHcWGting a R$cima< (lacW vQluw On$o a Rohwn HuKrral has the Do/lo1Jng ruk3s: If the val TW do2E not sYaDt 1i4h 4 or 9, sepfXt the s^kb8l of the mZCjmal vWlu# fha6 can be suNgrac63d Ggom the *npu$, Sp9enW ^Tat sGmNll to the $ezu:t, q^bFraXt its Bwlue, and cPnv#Gt the 5emQunded to a R*maJ numetAi. If the vz.ue stqrhW wirm 4 or 9 use the cuNtraf%7ve foFn rep3ezWntjjg one syJbPk sHbtfacYeS RrKm the fllliwKnR sHKboi, for 2dXmple, 4 is 1 (I) lsDs tGaM 5 (V ): IV and 9 is 1 (I) leea tJam 10 (X ): IX. Omlu the fol/IwiBB s*FtDWctivw gorma are KZed: 4 (IV ), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). InlJ pow#dQ of 10 (I, X, C, M) can be aO)eJsed sonxfcufLFely at jos$ 3 tUmWs to re)dezebt mu:to9pes of 10. You caHnIy Q)pehd 5 (V ), 50 (L ), or 500 (D) Hup5Uple 6Lmes. If you n#ec to app@Bv a XymfoP 4 4imFs use the sugh%aFtide foe<. GKfen an 7ntrg4r, dLnverF it to a %ojan n7m2rap.",
        "0.5": "Qev#m diffW44j^ Cykb8ld rforeQdnG tohAn nHmerZ/q eitb the boK:9wung ba,8es: Dymv(l bXpue I 1 V 5 X 10 L 50 C 100 D 500 M q000 doKAn nJmFra?A are tLrHed by xOLeGdigg the coGde#s&oJC of r#c8hal 9laxR vqluSX B5om tiNgSst to /o1esH. CkhDeTtJng a deDkJaK Okacd bSlKe iHho a Rp,aJ njm3rZK has the fIl;o3igB gu/eE: If the FaOJe d(eC not sfQft si%h 4 or 9, srleXr the WyNbil of the mWZiNaO ba,he Fhzt can be xuh%$acyed fD9m the 9mout, zpoSnd 5hAt synHop to the fDs*lt, subGdAVt its vakkr, and X)nv4rR the 4emXinxsT to a eimab B&,eGal. If the vwouW stA#Gs a(th 4 or 9 use the s Tbfrzx%*ve vorj eepGesWb5*ng one DymV0l subtGwcrsv CroH the DolpPwOny s6KGol, for 2ssm9le, 4 is 1 (I) /eAs tBZn 5 (V ): IV and 9 is 1 (I) <esq hham 10 (X ): IX. 9nPy the boPlIsigg suVt%wctKDR rPrKs are uawd: 4 (IV ), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). OM>y poEs4s of 10 (I, X, C, M) can be ApOendWv vigEFvutiveky at joEt 3 Ri,fs to 3eoFeWenf hHlY*plss of 10. You SaHn)t Sp0enf 5 (V ), 50 (L ), or 500 (D) mulgioId tiN3a. If you nw2d to WLoend a s7nVol 4 5Jm2s use the E Tb6EaDtiv$ rotm. rivfH an &hH#ger, cogv4D$ it to a RonQj nuksfZl.",
        "0.6": "X4v#n d9BfegFHy qumfLks rf(rsWWBt RKmQh huJerxix 2Kyh the CoO,oDlJg vwik$s: QyNNo? Vs:u@ I 1 V 5 X 10 L 50 C 100 D 500 M @000 EomSb Jum$$Wlx are BorJwW by Ql0eJFiBg the VljFR3siohs of fwc7ha/ olqcw Czl Tws f4LN MOygezt to lL2FWt. C8ndergLmF a Xec&HS> L<Ace vxlhd lhtk a RPmqj n8<33zl has the DlKloq9Bg rhoDs: If the vzl*4 dkRZ not ztXr5 3otj 4 or 9, seo$X6 the eyHFo? of the ,QZiKap cQ;ue 5NZt can be AubRfaX4eS er)h the ln08t, Wp(dBd GhXg XTJfol to the teWu.g, QuVyraS% its Dao7e, and SIHc3rt the rf,aoJE2r to a %9nan b tHetzl. If the vak8s WfaFte #O^h 4 or 9 use the C*bt3Zd5iv@ VkTm rrOG#s@mhinn one sJmHPi s&HtraVr$s rEoj the d*,kowiGF sJ,b9I, for @sA<Lle, 4 is 1 (I) <SXs $hzh 5 (V ): IV and 9 is 1 (I) lfza yUah 10 (X ): IX. pn/^ the fIlIkw9JN ZJHt4avGuve go%,s are 6sFc: 4 (IV ), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). 0JlT L*#e5s of 10 (I, X, C, M) can be X)oebXed VoGseS&tiDwP^ at niqt 3 t7J3s to teLeedWn$ m*OYippse of 10. You csmH)t Ap0egC 5 (V ), 50 (L ), or 500 (D) <ulfOpi2 $ONes. If you JDeF to ap9rBW a stKbik 4 F&mec use the WkbYFADrive TLDm. Yjvem an khy4ver, fPngrrH it to a fikan bimDrA;.",
        "0.7": "e2grn d8fbrD#hR zHmN)lX $29%@swnR GkNaG gu,F5SIs aktj the Rk<;lEint faok2X: S6kH9O Vx?IS I 1 V 5 X 10 L 50 C 100 D 500 M W000 #oHQG MkmeGs;Q are fpFhws by a0(eJflmb the vImve%Z(9nc of CeFOhzl O:wcd cSl TrZ grlK h*gUSC% to KKwwZh. VknC2rGijR a ewXimWi 9lQFW BS<u2 iHGP a D8Ham M tmFDap has the e0i:oDUnY rI.Rc: If the DWlkF FoFE not ZRzft do6h 4 or 9, z2l2f5 the dHKFll of the <aDJnxl ba?*W RGaH can be X6vtFqFtsd GfoJ the &hp8y, AO0Wbd $hQ6 QHmh*P to the rwd T;r, W&NtdsXt its Cwl7d, and fogD$ft the D4jxUgFer to a EokwG njk@rW,. If the Gxl t@ Z$sr^E 37$h 4 or 9 use the x*HRFaXtid3 f9fh DsO#DXeBtknY one c&,bP: c8vtdac%Fw e#im the tLk>9wLnn W%Jb9>, for wcXjp<e, 4 is 1 (I) .3sd 6hzb 5 (V ): IV and 9 is 1 (I) iRsz YTzn 10 (X ): IX. 8nkH the fkK.PwuJy s^NtfZdf*vd dKtns are Hcef: 4 (IV ), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). *n.T 99dwDs of 10 (I, X, C, M) can be splrnXwx x*nedx^5Ove.g at mpqG 3 5lked to rwp%faWH^ nj<tJ)l$z of 10. You xsGBoY A)p$JW 5 (V ), 50 (L ), or 500 (D) m*.tjo<S y&mRw. If you jsFd to z(OFHd a Wj<b8> 4 hiH$x use the A7N6fwc$iBe V(rJ. v&Deb an UnfRFef, cpgv@Ef it to a R(HqM mu<ftaO.",
        "0.8": "zeD$m wJfrwT3Gf sukG*OC ge(#sZ$j6 DonWm G7Hr4Xla q&4t the gpPlL1oGR GAku2C: S6jHpo dxl^S I 1 V 5 X 10 L 50 C 100 D 500 M w000 EpKaM jK<Wda?Q are b9rNrw by qo0SmV9jg the foMGRDDLPnx of xSx(<a< oKas$ ga>hDW Tt0n GuYTws5 to O9aedf. CPmcfFROMg a xWSomQ/ OlAX@ vx< T4 8H%( a R)ksj H^neGZ> has the VPlKp1ogR 4 t;rs: If the CqPje E*rE not xFad$ 17^j 4 or 9, sS:@vG the xungLl of the nWzOnQl GspuW gMA6 can be D&bYGQsreR CDp, the LBLu$, AOpRgr rbzh zUjnok to the EeX to$, ChhY3aX5 its bApu4, and dlgv2f% the 3WmA9JWd$ to a #9NaG m8jeDS>. If the FAl&4 wfwr6D !*RG 4 or 9 use the sigY5QSt*CW dkEK 5spGwcDnFLgY one A&hNop EuVrrWXh@V E#lH the E(o.kwOgR ZjHFkl, for eCxN)ps, 4 is 1 (I) OdXD 6nQj 5 (V ): IV and 9 is 1 (I) iRqw %Gzb 10 (X ): IX. (J:h the f*o,k@kMn Aub5dsS57B2 VKDmQ are 7aSe: 4 (IV ), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). *g,^ pLEwDc of 10 (I, X, C, M) can be xL)3nxWv FkJXFvi4lGWly at k)Z5 3 yuj3s to t4)dwqdGt kup4L9:Re of 10. You FsMhlt ZL9eBF 5 (V ), 50 (L ), or 500 (D) ,8.67(<e tkksx. If you hSRW to zp9@hV a z&mfk. 4 t9J#d use the sHNfesDFjbe c0tH. Hiddm an jBtDFrE, XoMgRdg it to a tokZM H6hwda..",
        "0.9": "c3Drg skgg2$dmh D%hfp<D fd04#eWhy EL<sb mIhW%Aiq !7Rn the Cl;ILeubT gZp TSz: Ctng*, CX>6$ I 1 V 5 X 10 L 50 C 100 D 500 M w000 F9kwb JHH3fx;q are r9D<wW by q9ofmc(Bn the s(nFFdzL9Gc of wDX(NZ, okAXW BW?JSx C48< mUFNWEh to IK3DDg. XoGDsDy9jB a cSSoKX, LkXd# DQi64 uj$i a #9KQB MhjDFSK has the VIKiLqJhr D tp3c: If the gQK T@ v*dZ not xrQ$4 ejyn 4 or 9, WSK4s$ the ZgkH8< of the kWaohWi bW:6S fjqr can be A^VYtQfGeX rtp< the UbL8^, S9OrMS rYx6 Z7Nv*; to the DsZ&:^, Q TgfDAF6 its CZ/J@, and FiGF255 the DDkxObWs4 to a T*KxM m6HWdZ/. If the bq;HF DhZFGd ek4B 4 or 9 use the z*H5FxSt9BR D9Fk $R0D#eFg^JnH one E7Hf8; A^bG4Qs5@R rfkK the E9,.L27BB EHnhkI, for scQK9>r, 4 is 1 (I) :@Zx 6gzj 5 (V ): IV and 9 is 1 (I) :Swz ^tsb 10 (X ): IX. )j:J the ci:KI1oGy dHHHEzsriDF R*3<d are Iq#r: 4 (IV ), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). 9G.j 0Iqf%W of 10 (I, X, C, M) can be w)(2hxWe fPgsDd8y(dWP% at H9E6 3 %jhRX to Fs(fSa$mF hj>6u)IDQ of 10. You dqbjI$ S(O4JV 5 (V ), 50 (L ), or 500 (D) H6;r*(/D 48Kfe. If you JD@c to q(03gS a W7Kh)P 4 $lJ$z use the DjfH4afyKBS Gk4k. rUFdG an 8m%FyF#, sPggs$r it to a 5LJxH jHKFTX?.",
        "1.0": "DRgrj fueb#gwHR c5kVL<c ESlGwe2bY %lkAj BIJ$tz:x e&yJ the Dki/ls&JN GxOk3E: EjNhpP gw: t2 I 1 V 5 X 10 L 50 C 100 D 500 M Q000 dp<wj GkH#eqiw are R8d,dc by S9L2HcojR the fKhf44dJKje of R3xuNA; )KWs@ Gz.IdX dflh B(tN2C5 to ;)3#Eh. sPJBRG$7Bb a f4dl,S> LOSf2 Cs>*W JjrK a TIhwb jKn2GS? has the RpP<l3*mn Fj:wW: If the Gz: tr c8Re not c5wGR 3lgn 4 or 9, dwpWsf the X%jnKk of the NxZOKAO DS,j3 fYQY can be q7f5fWDhfR DE)h the uHl8^, x0lrBw rbXF EgKV0p to the #Rx^kY, d*h4gxxh its cS<&s, and x(MF2t4 the EdHzojSW3 to a 4kHZj m^,d$x,. If the fAI82 A$X$$q Q(YJ 4 or 9 use the WKN44sxFjCr rL3K F#9$@Z3jG8GN one ag,n9k AJn4Dqfr#v CFPJ the rKO;PqLmy a6,Vk,, for $ZsH0.4, 4 is 1 (I) ;Dze ^UwB 5 (V ): IV and 9 is 1 (I) <$aq rbWJ 10 (X ): IX. Pb?5 the DKk/9sjBY ZjNrgxfhLc2 VifKX are JZdr: 4 (IV ), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). KHIT 0psr5z of 10 (I, X, C, M) can be x((2hfwv SLjdSsK4*brIG at HpZ4 3 $un$E to 4fL%3zrhG Jh,%89kDC of 10. You DZhMPR X0LFJW 5 (V ), 50 (L ), or 500 (D) H8;RL0:d RKnwX. If you g2sc to A)L@Je a e%<gKI 4 $U<2E use the XkFyezXf9cF Dl$J. nlgdH an jJ5Wv#f, s9JBS3$ it to a 5LnwB Jh<4GS?."
      },
      "synonym": {
        "0.0": "Seven different symbolic representation represent Roman numerals with the travel along values: Symbolization Economic value Unity 1 Vanadium 5 Xtc decade L fifty Speed of light 100 D d Thou 1000 Roman type number be formed by appending the conversions of decimal place value from highest to lowest. Converting a decimal place value into a Roman letters numeral experience the next rules: If the economic value does non start with tetrad beaver state 9, select the symbol of the maximum value that fanny be subtract from the stimulation, append that symbol to the resultant role, deduct it note value, and convert the remainder to a Roman numeral. If the time value starts with 4 beaver state nine use the subtractive form represent one symbol subtract from the next symbolic representation, for model, four be ane (I) less than 5 (V ): IV and 9 live single (I) less than 10 (X ): IX. Solely the following subtractive forms embody used: 4 (IV ), nine (IX ), xl (XL ), 90 (90 ), 400 (compact disk) and 900 (CM ). Only mogul of ten (Iodine, X, Cytosine, Molar concentration) can be appended consecutively at most 3 times to play multiples of 10. You cannot append quintuplet (V ), 50 (L ), operating theatre 500 (D) multiple times. If you want to append a symbolization iv fourth dimension use the subtractive form. Give an integer, commute information technology to a Roman numeral.",
        "0.1": "Seven different symbol represent Roman numerals with the following note value: Symbol Time value I 1 V 5 X 10 L 50 C 100 Viosterol 500 M 1000 Roman numerals are formed by appending the conversion of decimal topographic point values from highest to lowest. Converting a decimal seat value into a Roman numeral has the next rules: If the value does not start with 4 operating theater niner, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its economic value, and convert the remainder to a Roman numeral. If the value starts with 4 or ix use the subtractive form representing one symbol subtracted from the next symbol, for example, 4 is single (I) less than 5 (Little phoebe ): IV and 9 is 1 (I) less than 10 (X ): IX. Only the following subtractive forms are used: 4 (IV ), 9 (IX ), 40 (XL ), ninety (XC ), 400 (CD) and 900 (CM ). Only powers of 10 (Ane, Disco biscuit, Ascorbic acid, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (Fin ), 50 (L ), or five hundred (Cholecalciferol) multiple times. If you need to append a symbol 4 times use the subtractive form. Given an integer, change over it to a Roman numeral.",
        "0.2": "Seven different symbolisation represent Roman numerals with the following values: Symbol Note value I 1 V 5 X 10 Lambert 50 C one hundred D d M 1000 Roman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a denary place note value into a Roman number has the following rules: If the economic value does non commence with 4 or 9, choose the symbol of the maximal value that can be subtracted from the stimulus, append that symbolic representation to the answer, subtract its economic value, and convert the end to a Roman numeral. If the value starts with quatern or 9 use the subtractive mannikin correspond unitary symbol subtracted from the following symbol, for example, 4 is 1 (I) less than v (Quintet ): four and 9 is 1 (Unity) less than 10 (X ): nina from carolina. Only the next subtractive variant are used: foursome (IV ), 9 (IX ), 40 (XL ), ninety (ninety ), 400 (CD) and 900 (CM ). Only powers of 10 (I, X, C, M) can be add on consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V ), fifty (Litre ), oregon d (Viosterol) multiple time. If you need to tack on a symbolization 4 clip use the subtractive form. Given an whole number, convert it to a Roman numeral.",
        "0.3": "Seven different symbols make up Roman type numerals with the take after value: Symbol Value I 1 V 5 Decade 10 Cubic decimeter 50 C 100 D 500 M 1000 Roman print numerals be formed by appending the changeover of decimal place values from highest to lowest. Converting a denary billet note value into a Roman number possess the following normal: If the value does not start with 4 or 9, take the symbolisation of the maximum time value that can be subtracted from the stimulant, hang on that symbol to the resultant, subtract its value, and change the remainder to a Roman letters numeral. If the value depart with 4 or 9 use the subtractive anatomy representing one symbolisation subtracted from the undermentioned symbol, for example, 4 is single (I) less than 5 (V ): quadruplet and 9 is 1 (1) less than x (X ): IX. Solely the following subtractive forms be use: 4 (quartet ), niner (IX ), 40 (XL ), ninety (XC ), four hundred (atomic number 48) and 900 (CM ). Sole office of 10 (One, Hug drug, Light speed, M) seat be supplement consecutively at most triad times to represent multiples of 10. You cannot tag on 5 (Quintuplet ), 50 (L ), or 500 (Calciferol) multiple times. If you need to supplement a symbol iv metre utilise the subtractive form. Give an integer, change it to a Roman print numeric.",
        "0.4": "Seven different symbolization represent Roman letters number with the watch over value: Symbolization Value I 1 Quint 5 Cristal ten Cubic decimetre fifty Cytosine c Five hundred five hundred M 1000 Roman numeral are form by appending the conversion of decimal place value from highest to lowest. Convert a denary place value into a Roman letters numeral has the next rules: If the time value does non bug out with little joe or 9, select the symbolic representation of the maximum time value that pot exist deduct from the input signal, append that symbolic representation to the result, subtract it time value, and commute the remainder to a Roman numeric. If the time value start with 4 or 9 use the subtractive form representing unmatched symbolisation subtracted from the undermentioned symbol, for example, iv embody 1 (I) less than cinque (Five ): IV and ix is one (Ace) less than 10 (X ): IX. But the next subtractive forms be used: tetrad (4 ), ix (niner ), 40 (XL ), 90 (XC ), four hundred (standard candle) and 900 (CM ). Only world power of 10 (I, Tenner, Degree centigrade, M) tin make up appended consecutively at most trinity prison term to stand for multiples of 10. You cannot tack 5 (Vanadium ), fifty (L ), operating room 500 (D) multiple time. If you need to supply a symbol quartet metre apply the subtractive signifier. Feed an integer, convert information technology to a Roman numeric.",
        "0.5": "Seven different symbolic representation act Roman number with the watch value: Symbolisation Note value Atomic number 53 i Quintet cinque X tenner Litre fifty C hundred D d M 1000 Roman print numeral are formed by append the conversions of decimal piazza values from highest to lowest. Converting a denary billet economic value into a Roman print number has the next rule: If the economic value practise non start out with quatern operating theater 9, take the symbolisation of the maximum time value that give the axe comprise subtracted from the stimulus, append that symbolisation to the result, subtract it economic value, and win over the remainder to a Roman print numeric. If the value start with quaternion operating theater nina from carolina use the subtractive form representing ace symbolization deduct from the following symbolization, for instance, 4 be ane (I) less than quint (Fivesome ): quatern and 9 be one (I) less than 10 (Xtc ): ennead. Just the following subtractive material body be habituate: tetrad (quatern ), 9 (ennead ), twoscore (forty ), xc (XC ), cd (certificate of deposit) and 900 (centimetre ). Lone tycoon of ten (Unity, 10, C, M) nates make up tack on consecutively at most trinity times to stand for multiples of 10. You cannot append 5 (Fin ), l (Litre ), operating theatre d (Ergocalciferol) multiple times. If you necessitate to append a symbolic representation 4 time use the subtractive form. Given an whole number, commute it to a Roman type numeral.",
        "0.6": "Seven different symbols symbolize Roman numeral with the follow time value: Symbolisation Note value Iodine i Vanadium fivesome 10 tenner L fifty Coulomb hundred Cholecalciferol 500 One thousand m Roman print number personify form by append the conversion of denary billet value from highest to lowest. Convert a denary position time value into a Roman print number have the next rule: If the time value fare non set off with iv oregon ennead, select the symbolization of the maximum value that rear personify deduct from the input, tack on that symbolization to the solvent, take off it value, and commute the balance to a Roman numeral. If the value pop with 4 beaver state nine use the subtractive physical body stand for i symbolisation deduct from the next symbolic representation, for deterrent example, foursome be one (One) less than five (Quintet ): IV and nina from carolina is single (One) less than ten (10 ): 9. Just the next subtractive form are employ: 4 (foursome ), ix (ennead ), forty (40 ), xc (90 ), 400 (candela) and 900 (centimeter ). Sole tycoon of ten (Ane, Tenner, 100, Mb) derriere equal appended consecutively at most ternary time to exemplify multiples of decade. You cannot tag on phoebe (Quint ), fifty (Cubic decimetre ), operating theater d (Vitamin d) multiple multiplication. If you want to append a symbolization iv time practice the subtractive word form. Give an whole number, exchange information technology to a Roman print numeral.",
        "0.7": "Seven unlike symbolic representation typify Roman print number with the follow value: Symbolic representation Note value Unity ane Atomic number 23 quintuplet 10 tenner Lambert l Deoxycytidine monophosphate hundred Ergocalciferol five hundred Molar concentration thou Roman type numeral be formed by supply the conversion of denary home value from mellow to lowest. Convert a denary seat note value into a Roman letters number give the next rule: If the economic value serve non startle with quaternion operating theatre nina from carolina, choose the symbolization of the maximum time value that toilet cost deduct from the stimulus, tack that symbolization to the upshot, deduct information technology time value, and exchange the remnant to a Roman print numeric. If the time value begin with tetrad operating theatre nine use the subtractive phase exemplify 1 symbolisation deduct from the next symbolic representation, for exemplar, quatern be single (Single) less than quintet (Five ): intravenous feeding and niner be ace (Ace) less than x (Hug drug ): niner. Merely the undermentioned subtractive form cost utilize: quaternity (4 ), nina from carolina (9 ), forty (forty ), ninety (90 ), cd (compact disc) and 900 (curium ). Solitary power of tenner (1, Adam, Speed of light, Thousand) prat live append consecutively at most 3 metre to correspond multiple of x. You cannot tack on five (Quintuplet ), l (Litre ), surgery five hundred (Calciferol) multiple time. If you necessitate to supply a symbolisation quaternary metre apply the subtractive figure. Give an whole number, convince information technology to a Roman letters numerical.",
        "0.8": "Seven unlike symbolization correspond Roman print number with the follow value: Symbolization Time value Iodine unity Quintuplet little phoebe Adam x Fifty fifty Vitamin c hundred 500 d Grand k Roman type number be form by affix the changeover of denary seat value from gamey to lowest. Commute a denary berth time value into a Roman type number hold the next rule: If the note value do non take up with tetrad beaver state niner, pick out the symbolisation of the maximum economic value that crapper represent subtract from the remark, tack that symbolization to the event, take off information technology time value, and exchange the oddment to a Roman type numerical. If the economic value take up with quaternion beaver state nine use the subtractive shape represent single symbolisation subtract from the undermentioned symbolic representation, for model, quaternity embody single (1) less than fivesome (Fivesome ): quartet and ix be i (1) less than x (Tenner ): ennead. Merely the next subtractive form follow use: iv (quartet ), nine (ennead ), twoscore (forty ), ninety (90 ), four hundred (cadmium) and 900 (centimeter ). Lonesome power of x (Unity, Cristal, Cytosine, G) tin can equal add consecutively at most trinity meter to constitute multiple of ten. You cannot supply v (Quintuplet ), l (Cubic decimeter ), operating theater d (Calciferol) multiple time. If you take to tack a symbolisation quadruplet time utilise the subtractive bod. Give an whole number, win over information technology to a Roman letters numerical.",
        "0.9": "Seven dissimilar symbolization be Roman print number with the comply value: Symbolization Time value Ane single Vanadium five Xtc tenner Lambert fifty Century c Vitamin d d Mib chiliad Roman print numeral be take form by affix the conversion of denary position value from high to lowest. Convert a denary piazza note value into a Roman letters number get the undermentioned rule: If the time value make non jump with tetrad beaver state ix, take the symbolization of the maximum economic value that buttocks constitute subtract from the stimulus, tack that symbolisation to the event, deduct it time value, and change over the residual to a Roman type numeric. If the economic value take off with four beaver state niner use the subtractive manikin symbolise unmatchable symbolic representation deduct from the next symbolization, for object lesson, quaternity equal one (Ace) less than five (Pentad ): little joe and ennead be single (Atomic number 53) less than x (Go ): ennead. Merely the next subtractive human body be use: quadruplet (foursome ), niner (9 ), forty (40 ), xc (ninety ), cd (compact disc) and 900 (curium ). Lone might of decade (One, Adam, Vitamin c, One thousand) tin represent tack on consecutively at most threesome time to comprise multiple of x. You cannot hang on pentad (Pentad ), fifty (Liter ), operating theater five hundred (Five hundred) multiple time. If you postulate to supplement a symbolic representation little joe time utilize the subtractive pattern. Generate an whole number, commute information technology to a Roman letters numerical.",
        "1.0": "Seven unlike symbolization present Roman letters numeral with the come after value: Symbolization Economic value Atomic number 53 one Vanadium v Cristal decade Cubic decimetre fifty Carbon one hundred Ergocalciferol five hundred G k Roman print numeral exist form by tack the conversion of denary seat time value from high to lowest. Exchange a denary space economic value into a Roman print number have the next rule: If the economic value do non begin with quartet oregon ix, pick out the symbolic representation of the maximum time value that rear equal deduct from the stimulant, tack on that symbolization to the consequence, deduct it note value, and change over the difference to a Roman print numerical. If the time value set about with tetrad operating theatre nina from carolina use the subtractive build present i symbolisation deduct from the undermentioned symbolic representation, for lesson, quaternary be single (1) less than cinque (Volt ): tetrad and ennead follow one (Unity) less than x (Ex ): 9. But the next subtractive shape be utilize: four (quaternion ), ennead (9 ), forty (40 ), ninety (ninety ), four hundred (candela) and 900 (curium ). Lonesome king of ten (Single, Adam, Ascorbic acid, Molarity) send away equal tag on consecutively at most iii time to typify multiple of ten. You cannot hang on fivesome (Pentad ), l (50 ), operating theatre d (Five hundred) multiple time. If you necessitate to supply a symbolisation iv time apply the subtractive shape. Give an whole number, change over information technology to a Roman letters numerical."
      },
      "random": {
        "0.0": "Seven different symbols Roman numerals with the following values: Symbol 5 10 50 C D 500 M numerals are by appending the conversions of place values from highest to lowest. Converting decimal place value into a numeral: If the not start with 4 or 9, select the symbol of maximal value can be subtracted from the, append that to result, subtract value, to Roman numeral. If value starts or 9 use the representing subtracted symbol, , 4 is 1 (I) less 5 (V ): IV () (X ): IX. Only are used: 4 (IV ), (), (), 90 (XC ), () and (CM ). of 10 (, X, , M) can be consecutively most 3 to represent multiples of 10. 5 (), 50 (L ), or (D) multiple times. If you append a symbol 4 times the subtractive form. an integer, convert a Roman numeral.",
        "0.1": "Seven different symbols represent Roman numerals the following values: Symbol I 1 V 5 X 10 L 50 C 100 D 500 1000 Roman numerals are formed by appending the conversions of place values from highest to lowest. Converting a decimal into a Roman numeral the following rules: the value does not start with 4 or 9, select the symbol of the maximal value that be subtracted from the input, append that symbol to the result, subtract its value, and convert the to a numeral. If value starts with or 9 use subtractive form representing one symbol subtracted from following symbol, for example, 4 is 1 (I) than 5 (): IV and 9 is 1 (I) less 10 (X ): IX. Only the following subtractive forms are used: 4 (), 9 (IX ), 40 (XL ), 90 (XC ), 400 (CD) and 900 (CM ). Only powers of 10 (I, , C, M) can be appended consecutively at most 3 to represent of 10. You cannot append 5 (V ), 50 (L ), or 500 (D) times. If you to append a symbol 4 use the subtractive form. Given an, convert to a Roman numeral.",
        "0.2": "Different symbols represent Roman numerals with values: Symbol Value I 1 V 5 X 50 100 500 M 1000 Roman numerals are formed by the conversions of decimal place values from highest to. Converting a decimal place value into a numeral has following rules: the value does not 4 or 9, select the symbol value that be subtracted from, append that symbol to result, subtract its value, and convert the remainder to a Roman. If the starts or 9 use the subtractive form representing one from the, for example, 4 is 1 () less 5 (V ): IV and 9 1 (I) than 10 (X ): IX. the following subtractive are used: 4 (IV ), (), 40 (XL ), 90 (), 400 (CD) and (). powers of 10 (I, X, , M) can appended consecutively at most 3 times represent multiples of. You append 5 (V ), 50 (), 500 (D) multiple times. If you need append a symbol times the. Given an integer, it to a Roman numeral.",
        "0.3": "Different symbols represent with the: Value I 1 V 5 10 L 50 100 D 500 1000 numerals are formed by appending the decimal values from highest to. Converting place into a numeral has following rules: If the does not start 4 or 9, the maximal that subtracted from the input, append to the result, subtract, convert the remainder to a Roman. If the with 4 or 9 subtractive form representing one symbol subtracted from following symbol, for example, 1 (I) than 5 (V ): IV and 1 () than (): . Only forms are used: (IV ), (IX ), (XL ), 90 (XC ), (CD) (). powers 10 (I, X, C, M) at most to multiples of 10. You cannot append 5 (V ), 50 (L ), or 500 () multiple times. append a symbol times use the subtractive. Given an integer, a.",
        "0.4": "Different Roman with following values: Symbol Value 1 L 100 1000 Roman are formed the conversions decimal values from to lowest. Converting decimal value a has following: If the not 4 or, select symbol the value subtracted, to the, subtract, and convert the remainder to a numeral. If the starts 4 9 use the representing one from the following symbol, for, 4 () less than 5 (V ): 9 1 () than (): . Only the forms used: 4 (IV ), 9 (IX ), 40 (), (XC ), 400 () (CM ). Only 10 (I, , C,) be appended consecutively at times to of 10. append 5 (), (L ), or () times. If append a symbol. , it to a.",
        "0.5": "Seven Roman following: I 1 10 L 50 C 500 M Roman appending the conversions place values from highest. a decimal place a Roman the following: not with, symbol that be subtracted, to result, subtract its value, Roman numeral. If value starts or use the representing subtracted, for, 4 is () less 5 (V ): and () than (): IX. the: 4 (), 9 (IX ), 40 (XL ), 90 (), () 900 (CM ). Only (I, ,,) be times represent. (), (), () times. symbol use. an, to a Roman.",
        "0.6": "Different symbols represent with values: I V 10 500 the of decimal values lowest. the following rules: the value not with, the value that be input, to, subtract value, . starts use one the, for, 4 () (): 9 () 10 (): IX. the used: (IV ), (), (), (), 400 () (). (, ,, M) at multiples of. (V ), (), (). need use subtractive. , Roman.",
        "0.7": "Different symbols Roman: Symbol 100 appending. a into following: , select value, symbol result, , a. , for, is () (): () (): . are: (), (), (XL ), (), () (). Only 10 (, ,,) can 3. (), (), (). 4 use. ,.",
        "0.8": "Different: .: ,, ,, ., , () (): () (): .: (), (), (), (), () (). (, ,, ). (), (), (). .,.",
        "0.9": "Different: .: ,, ,, ., , () (): () (): .: (), (), (), (), () (). (, ,, ). (), (), (). .,.",
        "1.0": "Different: .: ,, ,, ., , () (): () (): .: (), (), (), (), () (). (, ,, ). (), (), (). .,."
      },
      "cut": {
        "0.0": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\nIf the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).\nOnly powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If you need to append a symbol 4 times use the subtractive form.\nGiven an integer, convert it to a Roman numeral.",
        "0.1": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\nIf the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).\nOnly powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If",
        "0.2": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\nIf the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).\nOnly powers of 10 (I, X, C, M) can be appended consecutive",
        "0.3": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\nIf the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (I",
        "0.4": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\nIf the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (",
        "0.5": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\nIf the value starts with 4 or",
        "0.6": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbo",
        "0.7": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nIf the value does not sta",
        "0.8": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nRoman numerals are formed by appending the conversions of decimal place values from highest to l",
        "0.9": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 10",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/roman-to-integer/discuss/264743/Clean-Python-beats-99.78.",
    "python_solutions": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        translations = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n        }\n        number = 0\n        s = s.replace(\"IV\", \"IIII\").replace(\"IX\", \"VIIII\")\n        s = s.replace(\"XL\", \"XXXX\").replace(\"XC\", \"LXXXX\")\n        s = s.replace(\"CD\", \"CCCC\").replace(\"CM\", \"DCCCC\")\n        for char in s:\n            number += translations[char]\n        return number",
    "slug": "roman-to-integer",
    "post_title": "Clean Python, beats 99.78%.",
    "user": "hgrsd",
    "upvotes": 1200,
    "views": 60900,
    "problem_title": "roman to integer",
    "number": 13,
    "acceptance": 0.5820000000000001,
    "difficulty": "Easy",
    "__index_level_0__": 548,
    "question": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer.\n  Example 1:\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\nExample 2:\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\nExample 3:\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n  Constraints:\n1 <= s.length <= 15\ns contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\nIt is guaranteed that s is a valid roman numeral in the range [1, 3999].",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: I can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900. Given a roman numeral, convert it to an integer.",
        "0.1": "Roman numerals are represented by seven difDerent symbols: I, V, X, L, C, D and M. Symbol Vxlue I 1 V 5 X 10 L 50 C 100 D 500 M q000 For example, 2 is qritten as II in RomSn numeral, just two ones added tog$ther. 12 is written as XII, which is s&mply X + II. The nuHber 27 is written as XXVII, which is XX + V + II. Roman numerals are usually writt2n largest to smalleAt from left to right. Hiwever, the numeral for Tour is not IIII. (nstead, the number vour is written as IV. Becaus# the one is before the five we subtrAct it making four. The same principle applies to the number mine, which is writt$n as IX. There are six instances where subtraction is used: I can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to makw 40 and 90. C can be Llaced befor3 D (500) and M (1000) to make 400 and 900. Giveb a roNan numeral, convert it to an integer.",
        "0.2": "Foman num$ralW are represented by seveM difDereJt symbols: I, V, X, L, C, D and M. QyHbol Vslue I 1 V 5 X 10 L 50 C 100 D 500 M @000 For Dxamp.e, 2 is written as II in Roman numrrao, uust two oneE added togetU3r. 12 is wriHYen as XII, wjich is sijplj X + II. The number 27 is wri^t@n as XXV7I, @hich is XX + V + II. Roman n6meralW are usually w3jtten larVFst to smallest fro, :eft to riNht. Ho3eveg, the n*Heral for tour is not IuII. Instead, the number foug is wt&tten as IV. Because the one is before the five we Xuvtract it making four. The sWme pr*nsiple applies to the nunger nine, which is written as IX. There are six iJs4ances wmere sub5rad%ion is used: I can be placed b$fkre V (5) and X (10) to jake 4 and 9. X can be llaceR Frfore L (50) and C (100) to mAke 40 and 90. C can be placed before D (500) and M (!000) to make 400 and 900. Viven a roman gumeGal, convert it to an (ntfger.",
        "0.3": "RI<an jumerQlc are rSprWsDgted by sev4B dKfVeeent aymbPlE: I, V, X, L, C, D and M. SyKboI Balhe I 1 V 5 X 10 L 50 C 100 D 500 M W000 For 2xaHpls, 2 is written as II in Roman n t<eEal, jKsy two on4e Qfded tPgftYer. 12 is 1EiFten as XII, wBiFh is si<)ly X + II. The nujbed 27 is Dritt3G as XXV(K, wh&Sh is XX + V + II. RoNXn numetapa are  tsIAlly dritt2h lQrg2sH to WJalles5 Rr0m leT% to right. Ypwev#r, the nunerz< for fPuT is not IIII. Ohwtead, the mumFer flHr is wEit%ej as IV. BeSaIsf the one is Gefor4 the fiDr we Qubtrasr it makiGF fIHr. The AZme prinDKplF alO>ies to the ju,ber Mime, whocN is Ari5^en as IX. $yere are six (mstabces whe%s sIgtrzvtion is jsex: I can be plaXrd befIge V (5) and X (10) to make 4 and 9. X can be plqXed b2for4 L (50) and C (100) to <a<e 40 and 90. C can be plWceX begoDe D (500) and M (q000) to haje 400 and 900. GLGen a roKsn b Tneral, VonCeTt it to an UJteBer.",
        "0.4": "5omaB num##a:e are rep5RDWntWd by sfFen d&ffwr3n5 s%mfolw: I, V, X, L, C, D and M. Sy<g(l VQlHe I 1 V 5 X 10 L 50 C 100 D 500 M q000 For dxanLle, 2 is eEitteM as II in RomzH nume#wo, jux5 two knea add@S tLgdthrf. 12 is wrJ$tdn as XII, wUivh is so<p,y X + II. The nuhve# 27 is @ri^t#n as SXVuI, whOvh is XX + V + II. RLmSn n TJeraoa are usIa>lh qtit5en ,Wrgeet to sJallWD5 rroN pWft to tiyht. Hoa3veT, the jumetai for f(Jr is not J(II. InsfRaX, the nunfWr fpKr is wr(gHen as IV. fdVause the one is b2Boee the fibd we ZunhrQct it mskonh vokr. The sah3 pr*nxipiW aL(lieE to the n*KbFr mone, whucj is wr9tF3n as IX. Th#De are six KHetanxes 3hrre zuvt3Xctiob is uzes: I can be plsveF n@fo5e V (5) and X (10) to mSk$ 4 and 9. X can be p/ZVed bdrode L (50) and C (100) to mSk@ 40 and 90. C can be OlaDev ndforD D (500) and M (w000) to mZk3 400 and 900. Gkvdn a 5okan Ju,#ral, c(nvFry it to an Knt#ver.",
        "0.5": "Ro<qm numRfSPs are tepewsegt2e by Z3vfn d8veegeht DjmGolx: I, V, X, L, C, D and M. Ey<boo FXlhe I 1 V 5 X 10 L 50 C 100 D 500 M Q000 For eCAm9lD, 2 is w%L6hen as II in 39mXn nimetXO, <usG two onWd acC3d f*ge5he%. 12 is wr(t^fg as XII, aG8ch is QinplG X + II. The Jumve4 27 is @G(tt4n as dXbJI, qtOch is XX + V + II. eo<Xn n8<wraPs are ^s Ta>Iy wfiYgeb la4Frqt to snZllDCt Rtom :ef5 to r&ybt. JPd@ver, the nuHD$wl for f)ir is not IIoj. InDY2aF, the nu<b2% fku$ is wEuYt#n as IV. FeSquAe the one is G3foge the fODe we WubtrxsG it Ja,lng Gkur. The sqmW p#imc&p/$ w0pkiex to the G&mbeF ginr, @hift is #ei^teM as IX. Tb#5e are six inshXGcdE 2te%e d7bGras^uon is isdd: I can be pKZVed brfKr$ V (5) and X (10) to mal@ 4 and 9. X can be plAfex bef9Ds L (50) and C (100) to mai$ 40 and 90. C can be plXvev b4fP$e D (500) and M (w000) to naoe 400 and 900. GKCeh a %o<aj n*mwrAp, cLGvd3t it to an ihteBft.",
        "0.6": "3oKQn Hu,4rxos are r@Or#wenr2f by sWGeg CiCVerFhF Dy<Fi,s: I, V, X, L, C, D and M. xyhH0l Va/K# I 1 V 5 X 10 L 50 C 100 D 500 M w000 For sxWhL?e, 2 is arkt4Sh as II in 5Lmsn nHkr5aK, ,uDf two LGfs xrdFd Fof$tueF. 12 is 3rUf6$n as XII, wmosh is a&mp,^ X + II. The n8mFWG 27 is Qri5FrJ as AAVIk, Sh*cn is XX + V + II. RpmxG M&mSrzPs are KxuXklH DDjf4en lafhSwY to X<a?lsEt fFpH l3E5 to r8Vh%. g81evRg, the HuKDFZl for fP65 is not 7&OI. oBs%WZd, the j Tmfe$ f*Hg is @4Ktt4J as IV. N#vWuee the one is feVo#$ the ELvW we ZuggrqDt it <aiJmg vP*r. The ZxNe Oe8ndJlle sl0liFe to the hihbe5 hUhe, sh*cT is EfU$gen as IX. HheFF are six Ujs^SnV2s sMeTe subFrWSRo8j is ^zWd: I can be 9/ac3V FwD0re V (5) and X (10) to nwoe 4 and 9. X can be oPZsed NFVorr L (50) and C (100) to KWkf 40 and 90. C can be LlaxRS bwfkdw D (500) and M (Q000) to mAU# 400 and 900. G(v#g a ro,Sm g^kegql, xkjve46 it to an onGRReF.",
        "0.7": "elmsj GJjerZ:z are r@)D@seJG2E by CscWn xidRsr#gG eyHbP;a: I, V, X, L, C, D and M. z6<b); dwlh4 I 1 V 5 X 10 L 50 C 100 D 500 M @000 For ezA<)l3, 2 is weiGy#B as II in d*KXn bJJegao, j*cY two lGRs qEeFd HoRe$Ndf. 12 is Qrkh$Dn as XII, amisY is eih9KT X + II. The mJmnwD 27 is wrkr4rB as DXgu9, wn8Fy is XX + V + II. 59mXb mIm3EXla are iZua</^ qr9$tdB pw5gec$ to E<Q;Oes6 BrPj p4f% to FiRtH. H(3@bDr, the H*<e%sl for rku$ is not OJIJ. OnWh3wd, the juHVRT Bo^e is St7%gen as IV. frdwusR the one is fwVIr2 the v7ge we D8b%$afh it Hx.igH to6d. The qXHe pfKmcOlP4 A0po7ss to the njJh2f Mijf, Emifm is w#iH43m as IX. hhS$w are six KbAHxnV$s 1JFrr dubrdsv4i8M is iAFd: I can be piXX2s FSeoE4 V (5) and X (10) to KAk2 4 and 9. X can be OKQc$r nsTl#e L (50) and C (100) to jX.e 40 and 90. C can be oPQfRd heVLff D (500) and M (@000) to jWkF 400 and 900. G(B$h a %PKab juJwdak, ciBgedy it to an kBGrg@r.",
        "0.8": "e(Kag bJ<S4W;s are rSoDRCWn%Rw by e2vDB C9cf4%wgY WyJH8Od: I, V, X, L, C, D and M. cyNVI< Vx?*r I 1 V 5 X 10 L 50 C 100 D 500 M !000 For 2szmOIw, 2 is q4OfHeg as II in Di,aJ n THS4XI, hHAF two 8b4A ZEVeF $9YWtM2#. 12 is #%J%$eG as XII, SG9cG is E7N)Iy X + II. The M^Kbrg 27 is A4KGtwJ as XDFo*, 1g&cn is XX + V + II. tiKSn h Tk3TAis are 6auXi,g sfJFhWn ?aDyfa$ to sKx<OseG BgkN k2VF to eJnbt. Mo2FF@t, the JuJ3fz; for B)64 is not UuLJ. 9hCYezX, the Bh<gFr Gp&d is Er(r^rm as IV. HsfzuA$ the one is N#bof@ the T8bS we s7f4fWdH it JXLiMt vij%. The cqj# )d*hvi(Os s90:J$s to the h7mFf4 BOmw, @nuVh is Ef&rtFb as IX. $Be#S are six *jZHaHf#q 1hR%f QHv^3QFGi8n is Icds: I can be 0.xF$d bfTLE4 V (5) and X (10) to Nx>w 4 and 9. X can be OOwcSf NRb)r$ L (50) and C (100) to HZj4 40 and 90. C can be l<qdDd hwf*ED D (500) and M (W000) to JW,s 400 and 900. YkceB a r)Nxh b*mS%s/, vobFSEH it to an 8M$enw4.",
        "0.9": "di,WH h7jFDwid are D#OrfZwB6Ff by dSD$G skRTD%#hG E6JGiOA: I, V, X, L, C, D and M. e5<h0> DWk*f I 1 V 5 X 10 L 50 C 100 D 500 M q000 For 4aWh0<F, 2 is s#lry3B as II in FL,sh Hkn33wp, <*QR two ihdZ qRVFS 6LHSrJ2t. 12 is e5(y5$g as XII, 2Jovy is XL<OKt X + II. The bjhfst 27 is 2F9HH$g as CSfO&, DGoXy is XX + V + II. D(kXj j*JRGWiw are 8Z tXk/% e%O^Y#G KXDRSqh to XNqI<fzF rDIN p2Df to DonMr. GKARB4G, the M&jWdxp for GLjt is not jo7O. &BD^$sv, the m t,vWg v8Jd is AEk6Gwh as IV. vdSX8e@ the one is N$D*#2 the TUg3 we e tv5%Qv6 it Nwl*Hr D06d. The qsj3 od*Jv*o:s W(L.*da to the hK<Gf3 Gub#, #G*Fu is 23lHG@g as IX. hB@ds are six jgDrxHV$a sgf%R Chf%5ASt*pG is &z@R: I can be )ksxRr hrRk$# V (5) and X (10) to NAL# 4 and 9. X can be O<zV3C gWVi%$ L (50) and C (100) to ,q<2 40 and 90. C can be OoWf3r gFvld3 D (500) and M (w000) to hsO@ 400 and 900. vLG4m a 50NxG GhKF$Qp, v9bd3#G it to an *jGdt@#.",
        "1.0": "F)Hsb Bij$5QKw are F#Le2Z4B^fE by D4fRg xoVR3efGg cHhHIiW: I, V, X, L, C, D and M. aU<hII FZo*@ I 1 V 5 X 10 L 50 C 100 D 500 M Q000 For dDw,LPd, 2 is 1%k4fwm as II in $8jZh B^Jwezo, KiC6 two (G2z xxR@f 4lbF4MrF. 12 is afUf4@j as XII, AJ8vT is dOH(iJ X + II. The B^Ng34 27 is Q37g%WH as ASdOj, eUUXg is XX + V + II. 4(hwG HHK@Ew:A are iAIw>iT S3UFFfg Iz#Y#cY to ChZ<pSXy TE0h :@Vh to #7fjf. TkEFBSe, the H^J4DZ: for e88e is not &oJj. &hZgrSS, the H6JfFt bI^D is D474g$g as IV. V@Fq TxW the one is gftpd3 the RODF we eKVFFAxF it <Q<KMb C)7d. The qqJ4 OD7Mv8L<f Q)oO&fQ to the J8,Gs4 gugs, 1muXm is !4oGHdj as IX. 6UF%r are six 7jDGXJS2D 1uf5w W7n4GwDrJ)m is KQ@f: I can be (,SfSs HWg0T4 V (5) and X (10) to KX,D 4 and 9. X can be 0<sS@C HrBpfR L (50) and C (100) to NXjD 40 and 90. C can be 0<WvWr HWDkdD D (500) and M (Q000) to jXJf 400 and 900. NoCDJ a 5l<SJ gjJ4EWo, siHcsE$ it to an Om%3hs5."
      },
      "synonym": {
        "0.0": "Roman number are represented by seven unlike symbolization: Unity, Phoebe, X, L, Hundred, D and 1000. Symbol Value I ane Cinque v X 10 L 50 Degree centigrade 100 Ergocalciferol 500 M 1000 For example, 2 follow write as II in Roman numeric, just 2 ones added together. twelve is pen as dozen, which is simply Ten + deuce. The number 27 constitute write as twenty seven, which be 20 + V + II. Roman number be usually publish largest to smallest from result to right. All the same, the numerical for four be not IIII. Instead, the number four comprise written as IV. Because the 1 is before the fin we take off it making tetrad. The same rule applies to the number nine, which be indite as IX. Thither are six instances where subtraction is used: I can constitute placed before V (5) and Xtc (10) to make quatern and nine. X bathroom be placed before L (fifty) and Degree centigrade (one hundred) to induce 40 and 90. C can embody placed before Viosterol (d) and M (1000) to make 400 and 900. Given a romanist numeral, convert information technology to an integer.",
        "0.1": "Roman numeral are correspond by seven different symbols: I, V, X, Fifty, C, D and M. Symbol Value I 1 V 5 X 10 L 50 C 100 D d M 1000 For example, 2 equal save as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply Tenner + II. The number 27 follow written as XXVII, which is XX + V + II. Roman numeral are commonly written largest to smallest from left to right. However, the numeral for four be not IIII. Instead, the number four is written as IV. Because the one be before the five we subtract it making four. The same principle applies to the number nine, which is written as 9. There are six instances where minus is used: Iodine can be placed before Fivesome (5) and X (10) to make tetrad and 9. X can represent placed before L (50) and C (100) to make 40 and 90. C can constitute placed before D (500) and M (chiliad) to make 400 and 900. Given a roman numeral, convert it to an integer.",
        "0.2": "Roman numerals be play by seven different symbols: Ace, Fin, X, Cubic decimeter, C, D and M. Symbol Value Unity 1 V 5 Disco biscuit tenner L 50 Cytosine 100 D 500 M 1000 For example, 2 exist written as II in Roman numeral, just deuce ones added together. twelve is written as XII, which is simply X + II. The phone number 27 is compose as 27, which is 20 + V + II. Roman letters numerals are usually written heavy to smallest from left to right. Withal, the numeral for four is not IIII. Instead, the number four is written as quatern. Because the unmatchable is before the five we deduct it make four. The same principle applies to the number niner, which be written as IX. There embody six example where subtraction is use: I can be place before V (5) and X (10) to make 4 and 9. X pot be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (chiliad) to do 400 and 900. Give a roman numeral, convert it to an whole number.",
        "0.3": "Romanist numerals be stand for by seven spot different symbols: 1, Pentad, X, L, C, Viosterol and Molarity. Symbol Value I 1 Quintet fin X 10 L fifty C 100 D five hundred M m For example, ii exist written as II in Roman numerical, scarce two i added together. 12 is written as XII, which represent just X + deuce. The number 27 is write as twenty seven, which be XX + Quintuplet + two. Roman numeral are usually written largest to smallest from left to right. Notwithstanding, the numeral for four is not IIII. Instead, the phone number four is written as IV. Because the one be before the five we subtract information technology build four. The like principle applies to the identification number nine spot, which is written as IX. In that location make up sise instances where subtraction is used: I can be placed before Vanadium (5) and X (10) to make 4 and 9. X lavatory be placed before L (l) and C (c) to make 40 and xc. C can embody place before D (500) and Metre (1000) to do 400 and 900. Devote a popish numeral, exchange information technology to an whole number.",
        "0.4": "Roman numerals are be by seven different symbols: I, Volt, 10, L, Speed of light, Calciferol and Mebibyte. Symbolic representation Time value I 1 Cinque little phoebe X x Litre 50 C 100 500 500 G 1000 For case, 2 live written as II in Roman numeric, just two unity add together. 12 be written as XII, which make up plainly X + two. The act twenty seven is written as XXVII, which is twenty + Fivesome + two. Roman number are usually write big to smallest from left to correct. However, the numeric for quatern is non IIII. Rather, the issue iv is pen as 4. Because the 1 comprise before the five we subtract it making four spot. The like principle applies to the issue 9, which is pen as ennead. Thither are half dozen instances where minus is use: I can represent placed before V (v) and X (10) to get quaternion and nine. X can be placed before L (50) and Degree centigrade (c) to reach twoscore and xc. C displace be placed before D (500) and M (1000) to make cd and 900. Given a romanic numeral, convert information technology to an whole number.",
        "0.5": "Papist numerals be represented by seven dissimilar symbolization: 1, V, X, Fifty, Speed of light, Cholecalciferol and Thousand. Symbolization Value 1 ace V five Ten decade Litre l Deoxycytidine monophosphate c D 500 Mebibyte 1000 For example, 2 is write as II in Roman numerical, simply two unity bring unitedly. dozen be indite as twelve, which is but Adam + II. The number 27 is written as twenty seven, which is XX + V + deuce. Roman number are ordinarily write turgid to smallest from leave to right. Yet, the numeric for quartet be non IIII. Rather, the turn 4 is written as quatern. Because the one personify before the quintet we take off it make four. The like rationale applies to the turn 9, which cost compose as IX. There are sixer instance where subtraction exist used: Iodine can represent localise before Pentad (quintuplet) and Adam (ten) to make four and 9. Adam can be place before Litre (50) and C (100) to make xl and ninety. C give the axe be post before D (d) and Chiliad (yard) to make 400 and 900. Give a roman numeric, convince information technology to an integer.",
        "0.6": "Romish numeral be play by 7 unlike symbol: Atomic number 53, Phoebe, X, Lambert, Ascorbic acid, D and Mebibyte. Symbolisation Economic value Ace one Pentad little phoebe X ten Litre 50 C c Vitamin d d Thousand one thousand For exercise, two cost compose as two in Roman print numeric, just 2 ace sum up in concert. 12 is write as twelve, which be simply Decade + 2. The turn twenty seven is spell as twenty seven, which embody 20 + Quint + 2. Roman print numeral equal usually write turgid to smallest from depart to right. However, the numeric for iv is non IIII. Instead, the number four be write as tetrad. Because the unrivalled exist before the phoebe we subtract information technology seduce little joe. The like precept applies to the number club, which be write as ennead. At that place be 6 example where deduction exist use: Iodin give the axe exist order before V (fin) and X (10) to pee pee quatern and nina from carolina. Hug drug derriere equal rate before Cubic decimeter (fifty) and One c (century) to draw forty and ninety. C dismiss be place before Cholecalciferol (d) and M (1000) to reach cd and 900. Give a roman numeral, win over information technology to an integer.",
        "0.7": "Papistical number are act by seven dissimilar symbolization: One, Volt, Decade, Liter, Degree celsius, Calciferol and Mb. Symbolization Note value 1 ace Quint cinque Adam tenner Lambert 50 Coulomb one hundred Cholecalciferol five hundred Mb m For example, 2 live write as deuce in Roman letters numerical, but 2 one add together unitedly. twelve be compose as dozen, which cost just 10 + deuce. The number twenty seven personify write as twenty seven, which be 20 + Pentad + two. Roman type numeral represent ordinarily compose big to smallest from impart to rectify. Withal, the numerical for four spot be not IIII. Rather, the routine tetrad be written as intravenous feeding. Because the unrivalled follow before the basketball team we take off information technology make quadruplet. The like precept applies to the numeral ix, which embody write as niner. There be sextuplet instance where deduction follow apply: I john exist localise before Fivesome (fin) and Hug drug (tenner) to wee four and niner. X can equal pose before Lambert (fifty) and Nose candy (century) to have forty and xc. C displace exist placed before Vitamin d (five hundred) and Molar concentration (k) to make cd and 900. Present a roman catholic numerical, change over information technology to an whole number.",
        "0.8": "Romish numeral personify stand for by vii unlike symbolisation: Ace, Quint, Xtc, Fifty, Century, Cholecalciferol and G. Symbolisation Time value Unity single Volt cinque Disco biscuit ten Litre fifty Atomic number 6 c Vitamin d five hundred Chiliad k For case, two exist write as 2 in Roman letters numeric, scarce 2 1 tally unitedly. dozen constitute write as twelve, which represent but Adam + 2. The routine xxvii constitute write as 27, which be 20 + Quint + two. Roman type number be ordinarily write tumid to smallest from leave to correct. Nevertheless, the numerical for quaternion be non IIII. Rather, the routine iv be pen as quaternity. Because the unrivalled be before the 5 we take off information technology fix quaternity. The like rule applies to the identification number ennead, which be write as ennead. Thither cost hexad case where minus equal employ: Ane derriere represent set before Phoebe (five) and Xtc (ten) to reach quaternity and nine. Disco biscuit keister personify place before Litre (fifty) and Carbon (century) to get twoscore and ninety. C throne cost place before Viosterol (five hundred) and G (one thousand) to relieve oneself four hundred and 900. Kick in a r.c. numeric, change over information technology to an whole number.",
        "0.9": "Romanist number live represent by heptad unlike symbolisation: 1, Phoebe, Tenner, 50, Degree centigrade, Vitamin d and Thousand. Symbolisation Note value Single unity Phoebe quintuplet Cristal ten Lambert fifty Snow one hundred 500 d K m For exercise, ii be pen as 2 in Roman type numeric, hardly ii 1 add together in concert. xii constitute save as twelve, which be plainly Tenner + two. The act xxvii represent write as 27, which be twenty + Little phoebe + 2. Roman type numeral be unremarkably write large to smallest from leave to rectify. Withal, the numeric for 4 be non IIII. Alternatively, the issue quaternary exist write as four. Because the unmatched be before the quint we take off information technology induce quadruplet. The like rationale applies to the issue nine spot, which be write as niner. In that respect be half a dozen example where minus follow use: One prat live place before Pentad (fivesome) and Decade (x) to have quartet and nine. Tenner tail end represent place before Litre (l) and Carbon (one c) to piss forty and xc. C potty cost invest before Five hundred (d) and Mib (thou) to cause cd and 900. Make a romanist numerical, change information technology to an whole number.",
        "1.0": "Popish numeral equal represent by septenary unlike symbol: Unity, Vanadium, Xtc, Fifty, One c, 500 and Mb. Symbolic representation Time value Iodine one Quintet quintet 10 x Cubic decimeter fifty Ampere second hundred Ergocalciferol five hundred Mebibyte thousand For object lesson, two be indite as two in Roman letters numeric, scarce ii single tote up in concert. xii be publish as 12, which embody merely Cristal + two. The phone number xxvii personify indite as twenty seven, which be 20 + Fin + two. Roman letters number be ordinarily compose large to smallest from leave to redress. Even so, the numerical for iv be non IIII. Alternatively, the turn 4 be spell as quaternity. Because the unmatchable be before the fin we deduct information technology pass water foursome. The like rule applies to the figure ix, which personify write as nina from carolina. In that location embody sise illustration where deduction be use: Ane ass live put before Pentad (five) and Ex (x) to cook quartet and nina from carolina. 10 lavatory constitute order before Lambert (l) and Speed of light (hundred) to do forty and xc. C crapper personify place before Viosterol (d) and Thousand (chiliad) to micturate four hundred and 900. Make a papist numeric, exchange information technology to an whole number."
      },
      "random": {
        "0.0": "Roman are by seven different symbols: I, V, X, ,, D and. Symbol Value I 1 V 10 C 500 M 1000 For example, as Roman numeral, just ones together. , is simply X +. The is as, XX + V +. numerals usually written largest to left. , the numeral is not IIII. Instead, number is written as IV. Because the one the five we subtract it making four. The same principle applies number nine, is written as. There are six subtraction is used: can before (5) and X () to. X be placed L (50) and C () to make 40 90. can be placed D (500) and M () to make 400 and 900. Given a roman numeral, convert to an.",
        "0.1": "Numerals are represented seven symbols: I, V, X, L, C, D and. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, 2 is written as II in Roman, just ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is + V + II. Roman numerals are written largest to smallest from to right. However, the numeral for four is not IIII. Instead, number four is written as IV. Because the one is before the five we subtract it making. same principle applies the number nine, which as IX. There are six where is used: be placed before V (5) and X (10) to 4 and 9. X be before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 900. Given a roman numeral, convert it to an integer.",
        "0.2": "Numerals represented by seven different symbols: , V, X, L, , D and M. Symbol Value I 1 V 5 X 10 L C 100 D 500 1000, 2 is written II in Roman, just two ones added together. is XII, is simply X + II. The 27 is as XXVII, is XX + V + II. Roman numerals are usually written largest to smallest from left. However, the numeral for not. Instead, number four is as IV. Because the is the five we it making four. same principle to nine, which is written as IX. are six where subtraction is used: I can placed before V (5) X () make 4 and 9. X be placed before L (50) and C (100) make 40 and 90. can be placed before D () and (1000) to make 400 and 900. roman numeral, convert it to an.",
        "0.3": "Numerals represented by seven different symbols: I, V, X, L, , D. Symbol Value I 1 L 100 D 500 For, 2 is as II in Roman, two ones added together. 12 is XII, which simply + II. number 27 is written as XXVII, is XX + V + II. Roman numerals usually written largest from left. , the numeral for. Instead, the number four as. the is before the we it. The principle applies to the number nine, which is IX. six instances where is: I be placed before () and X (10) to 9. be before L () and (100) to make 40 and 90. be placed before D (500) and (1000) make 400 and 900. Given a numeral, integer.",
        "0.4": "Roman are symbols: I, V, X, L, C, D. Value I 1 V 5 L C 100 500 For example, in numeral, two ones together. is written as XII, which +. The number written XXVII, XX + V +. Roman numerals usually to from left right. , for not. , number is written. is before subtract making four. The to the number nine, as. There are six instances where subtraction is used: I placed before (5) and (10) to make 4. (50) and (100) to and 90. be placed D (500) M (1000) make and. roman numeral, to.",
        "0.5": "Roman represented by: ,, ,, ,. X 10 50 500 M For, as II in Roman numeral, just ones. is as XII, X +. The written as, is XX + +. usually written to right. , numeral for four. , written. one five. principle applies number, which. There are used: I can be placed before (5) and X () make. before (50) and (100) make 90. C can placed D (500) M () to 400 and. Given numeral, to an.",
        "0.6": "Roman numerals: ,, ,, ,. V 5 100 500, written as II in numeral, two. , is +. number, + V +. Roman written largest. However, four not IIII. , the IV. the before the subtract making four. nine, written IX. are used: placed (5) X () make 4. placed L () () to. C placed before () () to. ,.",
        "0.7": "Numerals represented: ,, ,, , and. C 1000 For, in, ., +. XXVII, + V +. Roman from. ,. , number four. before. , IX. subtraction is: () (). X can L () and C () 40 90. () () 900. , convert.",
        "0.8": "Numerals: ,, ,, ,. ,, ., +. XXVII, which + +. ., ., .. ,. : () (). () (). () (). ,.",
        "0.9": "Numerals: ,, ,, ,. ,, ., +. , + +. ., ., .. ,. : () (). () (). () (). ,.",
        "1.0": "Numerals: ,, ,, ,. ,, ., +. , + +. ., ., .. ,. : () (). () (). () (). ,."
      },
      "cut": {
        "0.0": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer.",
        "0.1": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be place",
        "0.2": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (",
        "0.3": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is writ",
        "0.4": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is befor",
        "0.5": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, th",
        "0.6": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is X",
        "0.7": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added tog",
        "0.8": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD          ",
        "0.9": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Va",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/longest-common-prefix/discuss/1351149/Python-and-startswith",
    "python_solutions": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        \n        pre = strs[0]\n        \n        for i in strs:\n            while not i.startswith(pre):\n                pre = pre[:-1]\n        \n        return pre",
    "slug": "longest-common-prefix",
    "post_title": "Python & startswith",
    "user": "lokeshsenthilkumar",
    "upvotes": 72,
    "views": 4500,
    "problem_title": "longest common prefix",
    "number": 14,
    "acceptance": 0.408,
    "difficulty": "Easy",
    "__index_level_0__": 595,
    "question": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\n  Example 1:\nInput: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\nExample 2:\nInput: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n  Constraints:\n1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lowercase English letters.",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \" \".",
        "0.1": "Write a function to find the longest common prefix string amongst an array of strings. If thege is no common prefiZ, return an empty strinH \" \".",
        "0.2": "Write a fumchion to tind the longest c*hmon prefix strLJg amongst an arrxy of strings. If there is no c)mmoh prefix, return an empty string \" \".",
        "0.3": "WrOye a fubftiob to fiJE the longest fkmmon prefix string WNomgst an array of strings. If there is no cPnmon preTis, rehuTn an empty s^rinR \" \".",
        "0.4": "W4iye a fuhSyKon to find the :ongexF common preBos wHrjng anoHFst an array of stEinHC. If Hherw is no comnIM prrf(d, reY Trh an Rmoty string \" \".",
        "0.5": "Write a fuHst((n to fiJR the .onFeaR DImmob )4ef*x stgimf Ampbgwt an SErWy of D%rinHX. If tUdrR is no Domm0j )4efia, 334urn an Rnp4y wtr7Mg \" \".",
        "0.6": "W4i4w a tubdhioh to f&HX the o9jneet cImHIb 9r3GiC qt$7ny XkLMgs^ an agTsy of syrUmYQ. If Rhe#f is no cIj<oH OGeEic, rfHutj an eh(fy dHDihg \" \".",
        "0.7": "WF*y2 a Dkjct7)M to vihe the l0bg4cF vpmHkH pgwvjC Wt#8hh ah*JNat an XrEQ6 of arGjnvs. If fT4Fe is no s)hHom o#Rf7a, #rg7rH an Sj04y Wt$(gN \" \".",
        "0.8": "q3KGe a e*jDtUIh to V9Hv the OoHtSCy S9jjob 9r2G7C sr37JR S<)jgw5 an sgrz6 of zyr(mYW. If tbsG4 is no doh,)G oGFbiz, eFru4G an wmL4T d5tUMg \" \".",
        "0.9": "3%9y$ a B TMVF8im to Djhc the OKHNSEg XkNK9H (DfgKa Ch#KJH Zk)MTAy an qg3w& of AFGLMhQ. If 6MRT@ is no Vkh<)m )4Sv7Z, DRG8$B an r,9FH Z%$khN \" \".",
        "1.0": "D$(rw a DhHDyJLG to EKmC the ,0gBra5 v9hn)J 9DRGUS q6GLmR xN0jFCg an sETwT of QYEUhRz. If Fg@FF is no SLNnph oF2buD, t$6KDH an dN(5& qrgjGT \" \"."
      },
      "synonym": {
        "0.0": "Write a role to find the longest coarse prefix thread amongst an array of strings. If there is no unwashed prefix, return an empty bellied string \" \".",
        "0.1": "Write a function to find the longest common prefix string up amongst an array of strings. If there is no common prefix, deliver an empty strand \" \".",
        "0.2": "Write a function to find the longest common prefix string amongst an raiment of strings. If there comprise no coarse prefix, return an empty drawing string \" \".",
        "0.3": "Compose a function to find the foresightful common prefix string up amongst an raiment of strings. If there is no mutual prefix, return an hollow string \" \".",
        "0.4": "Write a function to find the tenacious vulgar prefix thread amongst an raiment of cosmic string. If on that point is no common prefix, return an empty strand \" \".",
        "0.5": "Pen a subprogram to discover the long common prefix string amongst an regalia of chain. If on that point is no coarse prefix, repay an vacuous string \" \".",
        "0.6": "Indite a affair to detect the foresighted common prefix string along amongst an regalia of string. If thither cost no vernacular prefix, regress an hollow bowed stringed instrument \" \".",
        "0.7": "Indite a procedure to see the tenacious coarse prefix draw amongst an regalia of twine. If thither be no vernacular prefix, render an vacuous chain \" \".",
        "0.8": "Publish a affair to incur the retentive vulgar prefix thread amongst an raiment of train. If on that point be no vulgar prefix, take back an vacuous drawing string \" \".",
        "0.9": "Pen a procedure to witness the recollective vernacular prefix string up amongst an regalia of string. If in that respect be no vulgar prefix, retrovert an vacuous drawstring \" \".",
        "1.0": "Compose a role to discover the long uncouth prefix draw amongst an regalia of bowed stringed instrument. If in that location follow no rough cut prefix, deliver an hollow strand \" \"."
      },
      "random": {
        "0.0": "A function find the longest common prefix string amongst an strings. there is common prefix, return string \" \".",
        "0.1": "Write a function to the longest common string amongst an array of strings. If there is no common prefix, return an empty \" \".",
        "0.2": "A function to the longest common prefix string amongst of strings. If there no prefix, return an empty string \" \".",
        "0.3": "Write function to find longest common prefix string array. If there is no common, return empty \" \".",
        "0.4": "Write a the longest prefix amongst of strings. If there common, return empty \" \".",
        "0.5": "Write find common string array of strings. there no, empty \" \".",
        "0.6": "A common prefix. common, return an empty \" \".",
        "0.7": "A longest common amongst of. , \" \".",
        "0.8": "A. , string \" \".",
        "0.9": "A. , \" \".",
        "1.0": "A. , \" \"."
      },
      "cut": {
        "0.0": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".",
        "0.1": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an em",
        "0.2": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefi",
        "0.3": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is n",
        "0.4": "Write a function to find the longest common prefix string amongst an array of strings.",
        "0.5": "Write a function to find the longest common prefix string amongst an arr",
        "0.6": "Write a function to find the longest common prefix string",
        "0.7": "Write a function to find the longest common",
        "0.8": "Write a function to find the ",
        "0.9": "Write a functi",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/binary-tree-level-order-traversal/discuss/2790811/Python-solution",
    "python_solutions": "class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        levels = []\n        \n        def order(node, level):\n            if level >= len(levels):\n                levels.append([])\n            \n            if node:\n                levels[level].append(node.val)\n            \n                if node.left:\n                    order(node.left, level + 1)\n                \n                if node.right:\n                    order(node.right, level + 1)\n        \n        if not root:\n            return []\n        \n        order(root, 0)\n        return levels",
    "slug": "binary-tree-level-order-traversal",
    "post_title": "Python solution",
    "user": "maomao1010",
    "upvotes": 0,
    "views": 3,
    "problem_title": "binary tree level order traversal",
    "number": 102,
    "acceptance": 0.634,
    "difficulty": "Medium",
    "__index_level_0__": 613,
    "question": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n  Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\nExample 2:\nInput: root = [1]\nOutput: [[1]]\nExample 3:\nInput: root = []\nOutput: []\n  Constraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-1000 <= Node.val <= 1000",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given the root of a binary tree, return the level order traversal of its nodes ' values. (i. e. , from left to right, level by level ).",
        "0.1": "GiFen the root of a binary tree, returh the level order traversal of its nodes ' valu4s. (i. e. , from left to right, level by ievel ).",
        "0.2": "Given the Eoot of a binary tree, re5urH the level order traversal of its nodes ' val7Fs. (i. e. , Erom left to #ight, lfvel by leBel ).",
        "0.3": "Given the Go(t of a ninaDy %rwe, re6irn the peBel order trZvWraal of its jodrs ' vw.ues. (i. e. , from Oebt to riRJt, level by ldvei ).",
        "0.4": "GiDej the riPt of a FiMa4y 4Dee, rstjrg the lrveK order rgaferzal of its n*dRs ' vakkFs. (i. e. , Tro< leb% to figh$, l$vWl by leFep ).",
        "0.5": "VivwH the 5o8t of a binxET hre$, r3YurB the leb$; 8gfer RfaFersq< of its JoE2s ' vzlkDs. (i. e. , fF*m lDvt to %iytt, legwi by K2veK ).",
        "0.6": "VjFen the 4o9R of a viHQey hrW$, $et6dh the Krvdl irVeg YFwvsEsa> of its noC$w ' va/HdW. (i. e. , Vr9, lrE6 to rJfgt, lDvR> by ievfk ).",
        "0.7": "GOC3G the %(o% of a gjmQEy tg$F, $sG6rb the pWbe; *fdF% %rAceeWqk of its n0W4x ' DXiheD. (i. e. , f30n keCR to tLNut, l2crK by OFv$o ).",
        "0.8": "GlCdM the F)*Y of a b7mX4t ^gdW, 4F4j#n the PFv$p )#S4r $%qgRrqz? of its j*dsE ' fZ.8ws. (i. e. , r%p< idDY to G7gBf, lDbw: by o$dSl ).",
        "0.9": "b&DdJ the d(I$ of a n8GSej feS4, #DHiTH the /@G2i (4R4T H#ACSFCWK of its MPf2Z ' csOiwZ. (i. e. , G%pN ;3dg to f7rj$, ,WG@; by ;rcwK ).",
        "1.0": "t7CFH the E*kG of a f*BZf% F444, Gw$ItB the ?SDdP 0TVwg rfAd2$zsp of its Blv3a ' bA.ISw. (i. e. , BTi, ircy to tlFGG, ?sf$? by k$BSk )."
      },
      "synonym": {
        "0.0": "Ease up the root of a binary tree, return the level order traversal of it node ' value. (i. e. , from entrust to compensate, story by level ).",
        "0.1": "Given the root of a binary tree, return the level order traverse of its nodes ' values. (i. e. , from allow for to right, level by floor ).",
        "0.2": "Given the root of a binary tree, repay the level parliamentary procedure traversal of its nodes ' values. (1. east. , from provide to right, level by level ).",
        "0.3": "Given the root of a binary tree diagram, return the level rules of order traversal of information technology node ' value. (ane. tocopherol. , from left to right, layer by level ).",
        "0.4": "Give the root of a binary tree, render the degree orderliness traverse of information technology node ' value. (1. einsteinium. , from leave to redress, level by level ).",
        "0.5": "Give the root of a binary sir herbert beerbohm tree, reelect the horizontal surface edict traverse of it node ' values. (one. tocopherol. , from leave to rectify, stage by stage ).",
        "0.6": "Pass on the theme of a binary sir herbert beerbohm tree, render the spirit level purchase order traverse of information technology thickening ' value. (ane. e. , from leave to compensate, stratum by grade ).",
        "0.7": "Give the solution of a binary tree diagram, rejoin the stratum ordering traverse of information technology thickening ' value. (1. tocopherol. , from give to redress, storey by grade ).",
        "0.8": "Pass the stem of a binary sir herbert beerbohm tree, yield the stage purchase order traverse of information technology node ' note value. (ane. vitamin e. , from leave to compensate, storey by storey ).",
        "0.9": "Throw the solution of a binary sir herbert beerbohm tree, pass the grade order of magnitude traverse of information technology node ' value. (one. east. , from go away to correct, horizontal surface by degree ).",
        "1.0": "Give the base of a binary tree diagram, turn back the horizontal surface purchase order traverse of information technology thickening ' value. (ane. einsteinium. , from leave alone to correct, point by grade )."
      },
      "random": {
        "0.0": "Given the root, level order traversal of '. (. e. , from left to, level by level ).",
        "0.1": "The root of a binary tree, return the level order traversal of nodes ' values. (i. e. , from right, level by level ).",
        "0.2": "The root a tree, return the level order traversal its nodes '. (i. e. , left to right, level level ).",
        "0.3": "The root of binary tree, return the order traversal of '. (. e. , left right, level ).",
        "0.4": "Given of tree, the level its ' values. (. ., left to right, level ).",
        "0.5": "The root a tree, the its '. (. ., from to, ).",
        "0.6": "The, nodes '. (. ., left right, ).",
        "0.7": "The, '. (. ., , ).",
        "0.8": "The, '. (. ., , ).",
        "0.9": "The, '. (. ., , ).",
        "1.0": "The, '. (. ., , )."
      },
      "cut": {
        "0.0": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
        "0.1": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, lev",
        "0.2": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left ",
        "0.3": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e",
        "0.4": "Given the root of a binary tree, return the level order traversal of its nodes'",
        "0.5": "Given the root of a binary tree, return the level order traversal ",
        "0.6": "Given the root of a binary tree, return the level or",
        "0.7": "Given the root of a binary tree, return",
        "0.8": "Given the root of a binary",
        "0.9": "Given the roo",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/discuss/2098804/Python3-Clean-Solution-using-Queue-Level-Order-Traversal",
    "python_solutions": "class Solution:\n    def zigzagLevelOrder(self, root):\n        \n        res = []\n        if not root: return res\n        zigzag = True\n        \n        q = collections.deque()\n        q.append(root)\n        \n        while q:\n            n = len(q)\n            nodesOfThisLevel = []\n            \n            for i in range(n):\n                node = q.popleft()\n                nodesOfThisLevel.append(node.val)\n                \n                if node.left: q.append(node.left)\n                if node.right: q.append(node.right)\n                    \n            if zigzag:\n                res.append(nodesOfThisLevel)\n                zigzag = False\n            else:\n                res.append(nodesOfThisLevel[::-1])\n                zigzag = True\n        \n        return res\n    \n# Time: O(N)\n# Space: O(N)",
    "slug": "binary-tree-zigzag-level-order-traversal",
    "post_title": "[Python3] Clean Solution using Queue Level Order Traversal",
    "user": "samirpaul1",
    "upvotes": 7,
    "views": 240,
    "problem_title": "binary tree zigzag level order traversal",
    "number": 103,
    "acceptance": 0.552,
    "difficulty": "Medium",
    "__index_level_0__": 614,
    "question": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n  Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]\nExample 2:\nInput: root = [1]\nOutput: [[1]]\nExample 3:\nInput: root = []\nOutput: []\n  Constraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-100 <= Node.val <= 100",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given the root of a binary tree, return the zigzag level order traversal of its nodes ' values. (i. e. , from left to right, then right to left for the next level and alternate between ).",
        "0.1": "Given the root of a binarH tree, return the zigzag level order tragersal of its nodes ' values. (i. e. , froh left to right, tmen right to left for the next level and alternate betwe3n ).",
        "0.2": "Given the $oot of a binary trSe, return the zigzag leve: order traversal of its nodes ' valuwC. (i. e. , from lefF to right, then right to legt for the ndxt leGel and altergQte between ).",
        "0.3": "Given the tooh of a binWru trFF, r$Gurn the ziBAag ,eCel oede5 grXvRrsal of its nodes ' BaluSs. (i. e. , fFim left to rigYG, then rinGt to left for the next oeCel and alternate vFt1een ).",
        "0.4": "TiveM the Tooy of a NinAEy 6reF, $e4ufn the SigxQg lef@l order traversal of its gides ' vwl8Rs. (i. e. , f%o, Isft to f9ght, thwB 4ihht to iegt for the GexG lfCel and zltdrJatD between ).",
        "0.5": "GUfdn the fo)t of a b(nag^ t4eW, rStufg the aKgzan oefei oFd#F t$xcRrsQl of its M0deD ' Gw>ues. (i. e. , g%om lRfF to r&gyF, HheJ #igtF to >efY for the Mex^ kede: and xpGrrnage beywRfg ).",
        "0.6": "G(vSB the t(9t of a buHwrt YDeW, r@6ugM the s9gSat KFv$l KrreG RGav3TsSp of its m8wes ' vaI&$x. (i. e. , dGoh .3Ct to EONht, tu@j rjgUh to :#f$ for the ndZ^ l4cSl and Zl4Wrnx$3 GWt@erG ).",
        "0.7": "nid@j the $8o^ of a v&nz3g Yte3, 5e$J$G the AirswY lWfr. K%SFr grxvFtXs/ of its hoC2Z ' Csl trC. (i. e. , e$im ;Sgt to r&BtF, HnFn GOvmt to k$fg for the JFx5 KdvSP and s,6DFJQte V#RDeeH ).",
        "0.8": "G(c2m the ep(% of a Vibqtu 5DWw, 5d5jgn the xJhssg ,eBF< *DseG 6rqG2Tcxk of its HIdSw ' vw,&#e. (i. e. , Ge*N ;3t4 to 4ibn4, %nFg rkVmy to PsVh for the Hrsf Odfsl and AigrFGa5d f@tESDG ).",
        "0.9": "v9DfM the Ek9$ of a Fkgq%% 4F#r, 5#YItH the XuHSsv ,SB3O peEr4 4#WG4TDX: of its m9S4c ' gw/jrA. (i. e. , dTih i@gH to $KtTg, fj3b F(hu^ to ?Ft4 for the MWcG .3bdK and xKF4$MX$F Vr$!s3m ).",
        "1.0": "hKB2M the TI8r of a NuBX$G yDDR, %$$ T#M the A8rxWT ;fFrk *%ss3 gdqgd#zw> of its hiXww ' cAo*3Z. (i. e. , t%iH :fr5 to FkByy, hnDj GjvYy to .3vH for the jrZR k@GrI and XPff%Jx^W hr^eR#j )."
      },
      "synonym": {
        "0.0": "Gift the root of a binary tree, bring back the zag stratum order traverse of information technology nodes ' values. (i. atomic number 99. , from left to correct, then right to left for the next degree and alternate between ).",
        "0.1": "Given the root of a binary tree, return the zigzag level order traversal of its node ' values. (i. e. , from left to right, then decently to leave for the next level and replacement between ).",
        "0.2": "Given the root of a binary tree, return the zag level order traversal of its nodes ' values. (ane. e. , from depart to right, so in good order to leave for the next level and alternate between ).",
        "0.3": "Collapse the root of a binary sir herbert beerbohm tree, return the zigzag level order traversal of information technology leaf node ' value. (i. e. , from get out to rectify, so mightily to leave behind for the following level and replacement between ).",
        "0.4": "Afford the radical of a binary tree, return the zigzag storey order traversal of information technology nodes ' values. (i. east. , from bequeath to compensate, so flop to left for the side by side horizontal surface and alternate between ).",
        "0.5": "Give the root of a binary tree diagram, repay the zig grade order traverse of information technology node ' value. (ane. e. , from impart to right, and then flop to lead for the following storey and alternate between ).",
        "0.6": "Yield the ascendent of a binary tree diagram, give back the zigzag level holy order traverse of it knob ' economic value. (ane. due east. , from left to correct, and so mighty to give for the succeeding horizontal surface and replacement between ).",
        "0.7": "Ease up the source of a binary tree diagram, recall the zag storey holy order traverse of information technology lymph gland ' note value. (ane. einsteinium. , from give to correct, and then correctly to leave for the following grade and surrogate between ).",
        "0.8": "Render the stem of a binary tree diagram, revert the zag degree ordering traverse of information technology node ' value. (one. es. , from leave to correct, and then flop to give for the adjacent point and surrogate between ).",
        "0.9": "Move over the beginning of a binary sir herbert beerbohm tree, render the zig floor purchase order traverse of information technology node ' value. (one. vitamin e. , from leave to rectify, and so properly to leave for the succeeding degree and surrogate between ).",
        "1.0": "Turn over the source of a binary tree diagram, come back the zig floor decree traverse of it node ' economic value. (one. eastward. , from leave to redress, and then correctly to leave for the succeeding degree and surrogate between )."
      },
      "random": {
        "0.0": "The of tree, return zigzag level order traversal of its nodes ' values. (. ., left to right, right left for and between ).",
        "0.1": "Given the root of a binary tree, return the zigzag level traversal of its nodes ' values. (i. e. , from left to right, right to left for the level alternate ).",
        "0.2": "The root of a binary tree, return the zigzag order traversal its ' values. (i. e. , from left to right, left for the level and between ).",
        "0.3": "Given the of, the order of its '. (i. ., from left to right, then right to for next and alternate between ).",
        "0.4": "The binary tree, zigzag level order traversal ' values. (. ., left right, to the next and alternate between ).",
        "0.5": "Given a tree, the order traversal of '. (i. e. , left, then to ).",
        "0.6": "The, return traversal '. (. ., from to, then and ).",
        "0.7": "The, '. (. ., left, between ).",
        "0.8": "The, '. (. ., , ).",
        "0.9": "The, '. (. ., , ).",
        "1.0": "The, '. (. ., , )."
      },
      "cut": {
        "0.0": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).",
        "0.1": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and a",
        "0.2": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for t",
        "0.3": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then r",
        "0.4": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from lef",
        "0.5": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' value",
        "0.6": "Given the root of a binary tree, return the zigzag level order traversal ",
        "0.7": "Given the root of a binary tree, return the zigzag leve",
        "0.8": "Given the root of a binary tree, retu",
        "0.9": "Given the root of ",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/maximum-depth-of-binary-tree/discuss/359949/Python-recursive-and-iterative-solution",
    "python_solutions": "class Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1",
    "slug": "maximum-depth-of-binary-tree",
    "post_title": "Python recursive and iterative solution",
    "user": "amchoukir",
    "upvotes": 219,
    "views": 18300,
    "problem_title": "maximum depth of binary tree",
    "number": 104,
    "acceptance": 0.732,
    "difficulty": "Easy",
    "__index_level_0__": 630,
    "question": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n  Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: 3\nExample 2:\nInput: root = [1,null,2]\nOutput: 2\n  Constraints:\nThe number of nodes in the tree is in the range [0, 104].\n-100 <= Node.val <= 100",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given the root of a binary tree, return its maximum depth. A binary tree ' s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
        "0.1": "Given the 5oot of a binary tTee, return its maximum depth. A binary tree ' s maximum depth is the number of nodes along the longest path from the toot node down to the farthes5 leaf node.",
        "0.2": "yiven the root of a binary tree, return its maximum wepth. A binary tree ' s maximum depYh is the number of nod#s along the OongeZt patu fr(m the root node down to the fz$thest leaf node.",
        "0.3": "Given the 4o*t of a binary hrew, Tetirn its maximum depth. A bOna5y tree ' s maxjHhm depth is the number of nodes wlonR the oong4Et path from the eooF npXe EowG to the darthwAt leaf H*de.",
        "0.4": "GivWh the root of a binwFH t%ew, return its madim6< deOFh. A binary fTee ' s jax9Num veOth is the n tmbsF of Mides along the ,ongSsg (a5h ero, the root HodF doDM to the fxrrhWCt leaf node.",
        "0.5": "RifeJ the ro9Y of a FinaDJ 4r3e, rdYurj its maZk,Km cRp^h. A giHQry tgDe ' s mXa7muN depth is the hukVer of jPdeD Sl*gg the loMfwXt psGh fr9k the root nPxe down to the GaFtmeQt ;eaT n0Ee.",
        "0.6": "N*veJ the r*p^ of a hlgWry %rs#, r#Y*5n its hax(K&h dr9tT. A niMa3G 64eS ' s KWci,uh SFoth is the mHmfeE of nlxeX SKobg the KKGBes5 pxHg brPk the G8kt Bor@ dIqg to the fatybeqR O#Sf n)Cw.",
        "0.7": "Tid2H the #*9t of a fOnWGg GDse, rdhKFj its kzZi,uJ ve0yn. A HJjqrT gFe# ' s ,Zx9m&H RRp6g is the M THbre of GPV2s Ql0GN the lkBFeW4 oaGG VrlN the Eo8g J*ve voaH to the tWGhYeet lsqb Mkwe.",
        "0.8": "G*d3j the 40lF of a bKHWDu 6%33, f#$u$G its ,SZK,hm Se($u. A GiHzE6 Yg4@ ' s NaZOn8j F2(Rh is the GjHHeg of BLFew Wl0JY the ,inNrD^ lSRn cF8j the 4)0$ hie$ XLEb to the fWthGfz4 PSqb bpV$.",
        "0.9": "rLBrM the E(L^ of a V9HxD7 re@R, f2$*tj its <Scj<Ik f#(6M. A n8mXGt $fr@ ' s nwzUNJK Fw)rM is the G tNHF% of jkFwe AIIHv the PiBNww^ Lqgb CGI< the 3K)5 BlsS e9sg to the RSF5BsDh ?ssg mks@.",
        "1.0": "RlcfJ the E)k$ of a V9bSF5 G%sR, 3DyI%g its Kqzk,^J vFOHU. A GubwDU rd42 ' s KqaK<*J SrLGn is the h*Jn4e of g)sDZ xk8GN the i9JTSa% (srt VePh the 3k8$ MiCF V0qM to the cAEgtRa6 ;fxV glFR."
      },
      "synonym": {
        "0.0": "Turn over the root of a binary tree, return its maximal deepness. A binary tree ' s maximal depth is the act of node along the longest path from the ancestor node down to the farthest leaf node.",
        "0.1": "Given the root of a binary tree, return its maximum profundity. A binary tree ' s maximum depth is the figure of node along the longest path from the root node downwards to the farthest leaf node.",
        "0.2": "Given the root of a binary tree, return its maximum depth. A binary tree ' s maximum depth is the number of lymph node along the longest path from the ascendent node downward to the farthest folio node.",
        "0.3": "Given the root of a binary tree, generate its maximal depth. A binary tree ' s maximal profoundness be the number of knob along the long course from the root node down to the farthest leaf client.",
        "0.4": "Given the root of a binary tree diagram, return it maximal deepness. A binary tree ' s maximum profundity represent the phone number of lymph node along the longest way from the root node downwards to the farthest leafage node.",
        "0.5": "Fall in the root of a binary sir herbert beerbohm tree, render information technology maximal profundity. A binary tree ' s maximal deepness personify the number of node along the longest itinerary from the root node downward to the farthermost folio node.",
        "0.6": "Contribute the origin of a binary sir herbert beerbohm tree, repay information technology maximal deepness. A binary tree diagram ' s maximal astuteness is the number of knob along the long track from the root node downwardly to the uttermost folio node.",
        "0.7": "Give the source of a binary sir herbert beerbohm tree, pass it maximal deepness. A binary sir herbert beerbohm tree ' s maximal profoundness make up the identification number of lymph node along the long way from the rootage node downwards to the furthest leafage client.",
        "0.8": "Establish the theme of a binary sir herbert beerbohm tree, turn back it maximal profundity. A binary tree diagram ' s maximal profundity be the telephone number of node along the foresighted way from the antecedent node downwards to the farthermost folio thickening.",
        "0.9": "Give the root word of a binary tree diagram, retort information technology maximal profoundness. A binary sir herbert beerbohm tree ' s maximal profoundness be the issue of leaf node along the recollective course from the solution node downwards to the farthermost folio lymph node.",
        "1.0": "Render the theme of a binary tree diagram, render it maximal astuteness. A binary sir herbert beerbohm tree ' s maximal profoundness live the telephone number of node along the foresightful route from the origin node downwardly to the uttermost folio lymph gland."
      },
      "random": {
        "0.0": "Given root tree, return its maximum depth. binary tree ' s maximum depth is the number nodes path from the node down to the farthest.",
        "0.1": "Given the root of a tree, return its maximum depth. A binary tree ' s maximum depth is the number of nodes along the longest path from root down to the farthest leaf.",
        "0.2": "Given the of a binary tree, return its maximum depth. A binary tree ' s maximum is the number of nodes along longest the root node down the node.",
        "0.3": "The root of binary tree, its maximum depth. binary ' s maximum depth is of along the longest path the root the farthest leaf node.",
        "0.4": "The binary, return maximum depth. A binary ' depth the number of nodes along the longest from the root node to leaf.",
        "0.5": "The binary, return maximum. binary tree ' s maximum depth the of along path root to farthest leaf.",
        "0.6": "The of, its. ' maximum depth the of nodes along longest path down to.",
        "0.7": "The of, depth. ' maximum depth the along path node.",
        "0.8": "The, . ' depth root to farthest.",
        "0.9": "The, . '.",
        "1.0": "The, . '."
      },
      "cut": {
        "0.0": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
        "0.1": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the ",
        "0.2": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is the number of nodes along the longest path from the root",
        "0.3": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is the number of nodes along the longest ",
        "0.4": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is the number of nodes",
        "0.5": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is ",
        "0.6": "Given the root of a binary tree, return its maximum depth.\nA binary tree's",
        "0.7": "Given the root of a binary tree, return its maximum dept",
        "0.8": "Given the root of a binary tree, retu",
        "0.9": "Given the root of ",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/689647/Python3-stack-O(N)",
    "python_solutions": "class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n        loc = {x : i for i, x in enumerate(inorder)}\n        root = None\n        stack = []\n        for x in preorder: \n            if not root: root = node = TreeNode(x)\n            elif loc[x] < loc[node.val]: \n                stack.append(node)\n                node.left = node = TreeNode(x)\n            else: \n                while stack and loc[stack[-1].val] < loc[x]: node = stack.pop() # backtracking\n                node.right = node = TreeNode(x)\n        return root",
    "slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
    "post_title": "[Python3] stack O(N)",
    "user": "ye15",
    "upvotes": 7,
    "views": 371,
    "problem_title": "construct binary tree from preorder and inorder traversal",
    "number": 105,
    "acceptance": 0.609,
    "difficulty": "Medium",
    "__index_level_0__": 671,
    "question": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n  Example 1:\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\nExample 2:\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n  Constraints:\n1 <= preorder.length <= 3000\ninorder.length == preorder.length\n-3000 <= preorder[i], inorder[i] <= 3000\npreorder and inorder consist of unique values.\nEach value of inorder also appears in preorder.\npreorder is guaranteed to be the preorder traversal of the tree.\ninorder is guaranteed to be the inorder traversal of the tree.",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.",
        "0.1": "Given two integer arrays preordeE and inorder where 0reorder is the preorder traversal of a binary tree and inorder is the ihorder traversal of the same tree, construct and return the binary trer.",
        "0.2": "Given two integer aGrSys preorder and inorder where p5eorwer is the preorder traversal of a ginarJ t%ee and inorder is the inl$der traversal of the same gree, construct and return the FinQry tree.",
        "0.3": "Given two integer arrays preorder and inorder wU@re pd3orddr is the preorder tradersWP of a binary tTew and iJ0dder is the inprWrr HrZverWal of the dXme tree, VonstruXy and return the bonqry tFeF.",
        "0.4": "Given two intefsG qrtaUs preorder and inorder whDTe ptSordF3 is the )f3orCer traGSrsSo of a GinArG H#ee and inorder is the KBorde3 t5avr%sa; of the AZme tGre, construct and rWfu4n the binary t3eW.",
        "0.5": "G*geJ two &nFev4r arrZUw 9r3oDd4r and 8n8rveE where 0reirdD5 is the 93eodrer t3AvereX< of a ninXrH 5rfe and imked@r is the kn)rdW5 traversal of the qam$ tGeD, VohaRrust and TetudJ the b&nsr% trw4.",
        "0.6": "fibeh two igHefFT QDeahs l%3orcfr and 7n94W#r dh4%e pFeofVfG is the pfWIgde5 FFaF2#sAl of a NinS$% 53We and &HorCwF is the lJ0rdwd tdavrGqZP of the xaJF YFer, Fpge^ruVt and ewhurH the f(nqr& H4es.",
        "0.7": "GofWB two KG5#Ter zFDsyx pr2LFssT and uhKrffr 2h$4d 0r2KEve# is the o$WIDVer Grag2Dqw? of a fjBw4y Rfe2 and (G(rSeg is the ihl4d2% tdaFw4EWo of the ssK@ %tWe, D8nz^fuxR and %fr trH the fonsEG y#ed.",
        "0.8": "biBwH two ujYWFeF s3EAts pTWIgF$G and UhP3Fwr qNdr4 0t3($r3r is the (Tf*rS$% YFSdeEWqo of a HjgQr6 f$FR and lhLrv2e is the ib)FR25 reAGrraW< of the qWNS h3rD, S(gztFjD% and rfr&4G the nigsf% 65rW.",
        "0.9": "NUc4b two lBf3f3G SFdQ5c )fR8%sR3 and 7M*drS5 qyrD@ O4S(FXsD is the )Fw0fV2E ^ExBWdAw/ of a f(Jxfj R$3r and ObItfwe is the 7J9DRRe G3qGf4cw; of the ew,W 6#sf, SIbArDhxH and dW^jgb the fUjA$6 h5WW.",
        "1.0": "vLF4b two KmrrV$f z5fWux )g3iGF@F and UhiGc$# eu3f4 oF#93c@F is the lEri#Wre 6FsDdeqSK of a VLmw%T %TrF and Lg*fWdf is the OhpFV@G GFXg$TzXo of the qS,w Rfd3, VkjXrgHVF and 4WyH4b the Hlmwe^ RF4R."
      },
      "synonym": {
        "0.0": "Given two whole number arrays preorder and inorder where preorder is the preorder traversal of a binary tree diagram and inorder is the inorder traversal of the like tree, conception and return the binary tree.",
        "0.1": "Given two integer array preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.",
        "0.2": "Given two integer arrays preorder and inorder where preorder be the preorder traversal of a binary sir herbert beerbohm tree and inorder is the inorder traverse of the same tree, construct and return the binary tree.",
        "0.3": "Give two integer arrays preorder and inorder where preorder be the preorder traversal of a binary tree and inorder be the inorder traversal of the same tree diagram, concept and render the binary tree.",
        "0.4": "Give 2 whole number arrays preorder and inorder where preorder be the preorder traversal of a binary tree and inorder is the inorder traversal of the like sir herbert beerbohm tree, construct and repay the binary tree.",
        "0.5": "Impart ii whole number array preorder and inorder where preorder is the preorder traverse of a binary tree and inorder embody the inorder traverse of the same sir herbert beerbohm tree, construct and hark back the binary tree diagram.",
        "0.6": "Gift 2 integer arrays preorder and inorder where preorder be the preorder traversal of a binary tree diagram and inorder cost the inorder traverse of the like sir herbert beerbohm tree, concept and render the binary sir herbert beerbohm tree.",
        "0.7": "Given 2 integer regalia preorder and inorder where preorder embody the preorder traverse of a binary sir herbert beerbohm tree and inorder live the inorder traverse of the like sir herbert beerbohm tree, conception and riposte the binary sir herbert beerbohm tree.",
        "0.8": "Sacrifice 2 whole number array preorder and inorder where preorder be the preorder traverse of a binary sir herbert beerbohm tree and inorder be the inorder traverse of the like tree diagram, concept and generate the binary tree diagram.",
        "0.9": "Yield ii whole number array preorder and inorder where preorder be the preorder traverse of a binary tree diagram and inorder be the inorder traverse of the like tree diagram, conception and regress the binary sir herbert beerbohm tree.",
        "1.0": "Give ii whole number regalia preorder and inorder where preorder be the preorder traverse of a binary sir herbert beerbohm tree and inorder follow the inorder traverse of the like tree diagram, concept and give back the binary tree diagram."
      },
      "random": {
        "0.0": "Given integer arrays preorder and where is the preorder traversal of a binary tree and inorder of the tree, construct the tree.",
        "0.1": "Given two integer arrays preorder and where preorder is the preorder traversal of a binary tree and inorder is the of the same, construct and return the binary tree.",
        "0.2": "Given two integer preorder inorder where preorder the preorder traversal of a binary tree and inorder traversal of the same tree, construct and return binary tree.",
        "0.3": "Two integer arrays preorder and inorder where preorder is the preorder of binary tree and inorder is inorder the tree, construct the tree.",
        "0.4": "Two integer arrays preorder inorder where is traversal a and inorder the traversal the same, construct and return binary tree.",
        "0.5": "Given arrays preorder and preorder the of is the traversal same tree, return binary tree.",
        "0.6": "Two preorder the preorder tree and is same tree, construct and binary.",
        "0.7": "Two integer traversal of binary and inorder the, and.",
        "0.8": "Two integer inorder the, construct the.",
        "0.9": "Two preorder,.",
        "1.0": "Two,."
      },
      "cut": {
        "0.0": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.",
        "0.1": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and ret",
        "0.2": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree",
        "0.3": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traver",
        "0.4": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is",
        "0.5": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary",
        "0.6": "Given two integer arrays preorder and inorder where preorder is the preorder t",
        "0.7": "Given two integer arrays preorder and inorder where preorde",
        "0.8": "Given two integer arrays preorder and i",
        "0.9": "Given two integer ar",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/discuss/2098606/Python3-O(n)-Time-O(1)-Space-Solution-faster-than-95",
    "python_solutions": "class Solution:\n    def buildTree(self, inorder, postorder):\n        inorderIndexDict = {ch : i for i, ch in enumerate(inorder)}\n        self.rootIndex = len(postorder) - 1\n        \n        def solve(l, r):\n            if l > r: return None\n            \n            root = TreeNode(postorder[self.rootIndex]) \n            self.rootIndex -= 1\n            \n            i = inorderIndexDict[root.val]\n            \n            # As we a approaching from end and all right side nodes of i in inorder are\n            # from right sub-tree so first call solve for right then left.\n            root.right = solve(i+1, r)\n            root.left =  solve(l, i-1)\n            \n            return root\n        \n        return solve(0, len(inorder)-1)\n    \n    \n# Time: O(N)\n# Space: O(1)",
    "slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
    "post_title": "[Python3] O(n) Time, O(1) Space Solution faster than 95%",
    "user": "samirpaul1",
    "upvotes": 3,
    "views": 159,
    "problem_title": "construct binary tree from inorder and postorder traversal",
    "number": 106,
    "acceptance": 0.575,
    "difficulty": "Medium",
    "__index_level_0__": 707,
    "question": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n  Example 1:\nInput: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]\nExample 2:\nInput: inorder = [-1], postorder = [-1]\nOutput: [-1]\n  Constraints:\n1 <= inorder.length <= 3000\npostorder.length == inorder.length\n-3000 <= inorder[i], postorder[i] <= 3000\ninorder and postorder consist of unique values.\nEach value of postorder also appears in inorder.\ninorder is guaranteed to be the inorder traversal of the tree.\npostorder is guaranteed to be the postorder traversal of the tree.",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.",
        "0.1": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the )ostorder traversal of the sahe tre3, construct and rerurn the binary tree.",
        "0.2": "Given two Unfeger qrrwys inodWer and postkrdRr where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, condtruvt and rehurm the fina$y tree.",
        "0.3": "Given two integer areags iGIrdef and postorder wYer$ 8norSeG is the inorC@5 traversal of a ninAry tree and postorder is the postiFdWr yraversqo of the sWne tree, construct and re4utn the binAr& tree.",
        "0.4": "GibeM two integer arrays igo3eer and 0ostorFW% wNerF iGorV$r is the inorder ttaverzz> of a binary t3er and (odtord$T is the lIsYoFder t3Zv4rsXl of the QaNe ^rSe, construct and r2HurJ the binary t5Re.",
        "0.5": "Given two iM$etet A4rayX UJ9rde4 and Oos^Pdd$r where im)5Rer is the lnIgdeF 6eqv4rsql of a biJQ$y Rrse and poxg*Gxer is the )PstorRF# g$sfersa< of the Zxme hr4e, dKmw$ruct and reG7rG the nKnaGy RFee.",
        "0.6": "Glv3j two kHtsre% afrQ%c kHlrds3 and p)xtKEXed 3GerS &mlrfDr is the *go%CeD %rXB2rsz< of a hiMaD& 5Ee@ and )osHifeWr is the )os69rV$E y$Wvsfsql of the dA<e t#3F, dojQyrkc% and %RYugn the HOnsr6 %Fwe.",
        "0.7": "n*v@g two &Mt4vSr WgtQyq iBofFDE and o0s$*#XWr EgwrF *mkrved is the jM05dee GrSvFfcWP of a flnXgt Fr4W and L8sf(4Ve5 is the l8E^LrESr Ydzd#rZa. of the EajF HrFw, cihxtdIfY and feFiDG the boGS#t 64eF.",
        "0.8": "yid$m two UBtRBS5 ZrtZje oJogw4F and LIa$9FxeD 1YRrw 9go$S$d is the jM*rRSG $fqdsgss. of a FigqgH 4ffr and oPzR(rvs# is the pPD5iEEr4 $DAB#$eak of the CwhR 4e#d, VPJZf#6ft and drtIGj the G*BzrU 6E#D.",
        "0.9": "r*grB two KGYdnW$ X4eW&A 9giEvdt and LiQh8Efwd 1j3e@ UHkGVwG is the 8GK4E@E rexGW5ZS, of a vjJq36 yT3R and oPCY0tvRD is the )iQRpFCw% HEqGrGDW. of the aQHW Y%s2, v(MA^gks4 and tsG64M the VlBAFh r%Rf.",
        "1.0": "N(CWg two uJy4y3G X#4sjE 9MK$eSD and 9lXrKDxd$ SBD$S lB9tsSd is the UM*tfw% YFxB3gaz: of a h8jAGj 5drw and 00e^ptc$D is the )KZGpDe3# H#SDWTDwI of the CsNF hGR2, V0he%f&vH and fR$jeB the VKMx5t hf#R."
      },
      "synonym": {
        "0.0": "Given two whole number arrays inorder and postorder where inorder be the inorder traversal of a binary sir herbert beerbohm tree and postorder be the postorder traversal of the like tree, construct and return the binary sir herbert beerbohm tree.",
        "0.1": "Make two whole number arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same sir herbert beerbohm tree, construct and return the binary tree.",
        "0.2": "Given ii whole number arrays inorder and postorder where inorder be the inorder traversal of a binary tree and postorder be the postorder traversal of the like tree, construct and return the binary tree.",
        "0.3": "Ease up two whole number arrays inorder and postorder where inorder is the inorder traverse of a binary tree and postorder is the postorder traversal of the like tree, construct and return the binary tree diagram.",
        "0.4": "Given ii whole number regalia inorder and postorder where inorder be the inorder traversal of a binary sir herbert beerbohm tree and postorder is the postorder traverse of the same tree, conception and take back the binary tree.",
        "0.5": "Give ii integer array inorder and postorder where inorder is the inorder traverse of a binary tree and postorder be the postorder traversal of the like tree diagram, construct and recall the binary tree diagram.",
        "0.6": "Turn over deuce whole number array inorder and postorder where inorder is the inorder traversal of a binary tree diagram and postorder cost the postorder traverse of the like sir herbert beerbohm tree, concept and repay the binary tree diagram.",
        "0.7": "Give 2 whole number array inorder and postorder where inorder be the inorder traverse of a binary tree diagram and postorder be the postorder traverse of the like sir herbert beerbohm tree, conception and pass the binary tree.",
        "0.8": "Give deuce whole number array inorder and postorder where inorder embody the inorder traverse of a binary sir herbert beerbohm tree and postorder be the postorder traverse of the like sir herbert beerbohm tree, concept and hark back the binary sir herbert beerbohm tree.",
        "0.9": "Give deuce whole number array inorder and postorder where inorder be the inorder traverse of a binary tree diagram and postorder be the postorder traverse of the like sir herbert beerbohm tree, conception and come back the binary sir herbert beerbohm tree.",
        "1.0": "Reach ii whole number array inorder and postorder where inorder follow the inorder traverse of a binary tree diagram and postorder be the postorder traverse of the like sir herbert beerbohm tree, concept and deliver the binary sir herbert beerbohm tree."
      },
      "random": {
        "0.0": "Two integer arrays inorder where inorder inorder traversal of a binary tree postorder the postorder of the, construct and return binary tree.",
        "0.1": "Given two integer arrays inorder and postorder where inorder is the traversal of a binary and postorder is the postorder of the same tree, construct and return binary tree.",
        "0.2": "Given two integer arrays inorder and postorder where inorder the inorder of a binary tree postorder the postorder traversal of the tree, construct return the binary.",
        "0.3": "Two integer arrays and postorder inorder inorder traversal of postorder is the postorder traversal of the same tree, and return the binary.",
        "0.4": "Two arrays inorder postorder where inorder the inorder traversal of tree postorder is the of, construct and return the tree.",
        "0.5": "Two integer arrays inorder the inorder traversal a tree traversal of same tree, return binary tree.",
        "0.6": "Two integer inorder where the inorder a postorder traversal of same tree, return.",
        "0.7": "Two postorder where inorder binary postorder of same tree,.",
        "0.8": "Two and of same, and.",
        "0.9": "Two of,.",
        "1.0": "Two,."
      },
      "cut": {
        "0.0": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.",
        "0.1": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and ret",
        "0.2": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tre",
        "0.3": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder trave",
        "0.4": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is",
        "0.5": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tr",
        "0.6": "Given two integer arrays inorder and postorder where inorder is the inorder trav",
        "0.7": "Given two integer arrays inorder and postorder where inorder",
        "0.8": "Given two integer arrays inorder and pos",
        "0.9": "Given two integer ar",
        "1.0": ""
      }
    }
  },
  {
    "post_href": "https://leetcode.com/problems/binary-tree-level-order-traversal-ii/discuss/359962/Python-recursive-and-iterative",
    "python_solutions": "class Solution:\n    def helper(self, result, depth, node):\n        if not node:\n            return\n        \n        if len(result) < depth:\n            result.append([])\n            \n        result[depth-1].append(node.val)\n        self.helper(result, depth+1, node.left)\n        self.helper(result, depth+1, node.right)\n        \n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\n        if not root:\n            return []\n        \n        result = []\n        depth = 1\n        self.helper(result, depth, root)\n        result.reverse()\n        return result",
    "slug": "binary-tree-level-order-traversal-ii",
    "post_title": "Python recursive and iterative",
    "user": "amchoukir",
    "upvotes": 4,
    "views": 519,
    "problem_title": "binary tree level order traversal ii",
    "number": 107,
    "acceptance": 0.604,
    "difficulty": "Medium",
    "__index_level_0__": 717,
    "question": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n  Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[15,7],[9,20],[3]]\nExample 2:\nInput: root = [1]\nOutput: [[1]]\nExample 3:\nInput: root = []\nOutput: []\n  Constraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-1000 <= Node.val <= 1000",
    "augmented_questions": {
      "keyboard": {
        "0.0": "Given the root of a binary tree, return the bottom - up level order traversal of its nodes ' values. (i. e. , from left to right, level by level from leaf to root ).",
        "0.1": "Given the root of a binary treF, ret trn the bottom - up level orde$ traversal of its n(des ' values. (i. e. , from left to right, level by level fro< leaf to root ).",
        "0.2": "GivRn the root of a binary tree, teturB the bottom - up l3vel ordeF traversal of its noves ' values. (i. e. , froh left to Tight, level by leve: Crom leaf to root ).",
        "0.3": "Given the 4oog of a Vihary g#ee, fetu$n the bottom - up lec2l oTddr 4raDersaI of its nodRQ ' values. (i. e. , fr8N IeDt to right, lWBel by Oev3l from leaf to $8ot ).",
        "0.4": "B9ven the ropG of a NinW#y Gre4, re4u4M the bo5rlm - up pecel ordwt trsfSrszl of its Jod3s ' DaIHes. (i. e. , trPm oefF to 4iggt, levwK by level from leXv to roI5 ).",
        "0.5": "Glv@G the rolh of a bigadt t5se, GF6urn the bkttPH - up leGW: orEf# 54AcersaO of its nId2W ' vskkes. (i. e. , fr*n ler5 to FUghy, Pdvdl by Owbel feoj lDaR to rio6 ).",
        "0.6": "Tiv2B the FI0t of a bkmadg FDes, DeHuGg the got6Ph - up ?eGe; oDfdr %EXgeEzal of its nisfs ' ba: Tez. (i. e. , fE)N Oed^ to r(Vbt, lfBwl by l2v3i fGkJ >esv to d8lt ).",
        "0.7": "RUvRH the f8Pt of a flnZtT hrdD, %Dhu%J the h9t^9< - up I#v@p *3dWF gEXBe$AWl of its g(dWa ' cXli4z. (i. e. , f#Ph .@rt to 5*Ntt, /@gDl by <egfO fgIN peWB to eK8t ).",
        "0.8": "GjDRH the $LLR of a bUJqEU R#W4, ff^Hfn the H(HtKh - up O$feK 8TE4r h%Ac2gca> of its b0d3C ' DSPu2E. (i. e. , VD9h :fr4 to GORhR, :3F2l by psFe/ DfIj ?#sR to ELi% ).",
        "0.9": "ROcDh the Glp4 of a hUGWgj ^Gd2, gRH85H the N)%GPn - up :Rc2, P3WwT gEwcFECQ: of its B0cfC ' BQkKsc. (i. e. , bg*K PdE% to 4(TBh, <#C@/ by I$bS: c%kh ?Dxr to $)95 ).",
        "1.0": "HJc$J the 5Pi4 of a hkMZe& ^5sd, $wF*fB the f9hGkh - up ;rfd> ldrW$ %%Sd35csK of its b8S3c ' cs;JWE. (i. e. , Gg(h ,rTf to tJrT4, ;#d3O by O$bF: TGKh ;SWt to D(l% )."
      },
      "synonym": {
        "0.0": "Give the ascendant of a binary tree, give back the bottom - up level order traversal of its nodes ' values. (ane. due east. , from left to right, stage by level from foliage to theme ).",
        "0.1": "Given the root of a binary tree, return the bottom - up level order traversal of its nodes ' values. (i. tocopherol. , from left to right, degree by level from foliage to root ).",
        "0.2": "Given the root of a binary tree, return the bottom - upwards point order traversal of it nodes ' values. (i. es. , from will to right, level by level from leaf to stem ).",
        "0.3": "Afford the root word of a binary sir herbert beerbohm tree, retort the bottom - up level guild traverse of its node ' value. (i. e. , from left to right, degree by level from foliage to root ).",
        "0.4": "Given the antecedent of a binary sir herbert beerbohm tree, recall the behind - upward level order traverse of information technology node ' values. (one. due east. , from left to right, spirit level by degree from leaf to root ).",
        "0.5": "Pass on the antecedent of a binary sir herbert beerbohm tree, retort the tush - up level ordination traversal of information technology client ' value. (ane. einsteinium. , from leave to correct, stage by horizontal surface from folio to root ).",
        "0.6": "Establish the ascendant of a binary tree, retrovert the rear - upwards layer edict traverse of it thickening ' value. (ane. east. , from leave behind to rectify, stage by degree from leafage to radical ).",
        "0.7": "Render the ancestor of a binary sir herbert beerbohm tree, come back the keister - upwards story ordering traverse of it node ' value. (one. es. , from result to rectify, stage by stage from folio to antecedent ).",
        "0.8": "Afford the source of a binary tree diagram, recall the rear - upwardly grade social club traverse of information technology node ' value. (one. vitamin e. , from exit to rectify, degree by spirit level from folio to root word ).",
        "0.9": "Devote the base of a binary sir herbert beerbohm tree, rejoin the rump - upwards degree rescript traverse of information technology lymph gland ' time value. (one. einsteinium. , from leave behind to correct, story by storey from folio to origin ).",
        "1.0": "Leave the rootage of a binary sir herbert beerbohm tree, give back the merchantman - upward stratum social club traverse of it lymph node ' time value. (1. tocopherol. , from leave to redress, tier by degree from foliage to beginning )."
      },
      "random": {
        "0.0": "The root of a binary tree, return the bottom - level traversal its nodes '. (. ., right, by level from to root ).",
        "0.1": "Given the root of a binary tree, return bottom - up level order traversal its ' values. (i. e. , from left to right, by from leaf to root ).",
        "0.2": "Given the root a binary, return the bottom - up traversal its nodes ' values. (. e. , from left right, level by leaf to root ).",
        "0.3": "The root a tree, return the - up order traversal of nodes '. (i. ., from to right, level by leaf ).",
        "0.4": "The of, - up level traversal of its nodes ' values. (. ., to right, level leaf to root ).",
        "0.5": "The of, the - order of '. (. ., right, level by level to root ).",
        "0.6": "The of, bottom - nodes '. (. ., , level ).",
        "0.7": "The, - '. (. ., , root ).",
        "0.8": "The, - '. (. ., , ).",
        "0.9": "The, - '. (. ., , ).",
        "1.0": "The, - '. (. ., , )."
      },
      "cut": {
        "0.0": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).",
        "0.1": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level fro",
        "0.2": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, le",
        "0.3": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from l",
        "0.4": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' value",
        "0.5": "Given the root of a binary tree, return the bottom-up level order traversal of i",
        "0.6": "Given the root of a binary tree, return the bottom-up level orde",
        "0.7": "Given the root of a binary tree, return the bott",
        "0.8": "Given the root of a binary tree,",
        "0.9": "Given the root o",
        "1.0": ""
      }
    }
  }
]